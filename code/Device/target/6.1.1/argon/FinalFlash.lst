
c:/Users/Bimpiel/Desktop/FinalFlash/target/6.1.1/argon/FinalFlash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000043a4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b83c0  000b83c0  000083c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000084  2003e57c  000b83e4  0000e57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001fc  2003e600  2003e600  0001e600  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b8468  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b846c  000b846c  0001846c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b8472  000b8472  00018472  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b8496  000b8496  00018496  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001b17d0  00000000  00000000  0001849a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001950f  00000000  00000000  001c9c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00064845  00000000  00000000  001e3179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000039a8  00000000  00000000  002479be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000ffa0  00000000  00000000  0024b366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000411e5  00000000  00000000  0025b306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00059487  00000000  00000000  0029c4eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001c4d30  00000000  00000000  002f5972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000a824  00000000  00000000  004ba6a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f003 fc81 	bl	b7958 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f003 fca3 	bl	b79a8 <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003e57c 	.word	0x2003e57c
   b406c:	000b83e4 	.word	0x000b83e4
   b4070:	2003e600 	.word	0x2003e600
   b4074:	2003e600 	.word	0x2003e600
   b4078:	2003e7fc 	.word	0x2003e7fc

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f002 f901 	bl	b6288 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000b839c 	.word	0x000b839c
   b40a0:	000b83c0 	.word	0x000b83c0

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 b8c8 	b.w	b4238 <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 f915 	bl	b42d8 <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f002 b8a1 	b.w	b61f8 <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f000 bea3 	b.w	b4e00 <malloc>

000b40ba <_Znaj>:
   b40ba:	f000 bea1 	b.w	b4e00 <malloc>

000b40be <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40be:	f000 bea7 	b.w	b4e10 <free>
	...

000b40c4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40c4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40c6:	4a03      	ldr	r2, [pc, #12]	; (b40d4 <__cxa_pure_virtual+0x10>)
   b40c8:	4903      	ldr	r1, [pc, #12]	; (b40d8 <__cxa_pure_virtual+0x14>)
   b40ca:	200c      	movs	r0, #12
   b40cc:	f000 fdd4 	bl	b4c78 <panic_>
  while (1);
   b40d0:	e7fe      	b.n	b40d0 <__cxa_pure_virtual+0xc>
   b40d2:	bf00      	nop
   b40d4:	000b49d9 	.word	0x000b49d9
   b40d8:	000b7c9c 	.word	0x000b7c9c

000b40dc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40dc:	7800      	ldrb	r0, [r0, #0]
   b40de:	fab0 f080 	clz	r0, r0
   b40e2:	0940      	lsrs	r0, r0, #5
   b40e4:	4770      	bx	lr

000b40e6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40e6:	2301      	movs	r3, #1
   b40e8:	7003      	strb	r3, [r0, #0]
   b40ea:	4770      	bx	lr

000b40ec <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40ec:	4770      	bx	lr

000b40ee <_ZNSt17_Function_handlerIFvPvjEZ4loopEUlS0_jE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
   b40ee:	2a01      	cmp	r2, #1
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b40f0:	bf08      	it	eq
   b40f2:	6001      	streq	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
   b40f4:	2000      	movs	r0, #0
   b40f6:	4770      	bx	lr

000b40f8 <_ZNSt17_Function_handlerIFvPvjEZ4loopEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj>:

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b40f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b40fa:	6809      	ldr	r1, [r1, #0]
   b40fc:	9101      	str	r1, [sp, #4]
    break;

  case STATE_RUNNING:
    // Sending microphone data to server
    Microphone_PDM::instance().noCopySamples([](void *pSamples, size_t numSamples)
                                             { client.write((const uint8_t *)pSamples, Microphone_PDM::instance().getBufferSizeInBytes()); });
   b40fe:	f000 facb 	bl	b4698 <_ZN14Microphone_PDM8instanceEv>
   b4102:	4604      	mov	r4, r0
	 * 
	 * You can use this with copySamples() to know how big of a buffer you need if you are allocating a
	 * buffer in bytes instead of samples.
	 */
	size_t getBufferSizeInBytes() const {
		return getSampleSizeInBytes() * getNumberOfSamples();
   b4104:	f000 fada 	bl	b46bc <_ZNK14Microphone_PDM20getSampleSizeInBytesEv>
	 * On the nRF52, it's 512 samples (1024 bytes), except in one case: If you set a sample rate of
	 * 8000 Hz, it will be 256 samples because the hardware only samples at 16000 Hz but the code
	 * will automatically discard every other sample so there will only be 256 samples.
	 */	
	size_t getNumberOfSamples() const {
		return BUFFER_SIZE_SAMPLES / copySrcIncrement();
   b4108:	6823      	ldr	r3, [r4, #0]
   b410a:	4605      	mov	r5, r0
   b410c:	689b      	ldr	r3, [r3, #8]
   b410e:	4620      	mov	r0, r4
   b4110:	4798      	blx	r3
   b4112:	9901      	ldr	r1, [sp, #4]
   b4114:	f44f 7300 	mov.w	r3, #512	; 0x200
   b4118:	fbb3 f3f0 	udiv	r3, r3, r0
   b411c:	4803      	ldr	r0, [pc, #12]	; (b412c <_ZNSt17_Function_handlerIFvPvjEZ4loopEUlS0_jE_E9_M_invokeERKSt9_Any_dataOS0_Oj+0x34>)
   b411e:	fb05 f203 	mul.w	r2, r5, r3
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b4122:	b003      	add	sp, #12
   b4124:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   b4128:	f002 bac1 	b.w	b66ae <_ZN9TCPClient5writeEPKhj>
   b412c:	2003e614 	.word	0x2003e614

000b4130 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4130:	4b0a      	ldr	r3, [pc, #40]	; (b415c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4132:	b510      	push	{r4, lr}
   b4134:	4604      	mov	r4, r0
   b4136:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4138:	f001 f9d0 	bl	b54dc <_ZN5spark10LogManager8instanceEv>
   b413c:	4621      	mov	r1, r4
   b413e:	f001 fc1a 	bl	b5976 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4142:	f002 f9cf 	bl	b64e4 <_Z16_fetch_usbserialv>
   b4146:	f002 f9c1 	bl	b64cc <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b414a:	4620      	mov	r0, r4
   b414c:	4b04      	ldr	r3, [pc, #16]	; (b4160 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b414e:	f840 3b04 	str.w	r3, [r0], #4
   b4152:	f001 fa99 	bl	b5688 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4156:	4620      	mov	r0, r4
   b4158:	bd10      	pop	{r4, pc}
   b415a:	bf00      	nop
   b415c:	000b7d54 	.word	0x000b7d54
   b4160:	000b7d3c 	.word	0x000b7d3c

000b4164 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4164:	b510      	push	{r4, lr}
   b4166:	4604      	mov	r4, r0
    }
   b4168:	f7ff ffe2 	bl	b4130 <_ZN5spark16SerialLogHandlerD1Ev>
   b416c:	4620      	mov	r0, r4
   b416e:	2124      	movs	r1, #36	; 0x24
   b4170:	f7ff ffa5 	bl	b40be <_ZdlPvj>
   b4174:	4620      	mov	r0, r4
   b4176:	bd10      	pop	{r4, pc}

000b4178 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4178:	b40e      	push	{r1, r2, r3}
   b417a:	b500      	push	{lr}
   b417c:	b08c      	sub	sp, #48	; 0x30
   b417e:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4180:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4184:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4188:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b418a:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b418e:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4190:	6801      	ldr	r1, [r0, #0]
   b4192:	aa04      	add	r2, sp, #16
   b4194:	201e      	movs	r0, #30
    attr.flags = 0;
   b4196:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b419a:	f000 fd7d 	bl	b4c98 <log_message_v>
}
   b419e:	b00c      	add	sp, #48	; 0x30
   b41a0:	f85d eb04 	ldr.w	lr, [sp], #4
   b41a4:	b003      	add	sp, #12
   b41a6:	4770      	bx	lr

000b41a8 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b41a8:	b40e      	push	{r1, r2, r3}
   b41aa:	b500      	push	{lr}
   b41ac:	b08c      	sub	sp, #48	; 0x30
   b41ae:	aa0d      	add	r2, sp, #52	; 0x34
    attr.flags = 0;
   b41b0:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::error(const char *fmt, ...) const {
   b41b4:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b41b8:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b41ba:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b41be:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b41c0:	6801      	ldr	r1, [r0, #0]
   b41c2:	aa04      	add	r2, sp, #16
   b41c4:	2032      	movs	r0, #50	; 0x32
    attr.flags = 0;
   b41c6:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b41ca:	f000 fd65 	bl	b4c98 <log_message_v>
}
   b41ce:	b00c      	add	sp, #48	; 0x30
   b41d0:	f85d eb04 	ldr.w	lr, [sp], #4
   b41d4:	b003      	add	sp, #12
   b41d6:	4770      	bx	lr

000b41d8 <_Z15toggleRecordingv>:
{
   b41d8:	b538      	push	{r3, r4, r5, lr}
  if (state == STATE_WAITING && WiFi.ready())
   b41da:	4c12      	ldr	r4, [pc, #72]	; (b4224 <_Z15toggleRecordingv+0x4c>)
   b41dc:	7822      	ldrb	r2, [r4, #0]
   b41de:	b99a      	cbnz	r2, b4208 <_Z15toggleRecordingv+0x30>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b41e0:	4b11      	ldr	r3, [pc, #68]	; (b4228 <_Z15toggleRecordingv+0x50>)
   b41e2:	4611      	mov	r1, r2
   b41e4:	6858      	ldr	r0, [r3, #4]
   b41e6:	f000 fdab 	bl	b4d40 <network_ready>
   b41ea:	b168      	cbz	r0, b4208 <_Z15toggleRecordingv+0x30>
    state = STATE_CONNECT; // Start recording
   b41ec:	2501      	movs	r5, #1
   b41ee:	7025      	strb	r5, [r4, #0]
    Serial.println("Recording started");
   b41f0:	f002 f978 	bl	b64e4 <_Z16_fetch_usbserialv>
   b41f4:	490d      	ldr	r1, [pc, #52]	; (b422c <_Z15toggleRecordingv+0x54>)
   b41f6:	f000 ffc2 	bl	b517e <_ZN5Print7printlnEPKc>
    digitalWrite(redLedPin, HIGH); // Turn on red LED when recording
   b41fa:	4629      	mov	r1, r5
    digitalWrite(redLedPin, LOW); // Turn off red LED when not recording
   b41fc:	4b0c      	ldr	r3, [pc, #48]	; (b4230 <_Z15toggleRecordingv+0x58>)
   b41fe:	8818      	ldrh	r0, [r3, #0]
}
   b4200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(redLedPin, LOW); // Turn off red LED when not recording
   b4204:	f003 b83f 	b.w	b7286 <digitalWrite>
  else if (state == STATE_RUNNING)
   b4208:	7823      	ldrb	r3, [r4, #0]
   b420a:	2b02      	cmp	r3, #2
   b420c:	d108      	bne.n	b4220 <_Z15toggleRecordingv+0x48>
    state = STATE_FINISH; // Stop recording
   b420e:	2303      	movs	r3, #3
   b4210:	7023      	strb	r3, [r4, #0]
    Serial.println("Recording stopped");
   b4212:	f002 f967 	bl	b64e4 <_Z16_fetch_usbserialv>
   b4216:	4907      	ldr	r1, [pc, #28]	; (b4234 <_Z15toggleRecordingv+0x5c>)
   b4218:	f000 ffb1 	bl	b517e <_ZN5Print7printlnEPKc>
    digitalWrite(redLedPin, LOW); // Turn off red LED when not recording
   b421c:	2100      	movs	r1, #0
   b421e:	e7ed      	b.n	b41fc <_Z15toggleRecordingv+0x24>
}
   b4220:	bd38      	pop	{r3, r4, r5, pc}
   b4222:	bf00      	nop
   b4224:	2003e670 	.word	0x2003e670
   b4228:	2003e700 	.word	0x2003e700
   b422c:	000b7cb1 	.word	0x000b7cb1
   b4230:	2003e580 	.word	0x2003e580
   b4234:	000b7cc3 	.word	0x000b7cc3

000b4238 <setup>:
{
   b4238:	b510      	push	{r4, lr}
        network_connect(*this, flags, 0, NULL);
   b423a:	4820      	ldr	r0, [pc, #128]	; (b42bc <setup+0x84>)
  pinMode(statusPin, OUTPUT);
   b423c:	4c20      	ldr	r4, [pc, #128]	; (b42c0 <setup+0x88>)
   b423e:	6840      	ldr	r0, [r0, #4]
   b4240:	2300      	movs	r3, #0
   b4242:	461a      	mov	r2, r3
   b4244:	4619      	mov	r1, r3
   b4246:	f000 fd63 	bl	b4d10 <network_connect>
  pinMode(D7, OUTPUT);
   b424a:	2101      	movs	r1, #1
   b424c:	2007      	movs	r0, #7
   b424e:	f003 f809 	bl	b7264 <pinMode>
  digitalWrite(D7, LOW);
   b4252:	2100      	movs	r1, #0
   b4254:	2007      	movs	r0, #7
   b4256:	f003 f816 	bl	b7286 <digitalWrite>
  pinMode(buttonPin, INPUT_PULLUP);
   b425a:	4b1a      	ldr	r3, [pc, #104]	; (b42c4 <setup+0x8c>)
   b425c:	2102      	movs	r1, #2
   b425e:	8818      	ldrh	r0, [r3, #0]
   b4260:	f003 f800 	bl	b7264 <pinMode>
  pinMode(redLedPin, OUTPUT);
   b4264:	4b18      	ldr	r3, [pc, #96]	; (b42c8 <setup+0x90>)
   b4266:	2101      	movs	r1, #1
   b4268:	8818      	ldrh	r0, [r3, #0]
   b426a:	f002 fffb 	bl	b7264 <pinMode>
  pinMode(statusPin, OUTPUT);
   b426e:	8820      	ldrh	r0, [r4, #0]
   b4270:	2101      	movs	r1, #1
   b4272:	f002 fff7 	bl	b7264 <pinMode>
  digitalWrite(statusPin, HIGH);
   b4276:	2101      	movs	r1, #1
   b4278:	8820      	ldrh	r0, [r4, #0]
   b427a:	f003 f804 	bl	b7286 <digitalWrite>
  int err = Microphone_PDM::instance()
   b427e:	f000 fa0b 	bl	b4698 <_ZN14Microphone_PDM8instanceEv>
	Microphone_PDM &withRange(Range range) { this->range = range; return *this; };
   b4282:	2101      	movs	r1, #1
   b4284:	2204      	movs	r2, #4
   b4286:	e9c0 1204 	strd	r1, r2, [r0, #16]
                .init();
   b428a:	6803      	ldr	r3, [r0, #0]
	Microphone_PDM &withSampleRate(int sampleRate) { this->sampleRate = sampleRate; return *this; };
   b428c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
   b4290:	60c2      	str	r2, [r0, #12]
   b4292:	68db      	ldr	r3, [r3, #12]
   b4294:	4798      	blx	r3
  if (err)
   b4296:	4602      	mov	r2, r0
   b4298:	b118      	cbz	r0, b42a2 <setup+0x6a>
    Log.error("PDM decoder init err=%d", err);
   b429a:	490c      	ldr	r1, [pc, #48]	; (b42cc <setup+0x94>)
   b429c:	480c      	ldr	r0, [pc, #48]	; (b42d0 <setup+0x98>)
   b429e:	f7ff ff83 	bl	b41a8 <_ZNK5spark6Logger5errorEPKcz>
  err = Microphone_PDM::instance().start();
   b42a2:	f000 f9f9 	bl	b4698 <_ZN14Microphone_PDM8instanceEv>
   b42a6:	6803      	ldr	r3, [r0, #0]
   b42a8:	695b      	ldr	r3, [r3, #20]
   b42aa:	4798      	blx	r3
  if (err)
   b42ac:	4602      	mov	r2, r0
   b42ae:	b118      	cbz	r0, b42b8 <setup+0x80>
    Log.error("PDM decoder start err=%d", err);
   b42b0:	4908      	ldr	r1, [pc, #32]	; (b42d4 <setup+0x9c>)
   b42b2:	4807      	ldr	r0, [pc, #28]	; (b42d0 <setup+0x98>)
   b42b4:	f7ff ff78 	bl	b41a8 <_ZNK5spark6Logger5errorEPKcz>
}
   b42b8:	bd10      	pop	{r4, pc}
   b42ba:	bf00      	nop
   b42bc:	2003e700 	.word	0x2003e700
   b42c0:	2003e588 	.word	0x2003e588
   b42c4:	2003e57c 	.word	0x2003e57c
   b42c8:	2003e580 	.word	0x2003e580
   b42cc:	000b7cd5 	.word	0x000b7cd5
   b42d0:	2003e6a0 	.word	0x2003e6a0
   b42d4:	000b7ced 	.word	0x000b7ced

000b42d8 <loop>:
{
   b42d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  int buttonState = digitalRead(buttonPin);
   b42da:	4b3e      	ldr	r3, [pc, #248]	; (b43d4 <loop+0xfc>)
   b42dc:	4c3e      	ldr	r4, [pc, #248]	; (b43d8 <loop+0x100>)
   b42de:	8818      	ldrh	r0, [r3, #0]
{
   b42e0:	b087      	sub	sp, #28
  int buttonState = digitalRead(buttonPin);
   b42e2:	f002 ffe9 	bl	b72b8 <digitalRead>
  if (buttonState == LOW)
   b42e6:	2800      	cmp	r0, #0
   b42e8:	d13a      	bne.n	b4360 <loop+0x88>
    if (buttonPressStart == 0)
   b42ea:	6823      	ldr	r3, [r4, #0]
   b42ec:	b913      	cbnz	r3, b42f4 <loop+0x1c>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b42ee:	f000 fb7b 	bl	b49e8 <HAL_Timer_Get_Milli_Seconds>
      buttonPressStart = millis(); // Record the press time
   b42f2:	6020      	str	r0, [r4, #0]
   b42f4:	f000 fb78 	bl	b49e8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - buttonPressStart >= holdThreshold && !buttonHeld)
   b42f8:	6823      	ldr	r3, [r4, #0]
   b42fa:	1ac0      	subs	r0, r0, r3
   b42fc:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b4300:	d306      	bcc.n	b4310 <loop+0x38>
   b4302:	4b36      	ldr	r3, [pc, #216]	; (b43dc <loop+0x104>)
   b4304:	781a      	ldrb	r2, [r3, #0]
   b4306:	b91a      	cbnz	r2, b4310 <loop+0x38>
      buttonHeld = true; // Mark button as held
   b4308:	2201      	movs	r2, #1
   b430a:	701a      	strb	r2, [r3, #0]
      toggleRecording(); // Toggle recording state
   b430c:	f7ff ff64 	bl	b41d8 <_Z15toggleRecordingv>
  switch (state)
   b4310:	4e33      	ldr	r6, [pc, #204]	; (b43e0 <loop+0x108>)
   b4312:	7837      	ldrb	r7, [r6, #0]
   b4314:	2f02      	cmp	r7, #2
   b4316:	d02f      	beq.n	b4378 <loop+0xa0>
   b4318:	2f03      	cmp	r7, #3
   b431a:	d048      	beq.n	b43ae <loop+0xd6>
   b431c:	2f01      	cmp	r7, #1
   b431e:	d129      	bne.n	b4374 <loop+0x9c>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b4320:	4d30      	ldr	r5, [pc, #192]	; (b43e4 <loop+0x10c>)
   b4322:	4b31      	ldr	r3, [pc, #196]	; (b43e8 <loop+0x110>)
   b4324:	9300      	str	r3, [sp, #0]
   b4326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4328:	ac01      	add	r4, sp, #4
   b432a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    if (client.connect(serverAddr, serverPort))
   b432c:	4a2f      	ldr	r2, [pc, #188]	; (b43ec <loop+0x114>)
   b432e:	682b      	ldr	r3, [r5, #0]
   b4330:	7023      	strb	r3, [r4, #0]
   b4332:	8812      	ldrh	r2, [r2, #0]
   b4334:	482e      	ldr	r0, [pc, #184]	; (b43f0 <loop+0x118>)
   b4336:	2300      	movs	r3, #0
   b4338:	4669      	mov	r1, sp
   b433a:	f002 fb43 	bl	b69c4 <_ZN9TCPClient7connectE9IPAddresstm>
   b433e:	4604      	mov	r4, r0
   b4340:	b198      	cbz	r0, b436a <loop+0x92>
      Log.info("starting");
   b4342:	492c      	ldr	r1, [pc, #176]	; (b43f4 <loop+0x11c>)
   b4344:	482c      	ldr	r0, [pc, #176]	; (b43f8 <loop+0x120>)
   b4346:	f7ff ff17 	bl	b4178 <_ZNK5spark6Logger4infoEPKcz>
   b434a:	f000 fb4d 	bl	b49e8 <HAL_Timer_Get_Milli_Seconds>
      recordingStart = millis();
   b434e:	4b2b      	ldr	r3, [pc, #172]	; (b43fc <loop+0x124>)
      digitalWrite(D7, HIGH);
   b4350:	4639      	mov	r1, r7
      recordingStart = millis();
   b4352:	6018      	str	r0, [r3, #0]
      digitalWrite(D7, HIGH);
   b4354:	2007      	movs	r0, #7
   b4356:	f002 ff96 	bl	b7286 <digitalWrite>
      state = STATE_RUNNING;
   b435a:	2302      	movs	r3, #2
  case STATE_FINISH:
    digitalWrite(D7, LOW);
    client.stop();
    Log.info("stopping");
    digitalWrite(redLedPin, LOW);
    state = STATE_WAITING;
   b435c:	7033      	strb	r3, [r6, #0]
    break;
  }
}
   b435e:	e009      	b.n	b4374 <loop+0x9c>
    buttonHeld = false;   // Reset hold state
   b4360:	4a1e      	ldr	r2, [pc, #120]	; (b43dc <loop+0x104>)
    buttonPressStart = 0; // Reset press time
   b4362:	2300      	movs	r3, #0
   b4364:	6023      	str	r3, [r4, #0]
    buttonHeld = false;   // Reset hold state
   b4366:	7013      	strb	r3, [r2, #0]
   b4368:	e7d2      	b.n	b4310 <loop+0x38>
      Log.info("failed to connect to server");
   b436a:	4925      	ldr	r1, [pc, #148]	; (b4400 <loop+0x128>)
   b436c:	4822      	ldr	r0, [pc, #136]	; (b43f8 <loop+0x120>)
   b436e:	f7ff ff03 	bl	b4178 <_ZNK5spark6Logger4infoEPKcz>
      state = STATE_WAITING;
   b4372:	7034      	strb	r4, [r6, #0]
}
   b4374:	b007      	add	sp, #28
   b4376:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Microphone_PDM::instance().noCopySamples([](void *pSamples, size_t numSamples)
   b4378:	f000 f98e 	bl	b4698 <_ZN14Microphone_PDM8instanceEv>
                                             { client.write((const uint8_t *)pSamples, Microphone_PDM::instance().getBufferSizeInBytes()); });
   b437c:	6803      	ldr	r3, [r0, #0]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   b437e:	4a21      	ldr	r2, [pc, #132]	; (b4404 <loop+0x12c>)
   b4380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4382:	9203      	str	r2, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4384:	4a20      	ldr	r2, [pc, #128]	; (b4408 <loop+0x130>)
   b4386:	9202      	str	r2, [sp, #8]
    Microphone_PDM::instance().noCopySamples([](void *pSamples, size_t numSamples)
   b4388:	4669      	mov	r1, sp
   b438a:	4798      	blx	r3
      if (_M_manager)
   b438c:	9b02      	ldr	r3, [sp, #8]
   b438e:	b11b      	cbz	r3, b4398 <loop+0xc0>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4390:	4669      	mov	r1, sp
   b4392:	2203      	movs	r2, #3
   b4394:	4608      	mov	r0, r1
   b4396:	4798      	blx	r3
   b4398:	f000 fb26 	bl	b49e8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - recordingStart >= MAX_RECORDING_LENGTH_MS)
   b439c:	4b17      	ldr	r3, [pc, #92]	; (b43fc <loop+0x124>)
   b439e:	681b      	ldr	r3, [r3, #0]
   b43a0:	1ac0      	subs	r0, r0, r3
   b43a2:	f242 730f 	movw	r3, #9999	; 0x270f
   b43a6:	4298      	cmp	r0, r3
   b43a8:	d9e4      	bls.n	b4374 <loop+0x9c>
      state = STATE_FINISH;
   b43aa:	2303      	movs	r3, #3
   b43ac:	e7d6      	b.n	b435c <loop+0x84>
    digitalWrite(D7, LOW);
   b43ae:	2100      	movs	r1, #0
   b43b0:	2007      	movs	r0, #7
   b43b2:	f002 ff68 	bl	b7286 <digitalWrite>
    client.stop();
   b43b6:	480e      	ldr	r0, [pc, #56]	; (b43f0 <loop+0x118>)
   b43b8:	f002 fbd6 	bl	b6b68 <_ZN9TCPClient4stopEv>
    Log.info("stopping");
   b43bc:	4913      	ldr	r1, [pc, #76]	; (b440c <loop+0x134>)
   b43be:	480e      	ldr	r0, [pc, #56]	; (b43f8 <loop+0x120>)
   b43c0:	f7ff feda 	bl	b4178 <_ZNK5spark6Logger4infoEPKcz>
    digitalWrite(redLedPin, LOW);
   b43c4:	4b12      	ldr	r3, [pc, #72]	; (b4410 <loop+0x138>)
   b43c6:	2100      	movs	r1, #0
   b43c8:	8818      	ldrh	r0, [r3, #0]
   b43ca:	f002 ff5c 	bl	b7286 <digitalWrite>
    state = STATE_WAITING;
   b43ce:	2300      	movs	r3, #0
   b43d0:	e7c4      	b.n	b435c <loop+0x84>
   b43d2:	bf00      	nop
   b43d4:	2003e57c 	.word	0x2003e57c
   b43d8:	2003e610 	.word	0x2003e610
   b43dc:	2003e60c 	.word	0x2003e60c
   b43e0:	2003e670 	.word	0x2003e670
   b43e4:	2003e65c 	.word	0x2003e65c
   b43e8:	000b7f50 	.word	0x000b7f50
   b43ec:	2003e584 	.word	0x2003e584
   b43f0:	2003e614 	.word	0x2003e614
   b43f4:	000b7d06 	.word	0x000b7d06
   b43f8:	2003e6a0 	.word	0x2003e6a0
   b43fc:	2003e654 	.word	0x2003e654
   b4400:	000b7d0f 	.word	0x000b7d0f
   b4404:	000b40f9 	.word	0x000b40f9
   b4408:	000b40ef 	.word	0x000b40ef
   b440c:	000b7d2b 	.word	0x000b7d2b
   b4410:	2003e580 	.word	0x2003e580

000b4414 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4414:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4416:	e9d0 5300 	ldrd	r5, r3, [r0]
   b441a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b441c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b441e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4422:	42ae      	cmp	r6, r5
   b4424:	d004      	beq.n	b4430 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4426:	4628      	mov	r0, r5
   b4428:	f000 fda4 	bl	b4f74 <_ZN6StringD1Ev>
   b442c:	3514      	adds	r5, #20
   b442e:	e7f8      	b.n	b4422 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4430:	6820      	ldr	r0, [r4, #0]
   b4432:	f000 fced 	bl	b4e10 <free>
    AllocatorT::free(data_);
}
   b4436:	4620      	mov	r0, r4
   b4438:	bd70      	pop	{r4, r5, r6, pc}

000b443a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b443a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b443e:	4604      	mov	r4, r0
   b4440:	460d      	mov	r5, r1
   b4442:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4444:	d916      	bls.n	b4474 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4446:	4290      	cmp	r0, r2
   b4448:	d215      	bcs.n	b4476 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b444a:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b444e:	1a75      	subs	r5, r6, r1
   b4450:	f1a1 0714 	sub.w	r7, r1, #20
   b4454:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4456:	42b7      	cmp	r7, r6
   b4458:	d01c      	beq.n	b4494 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b445a:	b12c      	cbz	r4, b4468 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b445c:	4631      	mov	r1, r6
   b445e:	4620      	mov	r0, r4
   b4460:	f000 fdf1 	bl	b5046 <_ZN6StringC1EOS_>
   b4464:	7c33      	ldrb	r3, [r6, #16]
   b4466:	7423      	strb	r3, [r4, #16]
   b4468:	4630      	mov	r0, r6
   b446a:	f000 fd83 	bl	b4f74 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b446e:	3e14      	subs	r6, #20
   b4470:	3c14      	subs	r4, #20
   b4472:	e7f0      	b.n	b4456 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4474:	d00e      	beq.n	b4494 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4476:	42b5      	cmp	r5, r6
   b4478:	d00c      	beq.n	b4494 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b447a:	b12c      	cbz	r4, b4488 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b447c:	4629      	mov	r1, r5
   b447e:	4620      	mov	r0, r4
   b4480:	f000 fde1 	bl	b5046 <_ZN6StringC1EOS_>
   b4484:	7c2b      	ldrb	r3, [r5, #16]
   b4486:	7423      	strb	r3, [r4, #16]
   b4488:	4628      	mov	r0, r5
   b448a:	f000 fd73 	bl	b4f74 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b448e:	3514      	adds	r5, #20
   b4490:	3414      	adds	r4, #20
   b4492:	e7f0      	b.n	b4476 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4496 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b449a:	2300      	movs	r3, #0
   b449c:	e9c0 3300 	strd	r3, r3, [r0]
   b44a0:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b44a2:	684f      	ldr	r7, [r1, #4]
   b44a4:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b44a6:	4604      	mov	r4, r0
   b44a8:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b44aa:	dd23      	ble.n	b44f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b44ac:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b44b0:	fb08 f007 	mul.w	r0, r8, r7
   b44b4:	f000 fca4 	bl	b4e00 <malloc>
            if (!d) {
   b44b8:	4605      	mov	r5, r0
   b44ba:	b1d8      	cbz	r0, b44f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b44bc:	e9d4 1200 	ldrd	r1, r2, [r4]
   b44c0:	fb08 1202 	mla	r2, r8, r2, r1
   b44c4:	f7ff ffb9 	bl	b443a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b44c8:	6820      	ldr	r0, [r4, #0]
   b44ca:	f000 fca1 	bl	b4e10 <free>
        data_ = d;
   b44ce:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b44d0:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b44d2:	e9d6 7300 	ldrd	r7, r3, [r6]
   b44d6:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b44da:	45b8      	cmp	r8, r7
   b44dc:	d008      	beq.n	b44f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b44de:	4639      	mov	r1, r7
   b44e0:	4628      	mov	r0, r5
   b44e2:	f000 fdca 	bl	b507a <_ZN6StringC1ERKS_>
   b44e6:	7c3b      	ldrb	r3, [r7, #16]
   b44e8:	742b      	strb	r3, [r5, #16]
   b44ea:	3714      	adds	r7, #20
   b44ec:	3514      	adds	r5, #20
   b44ee:	e7f4      	b.n	b44da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b44f0:	6873      	ldr	r3, [r6, #4]
   b44f2:	6063      	str	r3, [r4, #4]
}
   b44f4:	4620      	mov	r0, r4
   b44f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b44fc <_GLOBAL__sub_I_SystemMode>:
}
   b44fc:	b570      	push	{r4, r5, r6, lr}
SYSTEM_THREAD(ENABLED);
   b44fe:	2100      	movs	r1, #0
}
   b4500:	b08e      	sub	sp, #56	; 0x38
SYSTEM_THREAD(ENABLED);
   b4502:	2001      	movs	r0, #1
   b4504:	f000 fbe8 	bl	b4cd8 <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4508:	4b27      	ldr	r3, [pc, #156]	; (b45a8 <_GLOBAL__sub_I_SystemMode+0xac>)
    SleepResult() {}
   b450a:	4a28      	ldr	r2, [pc, #160]	; (b45ac <_GLOBAL__sub_I_SystemMode+0xb0>)
   b450c:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b450e:	2400      	movs	r4, #0
   b4510:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4514:	2002      	movs	r0, #2
   b4516:	f000 fbd7 	bl	b4cc8 <set_system_mode>
        capacity_(0) {
   b451a:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b451e:	9404      	str	r4, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
   b4520:	f001 ffe0 	bl	b64e4 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b4524:	4c22      	ldr	r4, [pc, #136]	; (b45b0 <_GLOBAL__sub_I_SystemMode+0xb4>)
   b4526:	4605      	mov	r5, r0
   b4528:	a902      	add	r1, sp, #8
   b452a:	a805      	add	r0, sp, #20
   b452c:	f7ff ffb3 	bl	b4496 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4530:	4626      	mov	r6, r4
        stream_(&stream) {
   b4532:	a905      	add	r1, sp, #20
   b4534:	a808      	add	r0, sp, #32
   b4536:	f7ff ffae 	bl	b4496 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b453a:	4b1e      	ldr	r3, [pc, #120]	; (b45b4 <_GLOBAL__sub_I_SystemMode+0xb8>)
   b453c:	f846 3b04 	str.w	r3, [r6], #4
   b4540:	a908      	add	r1, sp, #32
   b4542:	a80b      	add	r0, sp, #44	; 0x2c
   b4544:	f7ff ffa7 	bl	b4496 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4548:	aa0b      	add	r2, sp, #44	; 0x2c
   b454a:	211e      	movs	r1, #30
   b454c:	4630      	mov	r0, r6
   b454e:	f001 faf5 	bl	b5b3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4552:	a80b      	add	r0, sp, #44	; 0x2c
   b4554:	f7ff ff5e 	bl	b4414 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4558:	a808      	add	r0, sp, #32
   b455a:	f7ff ff5b 	bl	b4414 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b455e:	4b16      	ldr	r3, [pc, #88]	; (b45b8 <_GLOBAL__sub_I_SystemMode+0xbc>)
   b4560:	6023      	str	r3, [r4, #0]
   b4562:	6225      	str	r5, [r4, #32]
   b4564:	a805      	add	r0, sp, #20
   b4566:	f7ff ff55 	bl	b4414 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b456a:	4b14      	ldr	r3, [pc, #80]	; (b45bc <_GLOBAL__sub_I_SystemMode+0xc0>)
   b456c:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b456e:	f001 ffb9 	bl	b64e4 <_Z16_fetch_usbserialv>
   b4572:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4576:	f001 ffa5 	bl	b64c4 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b457a:	f000 ffaf 	bl	b54dc <_ZN5spark10LogManager8instanceEv>
   b457e:	4621      	mov	r1, r4
   b4580:	f001 f9b2 	bl	b58e8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   b4584:	a802      	add	r0, sp, #8
   b4586:	f7ff ff45 	bl	b4414 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
IPAddress serverAddr = IPAddress(172,30,137,143);
   b458a:	238f      	movs	r3, #143	; 0x8f
   b458c:	9300      	str	r3, [sp, #0]
   b458e:	221e      	movs	r2, #30
   b4590:	2389      	movs	r3, #137	; 0x89
   b4592:	21ac      	movs	r1, #172	; 0xac
   b4594:	480a      	ldr	r0, [pc, #40]	; (b45c0 <_GLOBAL__sub_I_SystemMode+0xc4>)
   b4596:	f001 ff27 	bl	b63e8 <_ZN9IPAddressC1Ehhhh>
TCPClient client;
   b459a:	480a      	ldr	r0, [pc, #40]	; (b45c4 <_GLOBAL__sub_I_SystemMode+0xc8>)
}
   b459c:	b00e      	add	sp, #56	; 0x38
   b459e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
TCPClient client;
   b45a2:	f002 bb2b 	b.w	b6bfc <_ZN9TCPClientC1Ev>
   b45a6:	bf00      	nop
   b45a8:	2003e600 	.word	0x2003e600
   b45ac:	ffff0000 	.word	0xffff0000
   b45b0:	2003e630 	.word	0x2003e630
   b45b4:	000b7d3c 	.word	0x000b7d3c
   b45b8:	000b7ed4 	.word	0x000b7ed4
   b45bc:	000b7d54 	.word	0x000b7d54
   b45c0:	2003e658 	.word	0x2003e658
   b45c4:	2003e614 	.word	0x2003e614

000b45c8 <_ZN14Microphone_PDM4initEv>:
		return Microphone_PDM_MCU::init();
   b45c8:	f000 b8e4 	b.w	b4794 <_ZN20Microphone_PDM_nRF524initEv>

000b45cc <_ZN14Microphone_PDM6uninitEv>:
		return Microphone_PDM_MCU::uninit();
   b45cc:	f000 b928 	b.w	b4820 <_ZN20Microphone_PDM_nRF526uninitEv>

000b45d0 <_ZN14Microphone_PDM5startEv>:
		return Microphone_PDM_MCU::start();
   b45d0:	f000 b932 	b.w	b4838 <_ZN20Microphone_PDM_nRF525startEv>

000b45d4 <_ZN14Microphone_PDM4stopEv>:
		return Microphone_PDM_MCU::stop();
   b45d4:	f000 b937 	b.w	b4846 <_ZN20Microphone_PDM_nRF524stopEv>

000b45d8 <_ZNK14Microphone_PDM16samplesAvailableEv>:
		return Microphone_PDM_MCU::samplesAvailable();
   b45d8:	f000 b8c7 	b.w	b476a <_ZNK20Microphone_PDM_nRF5216samplesAvailableEv>

000b45dc <_ZN14Microphone_PDM11copySamplesEPv>:
		return Microphone_PDM_MCU::copySamples(pSamples);
   b45dc:	f000 b937 	b.w	b484e <_ZN20Microphone_PDM_nRF5211copySamplesEPv>

000b45e0 <_ZN18Microphone_PDM_MCUD1Ev>:
 * @brief Microphone_PDM_MCU is an alias for the MCU-specific class like Microphone_PDM_nRF52
 * 
 * This class exists so the subclass Microphone_PDM can just reference Microphone_PDM_MCU
 * as its superclass regardless of which class is actually used.
 */
class Microphone_PDM_MCU : public Microphone_PDM_nRF52 {
   b45e0:	b510      	push	{r4, lr}
   b45e2:	4b03      	ldr	r3, [pc, #12]	; (b45f0 <_ZN18Microphone_PDM_MCUD1Ev+0x10>)
   b45e4:	6003      	str	r3, [r0, #0]
   b45e6:	4604      	mov	r4, r0
   b45e8:	f000 f8be 	bl	b4768 <_ZN20Microphone_PDM_nRF52D1Ev>
   b45ec:	4620      	mov	r0, r4
   b45ee:	bd10      	pop	{r4, pc}
   b45f0:	000b7d6c 	.word	0x000b7d6c

000b45f4 <_ZN18Microphone_PDM_MCUD0Ev>:
   b45f4:	b510      	push	{r4, lr}
   b45f6:	4604      	mov	r4, r0
   b45f8:	f7ff fff2 	bl	b45e0 <_ZN18Microphone_PDM_MCUD1Ev>
   b45fc:	4620      	mov	r0, r4
   b45fe:	f44f 6103 	mov.w	r1, #2096	; 0x830
   b4602:	f7ff fd5c 	bl	b40be <_ZdlPvj>
   b4606:	4620      	mov	r0, r4
   b4608:	bd10      	pop	{r4, pc}
	...

000b460c <_ZN14Microphone_PDMD1Ev>:
Microphone_PDM *Microphone_PDM::_instance = NULL;

Microphone_PDM::Microphone_PDM() {
}

Microphone_PDM::~Microphone_PDM() {
   b460c:	b510      	push	{r4, lr}
   b460e:	4b03      	ldr	r3, [pc, #12]	; (b461c <_ZN14Microphone_PDMD1Ev+0x10>)
   b4610:	6003      	str	r3, [r0, #0]
   b4612:	4604      	mov	r4, r0
   b4614:	f7ff ffe4 	bl	b45e0 <_ZN18Microphone_PDM_MCUD1Ev>

}
   b4618:	4620      	mov	r0, r4
   b461a:	bd10      	pop	{r4, pc}
   b461c:	000b7d9c 	.word	0x000b7d9c

000b4620 <_ZN14Microphone_PDMD0Ev>:
Microphone_PDM::~Microphone_PDM() {
   b4620:	b510      	push	{r4, lr}
   b4622:	4604      	mov	r4, r0
}
   b4624:	f7ff fff2 	bl	b460c <_ZN14Microphone_PDMD1Ev>
   b4628:	4620      	mov	r0, r4
   b462a:	f640 0134 	movw	r1, #2100	; 0x834
   b462e:	f7ff fd46 	bl	b40be <_ZdlPvj>
   b4632:	4620      	mov	r0, r4
   b4634:	bd10      	pop	{r4, pc}

000b4636 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4636:	b510      	push	{r4, lr}
      if (_M_manager)
   b4638:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b463a:	4604      	mov	r4, r0
      if (_M_manager)
   b463c:	b113      	cbz	r3, b4644 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b463e:	2203      	movs	r2, #3
   b4640:	4601      	mov	r1, r0
   b4642:	4798      	blx	r3
    }
   b4644:	4620      	mov	r0, r4
   b4646:	bd10      	pop	{r4, pc}

000b4648 <_ZN14Microphone_PDM13noCopySamplesESt8functionIFvPvjEE>:
	bool noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
   b4648:	b530      	push	{r4, r5, lr}
   b464a:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   b464c:	2300      	movs	r3, #0
   b464e:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b4650:	688b      	ldr	r3, [r1, #8]
   b4652:	4605      	mov	r5, r0
   b4654:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   b4656:	b133      	cbz	r3, b4666 <_ZN14Microphone_PDM13noCopySamplesESt8functionIFvPvjEE+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4658:	2202      	movs	r2, #2
   b465a:	4668      	mov	r0, sp
   b465c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b465e:	68e3      	ldr	r3, [r4, #12]
   b4660:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b4662:	68a3      	ldr	r3, [r4, #8]
   b4664:	9302      	str	r3, [sp, #8]
		return Microphone_PDM_MCU::noCopySamples(callback);
   b4666:	4669      	mov	r1, sp
   b4668:	4628      	mov	r0, r5
   b466a:	f000 f8fd 	bl	b4868 <_ZN20Microphone_PDM_nRF5213noCopySamplesESt8functionIFvPvjEE>
   b466e:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b4670:	4668      	mov	r0, sp
   b4672:	f7ff ffe0 	bl	b4636 <_ZNSt14_Function_baseD1Ev>
	}
   b4676:	4620      	mov	r0, r4
   b4678:	b005      	add	sp, #20
   b467a:	bd30      	pop	{r4, r5, pc}

000b467c <_ZN14Microphone_PDMC1Ev>:
Microphone_PDM::Microphone_PDM() {
   b467c:	b510      	push	{r4, lr}
   b467e:	4604      	mov	r4, r0
   b4680:	f000 f916 	bl	b48b0 <_ZN20Microphone_PDM_nRF52C1Ev>
   b4684:	4b03      	ldr	r3, [pc, #12]	; (b4694 <_ZN14Microphone_PDMC1Ev+0x18>)
   b4686:	6023      	str	r3, [r4, #0]
   b4688:	2300      	movs	r3, #0
   b468a:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
}
   b468e:	4620      	mov	r0, r4
   b4690:	bd10      	pop	{r4, pc}
   b4692:	bf00      	nop
   b4694:	000b7d9c 	.word	0x000b7d9c

000b4698 <_ZN14Microphone_PDM8instanceEv>:

// [static] 
Microphone_PDM &Microphone_PDM::instance() {
   b4698:	b538      	push	{r3, r4, r5, lr}
	if (!_instance) {
   b469a:	4d07      	ldr	r5, [pc, #28]	; (b46b8 <_ZN14Microphone_PDM8instanceEv+0x20>)
   b469c:	682b      	ldr	r3, [r5, #0]
   b469e:	b943      	cbnz	r3, b46b2 <_ZN14Microphone_PDM8instanceEv+0x1a>
		_instance = new Microphone_PDM();
   b46a0:	f640 0034 	movw	r0, #2100	; 0x834
   b46a4:	f7ff fd07 	bl	b40b6 <_Znwj>
   b46a8:	4604      	mov	r4, r0
   b46aa:	b108      	cbz	r0, b46b0 <_ZN14Microphone_PDM8instanceEv+0x18>
   b46ac:	f7ff ffe6 	bl	b467c <_ZN14Microphone_PDMC1Ev>
   b46b0:	602c      	str	r4, [r5, #0]
	}
	return *_instance;
}
   b46b2:	6828      	ldr	r0, [r5, #0]
   b46b4:	bd38      	pop	{r3, r4, r5, pc}
   b46b6:	bf00      	nop
   b46b8:	2003e674 	.word	0x2003e674

000b46bc <_ZNK14Microphone_PDM20getSampleSizeInBytesEv>:
	}
	sampling = NULL;
}

size_t Microphone_PDM::getSampleSizeInBytes() const {
	switch(outputSize) {
   b46bc:	6903      	ldr	r3, [r0, #16]
		case OutputSize::UNSIGNED_8:
			return 1;

		default:
			return 2;
   b46be:	2b00      	cmp	r3, #0
	}
}
   b46c0:	bf0c      	ite	eq
   b46c2:	2001      	moveq	r0, #1
   b46c4:	2002      	movne	r0, #2
   b46c6:	4770      	bx	lr

000b46c8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>:


void Microphone_PDM_Base::copySamplesInternal(const int16_t *src, uint8_t *dst) const {
   b46c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const int16_t *srcEnd = &src[numSamples];

	size_t increment = copySrcIncrement();
   b46ca:	6803      	ldr	r3, [r0, #0]
	const int16_t *srcEnd = &src[numSamples];
   b46cc:	6986      	ldr	r6, [r0, #24]
	size_t increment = copySrcIncrement();
   b46ce:	689b      	ldr	r3, [r3, #8]
void Microphone_PDM_Base::copySamplesInternal(const int16_t *src, uint8_t *dst) const {
   b46d0:	4607      	mov	r7, r0
   b46d2:	460c      	mov	r4, r1
   b46d4:	4615      	mov	r5, r2
	const int16_t *srcEnd = &src[numSamples];
   b46d6:	eb01 0646 	add.w	r6, r1, r6, lsl #1
	size_t increment = copySrcIncrement();
   b46da:	4798      	blx	r3

	if (outputSize == OutputSize::UNSIGNED_8) {
   b46dc:	693b      	ldr	r3, [r7, #16]
   b46de:	b9c3      	cbnz	r3, b4712 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x4a>

		// Scale the 16-bit signed values to an appropriate range for unsigned 8-bit values
		int16_t div = (int16_t)(1 << (size_t) range);
   b46e0:	697b      	ldr	r3, [r7, #20]
   b46e2:	2201      	movs	r2, #1
   b46e4:	409a      	lsls	r2, r3
   b46e6:	b212      	sxth	r2, r2

		while(src < srcEnd) {
			int16_t val = *src / div;
			src += increment;
   b46e8:	0040      	lsls	r0, r0, #1
			if (val > 127) {
				val = 127;
			}

			// Add 128 to make unsigned 8-bit (offset)
			*((uint8_t *)dst) = (uint8_t) (val + 128);
   b46ea:	f06f 017f 	mvn.w	r1, #127	; 0x7f
		while(src < srcEnd) {
   b46ee:	42b4      	cmp	r4, r6
   b46f0:	d236      	bcs.n	b4760 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
			int16_t val = *src / div;
   b46f2:	f9b4 3000 	ldrsh.w	r3, [r4]
   b46f6:	fb93 f3f2 	sdiv	r3, r3, r2
   b46fa:	b21b      	sxth	r3, r3
			src += increment;
   b46fc:	2b7f      	cmp	r3, #127	; 0x7f
   b46fe:	bfa8      	it	ge
   b4700:	237f      	movge	r3, #127	; 0x7f
			*((uint8_t *)dst) = (uint8_t) (val + 128);
   b4702:	428b      	cmp	r3, r1
   b4704:	bfb8      	it	lt
   b4706:	460b      	movlt	r3, r1
   b4708:	3b80      	subs	r3, #128	; 0x80
   b470a:	f805 3b01 	strb.w	r3, [r5], #1
			src += increment;
   b470e:	4404      	add	r4, r0
		while(src < srcEnd) {
   b4710:	e7ed      	b.n	b46ee <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x26>
			dst += sizeof(uint8_t);
		}

	}
	else if (outputSize == OutputSize::SIGNED_16) {		
   b4712:	2b01      	cmp	r3, #1
   b4714:	d117      	bne.n	b4746 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x7e>
		int32_t mult = (int32_t)(1 << (8 - (size_t) range));
   b4716:	697a      	ldr	r2, [r7, #20]
			// Scale to signed 16 bit range
			int32_t val = (int32_t)*src * mult;
			src += increment;

			// Clip to signed 16-bit
			if (val < -32767) {
   b4718:	4912      	ldr	r1, [pc, #72]	; (b4764 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x9c>)
		int32_t mult = (int32_t)(1 << (8 - (size_t) range));
   b471a:	f1c2 0208 	rsb	r2, r2, #8
			src += increment;
   b471e:	0040      	lsls	r0, r0, #1
				val = -32767;
			}
			if (val > 32768) {
				val = 32868;
   b4720:	f248 0764 	movw	r7, #32868	; 0x8064
		while(src < srcEnd) {
   b4724:	42b4      	cmp	r4, r6
   b4726:	d21b      	bcs.n	b4760 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
			int32_t val = (int32_t)*src * mult;
   b4728:	f9b4 3000 	ldrsh.w	r3, [r4]
   b472c:	4093      	lsls	r3, r2
			if (val < -32767) {
   b472e:	428b      	cmp	r3, r1
			src += increment;
   b4730:	4404      	add	r4, r0
			if (val < -32767) {
   b4732:	db06      	blt.n	b4742 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x7a>
				val = 32868;
   b4734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   b4738:	bfc8      	it	gt
   b473a:	463b      	movgt	r3, r7
			}

			*((int16_t *)dst) = (int16_t) val;
   b473c:	f825 3b02 	strh.w	r3, [r5], #2
		while(src < srcEnd) {
   b4740:	e7f0      	b.n	b4724 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x5c>
				val = -32767;
   b4742:	4b08      	ldr	r3, [pc, #32]	; (b4764 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x9c>)
   b4744:	e7fa      	b.n	b473c <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x74>
			dst += sizeof(uint16_t);
		}
	}
	else {
		// OutputSize::RAW_SIGNED_16
		if (src != (int16_t *)dst || increment != 1) {
   b4746:	42ac      	cmp	r4, r5
   b4748:	d101      	bne.n	b474e <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x86>
   b474a:	2801      	cmp	r0, #1
   b474c:	d008      	beq.n	b4760 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
			while(src < srcEnd) {
				*((int16_t *)dst) = *src;
				dst += sizeof(int16_t);
				src += increment;
   b474e:	0040      	lsls	r0, r0, #1
			while(src < srcEnd) {
   b4750:	42b4      	cmp	r4, r6
   b4752:	d205      	bcs.n	b4760 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x98>
				*((int16_t *)dst) = *src;
   b4754:	f9b4 3000 	ldrsh.w	r3, [r4]
   b4758:	f825 3b02 	strh.w	r3, [r5], #2
				src += increment;
   b475c:	4404      	add	r4, r0
			while(src < srcEnd) {
   b475e:	e7f7      	b.n	b4750 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh+0x88>
			}
		}
	}
}
   b4760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4762:	bf00      	nop
   b4764:	ffff8001 	.word	0xffff8001

000b4768 <_ZN20Microphone_PDM_nRF52D1Ev>:

}

Microphone_PDM_nRF52::~Microphone_PDM_nRF52() {

}
   b4768:	4770      	bx	lr

000b476a <_ZNK20Microphone_PDM_nRF5216samplesAvailableEv>:
	return (int)err;
}


bool Microphone_PDM_nRF52::samplesAvailable() const {
	return (currentSampleAvailable != NULL);
   b476a:	6a80      	ldr	r0, [r0, #40]	; 0x28
}
   b476c:	3800      	subs	r0, #0
   b476e:	bf18      	it	ne
   b4770:	2001      	movne	r0, #1
   b4772:	4770      	bx	lr

000b4774 <_ZNK20Microphone_PDM_nRF5216copySrcIncrementEv>:
	}

}

size_t Microphone_PDM_nRF52::copySrcIncrement() const {
	if (sampleRate == 8000) {
   b4774:	68c3      	ldr	r3, [r0, #12]
		return 2;
	}
	else {
		return 1;
   b4776:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
	}
}
   b477a:	bf0c      	ite	eq
   b477c:	2002      	moveq	r0, #2
   b477e:	2001      	movne	r0, #1
   b4780:	4770      	bx	lr

000b4782 <_ZN20Microphone_PDM_nRF52D0Ev>:
Microphone_PDM_nRF52::~Microphone_PDM_nRF52() {
   b4782:	b510      	push	{r4, lr}
}
   b4784:	f44f 6103 	mov.w	r1, #2096	; 0x830
Microphone_PDM_nRF52::~Microphone_PDM_nRF52() {
   b4788:	4604      	mov	r4, r0
}
   b478a:	f7ff fc98 	bl	b40be <_ZdlPvj>
   b478e:	4620      	mov	r0, r4
   b4790:	bd10      	pop	{r4, pc}
	...

000b4794 <_ZN20Microphone_PDM_nRF524initEv>:
int Microphone_PDM_nRF52::init() {
   b4794:	b530      	push	{r4, r5, lr}
   b4796:	b085      	sub	sp, #20
   b4798:	4604      	mov	r4, r0
	Hal_Pin_Info *pinMap = hal_pin_map();
   b479a:	f000 f8db 	bl	b4954 <hal_pin_map>
	pinMode(clkPin, OUTPUT);
   b479e:	2101      	movs	r1, #1
	Hal_Pin_Info *pinMap = hal_pin_map();
   b47a0:	4605      	mov	r5, r0
	pinMode(clkPin, OUTPUT);
   b47a2:	88a0      	ldrh	r0, [r4, #4]
   b47a4:	f002 fd5e 	bl	b7264 <pinMode>
	pinMode(datPin, INPUT);
   b47a8:	88e0      	ldrh	r0, [r4, #6]
   b47aa:	2100      	movs	r1, #0
   b47ac:	f002 fd5a 	bl	b7264 <pinMode>
	attachInterruptDirect(PDM_IRQn, nrfx_pdm_irq_handler, false);
   b47b0:	4919      	ldr	r1, [pc, #100]	; (b4818 <_ZN20Microphone_PDM_nRF524initEv+0x84>)
   b47b2:	2200      	movs	r2, #0
   b47b4:	201d      	movs	r0, #29
   b47b6:	f001 febb 	bl	b6530 <_Z21attachInterruptDirect9IRQn_TypePFvvEb>
	uint8_t nrfClkPin = (uint8_t)NRF_GPIO_PIN_MAP(pinMap[clkPin].gpio_port, pinMap[clkPin].gpio_pin);
   b47ba:	88a3      	ldrh	r3, [r4, #4]
   b47bc:	011a      	lsls	r2, r3, #4
   b47be:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   b47c2:	5ca9      	ldrb	r1, [r5, r2]
   b47c4:	785a      	ldrb	r2, [r3, #1]
	uint8_t nrfDatPin = (uint8_t)NRF_GPIO_PIN_MAP(pinMap[datPin].gpio_port, pinMap[datPin].gpio_pin);
   b47c6:	88e3      	ldrh	r3, [r4, #6]
	uint8_t nrfClkPin = (uint8_t)NRF_GPIO_PIN_MAP(pinMap[clkPin].gpio_port, pinMap[clkPin].gpio_pin);
   b47c8:	f002 021f 	and.w	r2, r2, #31
   b47cc:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
	uint8_t nrfDatPin = (uint8_t)NRF_GPIO_PIN_MAP(pinMap[datPin].gpio_port, pinMap[datPin].gpio_pin);
   b47d0:	0119      	lsls	r1, r3, #4
   b47d2:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   b47d6:	5c69      	ldrb	r1, [r5, r1]
   b47d8:	785b      	ldrb	r3, [r3, #1]
	nrfx_pdm_config_t config = NRFX_PDM_DEFAULT_CONFIG(nrfClkPin, nrfDatPin);
   b47da:	f88d 2006 	strb.w	r2, [sp, #6]
	uint8_t nrfDatPin = (uint8_t)NRF_GPIO_PIN_MAP(pinMap[datPin].gpio_port, pinMap[datPin].gpio_pin);
   b47de:	f003 031f 	and.w	r3, r3, #31
   b47e2:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
	nrfx_pdm_config_t config = NRFX_PDM_DEFAULT_CONFIG(nrfClkPin, nrfDatPin);
   b47e6:	f88d 3007 	strb.w	r3, [sp, #7]
	config.mode = stereoMode ? NRF_PDM_MODE_STEREO : NRF_PDM_MODE_MONO;
   b47ea:	7a23      	ldrb	r3, [r4, #8]
   b47ec:	f083 0301 	eor.w	r3, r3, #1
   b47f0:	f88d 3004 	strb.w	r3, [sp, #4]
	config.clock_freq = freq;
   b47f4:	6a23      	ldr	r3, [r4, #32]
   b47f6:	9302      	str	r3, [sp, #8]
	nrfx_pdm_config_t config = NRFX_PDM_DEFAULT_CONFIG(nrfClkPin, nrfDatPin);
   b47f8:	2107      	movs	r1, #7
	config.edge = edge;
   b47fa:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	nrfx_pdm_config_t config = NRFX_PDM_DEFAULT_CONFIG(nrfClkPin, nrfDatPin);
   b47fe:	f8ad 100e 	strh.w	r1, [sp, #14]
	config.edge = edge;
   b4802:	f88d 3005 	strb.w	r3, [sp, #5]
	nrfx_err_t err = nrfx_pdm_init(&config, dataHandlerStatic);
   b4806:	4905      	ldr	r1, [pc, #20]	; (b481c <_ZN20Microphone_PDM_nRF524initEv+0x88>)
	config.gain_l = gainL;
   b4808:	8ba3      	ldrh	r3, [r4, #28]
   b480a:	f8ad 300c 	strh.w	r3, [sp, #12]
	nrfx_err_t err = nrfx_pdm_init(&config, dataHandlerStatic);
   b480e:	a801      	add	r0, sp, #4
   b4810:	f002 fe6e 	bl	b74f0 <nrfx_pdm_init>
}
   b4814:	b005      	add	sp, #20
   b4816:	bd30      	pop	{r4, r5, pc}
   b4818:	000b73f5 	.word	0x000b73f5
   b481c:	000b4921 	.word	0x000b4921

000b4820 <_ZN20Microphone_PDM_nRF526uninitEv>:
int Microphone_PDM_nRF52::uninit() {
   b4820:	b538      	push	{r3, r4, r5, lr}
	currentSampleAvailable = NULL;
   b4822:	2500      	movs	r5, #0
int Microphone_PDM_nRF52::uninit() {
   b4824:	4604      	mov	r4, r0
	currentSampleAvailable = NULL;
   b4826:	6285      	str	r5, [r0, #40]	; 0x28
	nrfx_pdm_uninit();
   b4828:	f002 fede 	bl	b75e8 <nrfx_pdm_uninit>
	pinMode(clkPin, INPUT);
   b482c:	88a0      	ldrh	r0, [r4, #4]
   b482e:	4629      	mov	r1, r5
   b4830:	f002 fd18 	bl	b7264 <pinMode>
}
   b4834:	4628      	mov	r0, r5
   b4836:	bd38      	pop	{r3, r4, r5, pc}

000b4838 <_ZN20Microphone_PDM_nRF525startEv>:
	useBufferA = true;
   b4838:	2301      	movs	r3, #1
   b483a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
	currentSampleAvailable = NULL;
   b483e:	2300      	movs	r3, #0
   b4840:	6283      	str	r3, [r0, #40]	; 0x28
	nrfx_err_t err = nrfx_pdm_start();
   b4842:	f002 bee3 	b.w	b760c <nrfx_pdm_start>

000b4846 <_ZN20Microphone_PDM_nRF524stopEv>:
	currentSampleAvailable = NULL;
   b4846:	2300      	movs	r3, #0
   b4848:	6283      	str	r3, [r0, #40]	; 0x28
	nrfx_err_t err = nrfx_pdm_stop();
   b484a:	f002 bf3f 	b.w	b76cc <nrfx_pdm_stop>

000b484e <_ZN20Microphone_PDM_nRF5211copySamplesEPv>:
bool Microphone_PDM_nRF52::copySamples(void*pSamples) {
   b484e:	b510      	push	{r4, lr}
   b4850:	460a      	mov	r2, r1
	if (currentSampleAvailable) {
   b4852:	6a81      	ldr	r1, [r0, #40]	; 0x28
bool Microphone_PDM_nRF52::copySamples(void*pSamples) {
   b4854:	4604      	mov	r4, r0
	if (currentSampleAvailable) {
   b4856:	b129      	cbz	r1, b4864 <_ZN20Microphone_PDM_nRF5211copySamplesEPv+0x16>
		copySamplesInternal(currentSampleAvailable, (uint8_t *)pSamples);
   b4858:	f7ff ff36 	bl	b46c8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>
		currentSampleAvailable = NULL;
   b485c:	2300      	movs	r3, #0
   b485e:	62a3      	str	r3, [r4, #40]	; 0x28
		return true;
   b4860:	2001      	movs	r0, #1
}
   b4862:	bd10      	pop	{r4, pc}
		return false;
   b4864:	4608      	mov	r0, r1
   b4866:	e7fc      	b.n	b4862 <_ZN20Microphone_PDM_nRF5211copySamplesEPv+0x14>

000b4868 <_ZN20Microphone_PDM_nRF5213noCopySamplesESt8functionIFvPvjEE>:
bool Microphone_PDM_nRF52::noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
   b4868:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (currentSampleAvailable) {
   b486a:	6a82      	ldr	r2, [r0, #40]	; 0x28
bool Microphone_PDM_nRF52::noCopySamples(std::function<void(void *pSamples, size_t numSamples)>callback) {
   b486c:	4604      	mov	r4, r0
   b486e:	460d      	mov	r5, r1
	if (currentSampleAvailable) {
   b4870:	b1da      	cbz	r2, b48aa <_ZN20Microphone_PDM_nRF5213noCopySamplesESt8functionIFvPvjEE+0x42>
		copySamplesInternal(currentSampleAvailable, (uint8_t *)currentSampleAvailable);
   b4872:	4611      	mov	r1, r2
   b4874:	f7ff ff28 	bl	b46c8 <_ZNK19Microphone_PDM_Base19copySamplesInternalEPKsPh>
		return BUFFER_SIZE_SAMPLES / copySrcIncrement();
   b4878:	6823      	ldr	r3, [r4, #0]
		callback(currentSampleAvailable, getNumberOfSamples());
   b487a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   b487c:	689b      	ldr	r3, [r3, #8]
   b487e:	4620      	mov	r0, r4
   b4880:	4798      	blx	r3
   b4882:	f44f 7300 	mov.w	r3, #512	; 0x200
   b4886:	fbb3 f0f0 	udiv	r0, r3, r0
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b488a:	68ab      	ldr	r3, [r5, #8]
   b488c:	9600      	str	r6, [sp, #0]
   b488e:	9001      	str	r0, [sp, #4]
   b4890:	b90b      	cbnz	r3, b4896 <_ZN20Microphone_PDM_nRF5213noCopySamplesESt8functionIFvPvjEE+0x2e>
	__throw_bad_function_call();
   b4892:	f002 ff3d 	bl	b7710 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4896:	68eb      	ldr	r3, [r5, #12]
   b4898:	4628      	mov	r0, r5
   b489a:	aa01      	add	r2, sp, #4
   b489c:	4669      	mov	r1, sp
   b489e:	4798      	blx	r3
		currentSampleAvailable = NULL;
   b48a0:	2300      	movs	r3, #0
   b48a2:	62a3      	str	r3, [r4, #40]	; 0x28
		return true;
   b48a4:	2001      	movs	r0, #1
}
   b48a6:	b002      	add	sp, #8
   b48a8:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b48aa:	4610      	mov	r0, r2
   b48ac:	e7fb      	b.n	b48a6 <_ZN20Microphone_PDM_nRF5213noCopySamplesESt8functionIFvPvjEE+0x3e>
	...

000b48b0 <_ZN20Microphone_PDM_nRF52C1Ev>:
Microphone_PDM_nRF52::Microphone_PDM_nRF52() : Microphone_PDM_Base(BUFFER_SIZE_SAMPLES) {
   b48b0:	b510      	push	{r4, lr}
   b48b2:	490c      	ldr	r1, [pc, #48]	; (b48e4 <_ZN20Microphone_PDM_nRF52C1Ev+0x34>)
   b48b4:	6001      	str	r1, [r0, #0]
	Microphone_PDM_Base(size_t numSamples) : numSamples(numSamples) {};
   b48b6:	2404      	movs	r4, #4
   b48b8:	2101      	movs	r1, #1
   b48ba:	e9c0 1404 	strd	r1, r4, [r0, #16]
   b48be:	f44f 7400 	mov.w	r4, #512	; 0x200
   b48c2:	4a09      	ldr	r2, [pc, #36]	; (b48e8 <_ZN20Microphone_PDM_nRF52C1Ev+0x38>)
   b48c4:	6184      	str	r4, [r0, #24]
   b48c6:	f642 0428 	movw	r4, #10280	; 0x2828
   b48ca:	6042      	str	r2, [r0, #4]
   b48cc:	8384      	strh	r4, [r0, #28]
   b48ce:	2200      	movs	r2, #0
   b48d0:	f04f 6404 	mov.w	r4, #138412032	; 0x8400000
   b48d4:	7202      	strb	r2, [r0, #8]
   b48d6:	6204      	str	r4, [r0, #32]
   b48d8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   b48dc:	6282      	str	r2, [r0, #40]	; 0x28
   b48de:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
}
   b48e2:	bd10      	pop	{r4, pc}
   b48e4:	000b7dcc 	.word	0x000b7dcc
   b48e8:	00120013 	.word	0x00120013

000b48ec <_ZN20Microphone_PDM_nRF5211dataHandlerEPK14nrfx_pdm_evt_t>:



void Microphone_PDM_nRF52::dataHandler(nrfx_pdm_evt_t const * const pEvent) {
   b48ec:	b510      	push	{r4, lr}
 	bool             buffer_requested;  ///< Buffer request flag.
    int16_t *        buffer_released;   ///< Pointer to the released buffer. Can be NULL.
    nrfx_pdm_error_t error;             ///< Error type.
	 */

	if (pEvent->buffer_released) {
   b48ee:	684b      	ldr	r3, [r1, #4]
void Microphone_PDM_nRF52::dataHandler(nrfx_pdm_evt_t const * const pEvent) {
   b48f0:	4604      	mov	r4, r0
	if (pEvent->buffer_released) {
   b48f2:	b103      	cbz	r3, b48f6 <_ZN20Microphone_PDM_nRF5211dataHandlerEPK14nrfx_pdm_evt_t+0xa>
		currentSampleAvailable = (int16_t *)pEvent->buffer_released;;
   b48f4:	6283      	str	r3, [r0, #40]	; 0x28
	}

	if (pEvent->buffer_requested) {
   b48f6:	780b      	ldrb	r3, [r1, #0]
   b48f8:	b173      	cbz	r3, b4918 <_ZN20Microphone_PDM_nRF5211dataHandlerEPK14nrfx_pdm_evt_t+0x2c>
		if (useBufferA) {
   b48fa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
			nrfx_pdm_buffer_set(samples, BUFFER_SIZE_SAMPLES);
   b48fe:	f44f 7100 	mov.w	r1, #512	; 0x200
		if (useBufferA) {
   b4902:	b153      	cbz	r3, b491a <_ZN20Microphone_PDM_nRF5211dataHandlerEPK14nrfx_pdm_evt_t+0x2e>
			nrfx_pdm_buffer_set(samples, BUFFER_SIZE_SAMPLES);
   b4904:	f104 002e 	add.w	r0, r4, #46	; 0x2e
		}
		else {
			nrfx_pdm_buffer_set(&samples[BUFFER_SIZE_SAMPLES], BUFFER_SIZE_SAMPLES);
   b4908:	f002 fe9a 	bl	b7640 <nrfx_pdm_buffer_set>
		}
		useBufferA = !useBufferA;
   b490c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b4910:	f083 0301 	eor.w	r3, r3, #1
   b4914:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
}
   b4918:	bd10      	pop	{r4, pc}
			nrfx_pdm_buffer_set(&samples[BUFFER_SIZE_SAMPLES], BUFFER_SIZE_SAMPLES);
   b491a:	f204 402e 	addw	r0, r4, #1070	; 0x42e
   b491e:	e7f3      	b.n	b4908 <_ZN20Microphone_PDM_nRF5211dataHandlerEPK14nrfx_pdm_evt_t+0x1c>

000b4920 <_ZN20Microphone_PDM_nRF5217dataHandlerStaticEPK14nrfx_pdm_evt_t>:



// [static]
void Microphone_PDM_nRF52::dataHandlerStatic(nrfx_pdm_evt_t const * const pEvent) {
   b4920:	b507      	push	{r0, r1, r2, lr}
   b4922:	9001      	str	r0, [sp, #4]
	Microphone_PDM::instance().dataHandler(pEvent);
   b4924:	f7ff feb8 	bl	b4698 <_ZN14Microphone_PDM8instanceEv>
   b4928:	9901      	ldr	r1, [sp, #4]
}
   b492a:	b003      	add	sp, #12
   b492c:	f85d eb04 	ldr.w	lr, [sp], #4
	Microphone_PDM::instance().dataHandler(pEvent);
   b4930:	f7ff bfdc 	b.w	b48ec <_ZN20Microphone_PDM_nRF5211dataHandlerEPK14nrfx_pdm_evt_t>

000b4934 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4934:	b508      	push	{r3, lr}
   b4936:	4b02      	ldr	r3, [pc, #8]	; (b4940 <netdb_freeaddrinfo+0xc>)
   b4938:	681b      	ldr	r3, [r3, #0]
   b493a:	689b      	ldr	r3, [r3, #8]
   b493c:	9301      	str	r3, [sp, #4]
   b493e:	bd08      	pop	{r3, pc}
   b4940:	00030268 	.word	0x00030268

000b4944 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4944:	b508      	push	{r3, lr}
   b4946:	4b02      	ldr	r3, [pc, #8]	; (b4950 <netdb_getaddrinfo+0xc>)
   b4948:	681b      	ldr	r3, [r3, #0]
   b494a:	68db      	ldr	r3, [r3, #12]
   b494c:	9301      	str	r3, [sp, #4]
   b494e:	bd08      	pop	{r3, pc}
   b4950:	00030268 	.word	0x00030268

000b4954 <hal_pin_map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
   b4954:	b508      	push	{r3, lr}
   b4956:	4b02      	ldr	r3, [pc, #8]	; (b4960 <hal_pin_map+0xc>)
   b4958:	681b      	ldr	r3, [r3, #0]
   b495a:	681b      	ldr	r3, [r3, #0]
   b495c:	9301      	str	r3, [sp, #4]
   b495e:	bd08      	pop	{r3, pc}
   b4960:	0003022c 	.word	0x0003022c

000b4964 <hal_gpio_mode>:
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b4964:	b508      	push	{r3, lr}
   b4966:	4b02      	ldr	r3, [pc, #8]	; (b4970 <hal_gpio_mode+0xc>)
   b4968:	681b      	ldr	r3, [r3, #0]
   b496a:	689b      	ldr	r3, [r3, #8]
   b496c:	9301      	str	r3, [sp, #4]
   b496e:	bd08      	pop	{r3, pc}
   b4970:	0003022c 	.word	0x0003022c

000b4974 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b4974:	b508      	push	{r3, lr}
   b4976:	4b02      	ldr	r3, [pc, #8]	; (b4980 <hal_gpio_get_mode+0xc>)
   b4978:	681b      	ldr	r3, [r3, #0]
   b497a:	68db      	ldr	r3, [r3, #12]
   b497c:	9301      	str	r3, [sp, #4]
   b497e:	bd08      	pop	{r3, pc}
   b4980:	0003022c 	.word	0x0003022c

000b4984 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b4984:	b508      	push	{r3, lr}
   b4986:	4b02      	ldr	r3, [pc, #8]	; (b4990 <hal_gpio_write+0xc>)
   b4988:	681b      	ldr	r3, [r3, #0]
   b498a:	691b      	ldr	r3, [r3, #16]
   b498c:	9301      	str	r3, [sp, #4]
   b498e:	bd08      	pop	{r3, pc}
   b4990:	0003022c 	.word	0x0003022c

000b4994 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b4994:	b508      	push	{r3, lr}
   b4996:	4b02      	ldr	r3, [pc, #8]	; (b49a0 <hal_gpio_read+0xc>)
   b4998:	681b      	ldr	r3, [r3, #0]
   b499a:	695b      	ldr	r3, [r3, #20]
   b499c:	9301      	str	r3, [sp, #4]
   b499e:	bd08      	pop	{r3, pc}
   b49a0:	0003022c 	.word	0x0003022c

000b49a4 <hal_interrupt_set_direct_handler>:
DYNALIB_FN(31, hal_gpio, hal_pwm_write_with_frequency_ext, void(uint16_t, uint32_t, uint32_t))
DYNALIB_FN(32, hal_gpio, hal_pwm_get_frequency_ext, uint32_t(uint16_t))
DYNALIB_FN(33, hal_gpio, hal_pwm_get_analog_value_ext, uint32_t(uint16_t))
DYNALIB_FN(34, hal_gpio, hal_pwm_get_max_frequency, uint32_t(uint16_t))
DYNALIB_FN(35, hal_gpio, hal_interrupt_detach_ext, int(uint16_t, uint8_t, void*))
DYNALIB_FN(36, hal_gpio, hal_interrupt_set_direct_handler, int(IRQn_Type irqn, hal_interrupt_direct_handler_t handler, uint32_t flags, void* reserved))
   b49a4:	b508      	push	{r3, lr}
   b49a6:	4b03      	ldr	r3, [pc, #12]	; (b49b4 <hal_interrupt_set_direct_handler+0x10>)
   b49a8:	681b      	ldr	r3, [r3, #0]
   b49aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   b49ae:	9301      	str	r3, [sp, #4]
   b49b0:	bd08      	pop	{r3, pc}
   b49b2:	0000      	.short	0x0000
   b49b4:	0003022c 	.word	0x0003022c

000b49b8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b49b8:	b508      	push	{r3, lr}
   b49ba:	4b02      	ldr	r3, [pc, #8]	; (b49c4 <if_index_to_name+0xc>)
   b49bc:	681b      	ldr	r3, [r3, #0]
   b49be:	695b      	ldr	r3, [r3, #20]
   b49c0:	9301      	str	r3, [sp, #4]
   b49c2:	bd08      	pop	{r3, pc}
   b49c4:	0003026c 	.word	0x0003026c

000b49c8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b49c8:	b508      	push	{r3, lr}
   b49ca:	4b02      	ldr	r3, [pc, #8]	; (b49d4 <HAL_RNG_GetRandomNumber+0xc>)
   b49cc:	681b      	ldr	r3, [r3, #0]
   b49ce:	685b      	ldr	r3, [r3, #4]
   b49d0:	9301      	str	r3, [sp, #4]
   b49d2:	bd08      	pop	{r3, pc}
   b49d4:	00030218 	.word	0x00030218

000b49d8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b49d8:	b508      	push	{r3, lr}
   b49da:	4b02      	ldr	r3, [pc, #8]	; (b49e4 <HAL_Delay_Microseconds+0xc>)
   b49dc:	681b      	ldr	r3, [r3, #0]
   b49de:	68db      	ldr	r3, [r3, #12]
   b49e0:	9301      	str	r3, [sp, #4]
   b49e2:	bd08      	pop	{r3, pc}
   b49e4:	00030218 	.word	0x00030218

000b49e8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b49e8:	b508      	push	{r3, lr}
   b49ea:	4b02      	ldr	r3, [pc, #8]	; (b49f4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b49ec:	681b      	ldr	r3, [r3, #0]
   b49ee:	695b      	ldr	r3, [r3, #20]
   b49f0:	9301      	str	r3, [sp, #4]
   b49f2:	bd08      	pop	{r3, pc}
   b49f4:	00030218 	.word	0x00030218

000b49f8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b49f8:	b508      	push	{r3, lr}
   b49fa:	4b02      	ldr	r3, [pc, #8]	; (b4a04 <os_mutex_recursive_create+0xc>)
   b49fc:	681b      	ldr	r3, [r3, #0]
   b49fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a00:	9301      	str	r3, [sp, #4]
   b4a02:	bd08      	pop	{r3, pc}
   b4a04:	00030248 	.word	0x00030248

000b4a08 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4a08:	b508      	push	{r3, lr}
   b4a0a:	4b02      	ldr	r3, [pc, #8]	; (b4a14 <os_mutex_recursive_destroy+0xc>)
   b4a0c:	681b      	ldr	r3, [r3, #0]
   b4a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4a10:	9301      	str	r3, [sp, #4]
   b4a12:	bd08      	pop	{r3, pc}
   b4a14:	00030248 	.word	0x00030248

000b4a18 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4a18:	b508      	push	{r3, lr}
   b4a1a:	4b02      	ldr	r3, [pc, #8]	; (b4a24 <os_mutex_recursive_lock+0xc>)
   b4a1c:	681b      	ldr	r3, [r3, #0]
   b4a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4a20:	9301      	str	r3, [sp, #4]
   b4a22:	bd08      	pop	{r3, pc}
   b4a24:	00030248 	.word	0x00030248

000b4a28 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4a28:	b508      	push	{r3, lr}
   b4a2a:	4b02      	ldr	r3, [pc, #8]	; (b4a34 <os_mutex_recursive_unlock+0xc>)
   b4a2c:	681b      	ldr	r3, [r3, #0]
   b4a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4a30:	9301      	str	r3, [sp, #4]
   b4a32:	bd08      	pop	{r3, pc}
   b4a34:	00030248 	.word	0x00030248

000b4a38 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4a38:	b508      	push	{r3, lr}
   b4a3a:	4b02      	ldr	r3, [pc, #8]	; (b4a44 <inet_inet_ntop+0xc>)
   b4a3c:	681b      	ldr	r3, [r3, #0]
   b4a3e:	695b      	ldr	r3, [r3, #20]
   b4a40:	9301      	str	r3, [sp, #4]
   b4a42:	bd08      	pop	{r3, pc}
   b4a44:	00030264 	.word	0x00030264

000b4a48 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b4a48:	b508      	push	{r3, lr}
   b4a4a:	4b02      	ldr	r3, [pc, #8]	; (b4a54 <inet_htonl+0xc>)
   b4a4c:	681b      	ldr	r3, [r3, #0]
   b4a4e:	6a1b      	ldr	r3, [r3, #32]
   b4a50:	9301      	str	r3, [sp, #4]
   b4a52:	bd08      	pop	{r3, pc}
   b4a54:	00030264 	.word	0x00030264

000b4a58 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b4a58:	b508      	push	{r3, lr}
   b4a5a:	4b02      	ldr	r3, [pc, #8]	; (b4a64 <inet_htons+0xc>)
   b4a5c:	681b      	ldr	r3, [r3, #0]
   b4a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a60:	9301      	str	r3, [sp, #4]
   b4a62:	bd08      	pop	{r3, pc}
   b4a64:	00030264 	.word	0x00030264

000b4a68 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b4a68:	b508      	push	{r3, lr}
   b4a6a:	4b02      	ldr	r3, [pc, #8]	; (b4a74 <hal_usart_end+0xc>)
   b4a6c:	681b      	ldr	r3, [r3, #0]
   b4a6e:	689b      	ldr	r3, [r3, #8]
   b4a70:	9301      	str	r3, [sp, #4]
   b4a72:	bd08      	pop	{r3, pc}
   b4a74:	0003023c 	.word	0x0003023c

000b4a78 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4a78:	b508      	push	{r3, lr}
   b4a7a:	4b02      	ldr	r3, [pc, #8]	; (b4a84 <hal_usart_write+0xc>)
   b4a7c:	681b      	ldr	r3, [r3, #0]
   b4a7e:	68db      	ldr	r3, [r3, #12]
   b4a80:	9301      	str	r3, [sp, #4]
   b4a82:	bd08      	pop	{r3, pc}
   b4a84:	0003023c 	.word	0x0003023c

000b4a88 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4a88:	b508      	push	{r3, lr}
   b4a8a:	4b02      	ldr	r3, [pc, #8]	; (b4a94 <hal_usart_available+0xc>)
   b4a8c:	681b      	ldr	r3, [r3, #0]
   b4a8e:	691b      	ldr	r3, [r3, #16]
   b4a90:	9301      	str	r3, [sp, #4]
   b4a92:	bd08      	pop	{r3, pc}
   b4a94:	0003023c 	.word	0x0003023c

000b4a98 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4a98:	b508      	push	{r3, lr}
   b4a9a:	4b02      	ldr	r3, [pc, #8]	; (b4aa4 <hal_usart_read+0xc>)
   b4a9c:	681b      	ldr	r3, [r3, #0]
   b4a9e:	695b      	ldr	r3, [r3, #20]
   b4aa0:	9301      	str	r3, [sp, #4]
   b4aa2:	bd08      	pop	{r3, pc}
   b4aa4:	0003023c 	.word	0x0003023c

000b4aa8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4aa8:	b508      	push	{r3, lr}
   b4aaa:	4b02      	ldr	r3, [pc, #8]	; (b4ab4 <hal_usart_peek+0xc>)
   b4aac:	681b      	ldr	r3, [r3, #0]
   b4aae:	699b      	ldr	r3, [r3, #24]
   b4ab0:	9301      	str	r3, [sp, #4]
   b4ab2:	bd08      	pop	{r3, pc}
   b4ab4:	0003023c 	.word	0x0003023c

000b4ab8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4ab8:	b508      	push	{r3, lr}
   b4aba:	4b02      	ldr	r3, [pc, #8]	; (b4ac4 <hal_usart_flush+0xc>)
   b4abc:	681b      	ldr	r3, [r3, #0]
   b4abe:	69db      	ldr	r3, [r3, #28]
   b4ac0:	9301      	str	r3, [sp, #4]
   b4ac2:	bd08      	pop	{r3, pc}
   b4ac4:	0003023c 	.word	0x0003023c

000b4ac8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4ac8:	b508      	push	{r3, lr}
   b4aca:	4b02      	ldr	r3, [pc, #8]	; (b4ad4 <hal_usart_is_enabled+0xc>)
   b4acc:	681b      	ldr	r3, [r3, #0]
   b4ace:	6a1b      	ldr	r3, [r3, #32]
   b4ad0:	9301      	str	r3, [sp, #4]
   b4ad2:	bd08      	pop	{r3, pc}
   b4ad4:	0003023c 	.word	0x0003023c

000b4ad8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4ad8:	b508      	push	{r3, lr}
   b4ada:	4b02      	ldr	r3, [pc, #8]	; (b4ae4 <hal_usart_available_data_for_write+0xc>)
   b4adc:	681b      	ldr	r3, [r3, #0]
   b4ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4ae0:	9301      	str	r3, [sp, #4]
   b4ae2:	bd08      	pop	{r3, pc}
   b4ae4:	0003023c 	.word	0x0003023c

000b4ae8 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4ae8:	b508      	push	{r3, lr}
   b4aea:	4b02      	ldr	r3, [pc, #8]	; (b4af4 <hal_usart_begin_config+0xc>)
   b4aec:	681b      	ldr	r3, [r3, #0]
   b4aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4af0:	9301      	str	r3, [sp, #4]
   b4af2:	bd08      	pop	{r3, pc}
   b4af4:	0003023c 	.word	0x0003023c

000b4af8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4af8:	b508      	push	{r3, lr}
   b4afa:	4b02      	ldr	r3, [pc, #8]	; (b4b04 <hal_usart_init_ex+0xc>)
   b4afc:	681b      	ldr	r3, [r3, #0]
   b4afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4b00:	9301      	str	r3, [sp, #4]
   b4b02:	bd08      	pop	{r3, pc}
   b4b04:	0003023c 	.word	0x0003023c

000b4b08 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4b08:	b508      	push	{r3, lr}
   b4b0a:	4b02      	ldr	r3, [pc, #8]	; (b4b14 <hal_i2c_write+0xc>)
   b4b0c:	681b      	ldr	r3, [r3, #0]
   b4b0e:	6a1b      	ldr	r3, [r3, #32]
   b4b10:	9301      	str	r3, [sp, #4]
   b4b12:	bd08      	pop	{r3, pc}
   b4b14:	00030228 	.word	0x00030228

000b4b18 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4b18:	b508      	push	{r3, lr}
   b4b1a:	4b02      	ldr	r3, [pc, #8]	; (b4b24 <hal_i2c_available+0xc>)
   b4b1c:	681b      	ldr	r3, [r3, #0]
   b4b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4b20:	9301      	str	r3, [sp, #4]
   b4b22:	bd08      	pop	{r3, pc}
   b4b24:	00030228 	.word	0x00030228

000b4b28 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4b28:	b508      	push	{r3, lr}
   b4b2a:	4b02      	ldr	r3, [pc, #8]	; (b4b34 <hal_i2c_read+0xc>)
   b4b2c:	681b      	ldr	r3, [r3, #0]
   b4b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4b30:	9301      	str	r3, [sp, #4]
   b4b32:	bd08      	pop	{r3, pc}
   b4b34:	00030228 	.word	0x00030228

000b4b38 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4b38:	b508      	push	{r3, lr}
   b4b3a:	4b02      	ldr	r3, [pc, #8]	; (b4b44 <hal_i2c_peek+0xc>)
   b4b3c:	681b      	ldr	r3, [r3, #0]
   b4b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4b40:	9301      	str	r3, [sp, #4]
   b4b42:	bd08      	pop	{r3, pc}
   b4b44:	00030228 	.word	0x00030228

000b4b48 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4b48:	b508      	push	{r3, lr}
   b4b4a:	4b02      	ldr	r3, [pc, #8]	; (b4b54 <hal_i2c_flush+0xc>)
   b4b4c:	681b      	ldr	r3, [r3, #0]
   b4b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4b50:	9301      	str	r3, [sp, #4]
   b4b52:	bd08      	pop	{r3, pc}
   b4b54:	00030228 	.word	0x00030228

000b4b58 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4b58:	b508      	push	{r3, lr}
   b4b5a:	4b02      	ldr	r3, [pc, #8]	; (b4b64 <hal_i2c_is_enabled+0xc>)
   b4b5c:	681b      	ldr	r3, [r3, #0]
   b4b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4b60:	9301      	str	r3, [sp, #4]
   b4b62:	bd08      	pop	{r3, pc}
   b4b64:	00030228 	.word	0x00030228

000b4b68 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4b68:	b508      	push	{r3, lr}
   b4b6a:	4b02      	ldr	r3, [pc, #8]	; (b4b74 <hal_i2c_init+0xc>)
   b4b6c:	681b      	ldr	r3, [r3, #0]
   b4b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4b70:	9301      	str	r3, [sp, #4]
   b4b72:	bd08      	pop	{r3, pc}
   b4b74:	00030228 	.word	0x00030228

000b4b78 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b4b78:	b508      	push	{r3, lr}
   b4b7a:	4b02      	ldr	r3, [pc, #8]	; (b4b84 <sock_setsockopt+0xc>)
   b4b7c:	681b      	ldr	r3, [r3, #0]
   b4b7e:	699b      	ldr	r3, [r3, #24]
   b4b80:	9301      	str	r3, [sp, #4]
   b4b82:	bd08      	pop	{r3, pc}
   b4b84:	00030238 	.word	0x00030238

000b4b88 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b4b88:	b508      	push	{r3, lr}
   b4b8a:	4b02      	ldr	r3, [pc, #8]	; (b4b94 <sock_close+0xc>)
   b4b8c:	681b      	ldr	r3, [r3, #0]
   b4b8e:	69db      	ldr	r3, [r3, #28]
   b4b90:	9301      	str	r3, [sp, #4]
   b4b92:	bd08      	pop	{r3, pc}
   b4b94:	00030238 	.word	0x00030238

000b4b98 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b4b98:	b508      	push	{r3, lr}
   b4b9a:	4b02      	ldr	r3, [pc, #8]	; (b4ba4 <sock_connect+0xc>)
   b4b9c:	681b      	ldr	r3, [r3, #0]
   b4b9e:	6a1b      	ldr	r3, [r3, #32]
   b4ba0:	9301      	str	r3, [sp, #4]
   b4ba2:	bd08      	pop	{r3, pc}
   b4ba4:	00030238 	.word	0x00030238

000b4ba8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b4ba8:	b508      	push	{r3, lr}
   b4baa:	4b02      	ldr	r3, [pc, #8]	; (b4bb4 <sock_recv+0xc>)
   b4bac:	681b      	ldr	r3, [r3, #0]
   b4bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4bb0:	9301      	str	r3, [sp, #4]
   b4bb2:	bd08      	pop	{r3, pc}
   b4bb4:	00030238 	.word	0x00030238

000b4bb8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b4bb8:	b508      	push	{r3, lr}
   b4bba:	4b02      	ldr	r3, [pc, #8]	; (b4bc4 <sock_send+0xc>)
   b4bbc:	681b      	ldr	r3, [r3, #0]
   b4bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4bc0:	9301      	str	r3, [sp, #4]
   b4bc2:	bd08      	pop	{r3, pc}
   b4bc4:	00030238 	.word	0x00030238

000b4bc8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b4bc8:	b508      	push	{r3, lr}
   b4bca:	4b02      	ldr	r3, [pc, #8]	; (b4bd4 <sock_socket+0xc>)
   b4bcc:	681b      	ldr	r3, [r3, #0]
   b4bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4bd0:	9301      	str	r3, [sp, #4]
   b4bd2:	bd08      	pop	{r3, pc}
   b4bd4:	00030238 	.word	0x00030238

000b4bd8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4bd8:	b508      	push	{r3, lr}
   b4bda:	4b02      	ldr	r3, [pc, #8]	; (b4be4 <hal_spi_init+0xc>)
   b4bdc:	681b      	ldr	r3, [r3, #0]
   b4bde:	69db      	ldr	r3, [r3, #28]
   b4be0:	9301      	str	r3, [sp, #4]
   b4be2:	bd08      	pop	{r3, pc}
   b4be4:	00030230 	.word	0x00030230

000b4be8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4be8:	b508      	push	{r3, lr}
   b4bea:	4b02      	ldr	r3, [pc, #8]	; (b4bf4 <hal_spi_is_enabled+0xc>)
   b4bec:	681b      	ldr	r3, [r3, #0]
   b4bee:	6a1b      	ldr	r3, [r3, #32]
   b4bf0:	9301      	str	r3, [sp, #4]
   b4bf2:	bd08      	pop	{r3, pc}
   b4bf4:	00030230 	.word	0x00030230

000b4bf8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4bf8:	b508      	push	{r3, lr}
   b4bfa:	4b02      	ldr	r3, [pc, #8]	; (b4c04 <HAL_USB_USART_Init+0xc>)
   b4bfc:	681b      	ldr	r3, [r3, #0]
   b4bfe:	681b      	ldr	r3, [r3, #0]
   b4c00:	9301      	str	r3, [sp, #4]
   b4c02:	bd08      	pop	{r3, pc}
   b4c04:	0003024c 	.word	0x0003024c

000b4c08 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4c08:	b508      	push	{r3, lr}
   b4c0a:	4b02      	ldr	r3, [pc, #8]	; (b4c14 <HAL_USB_USART_Begin+0xc>)
   b4c0c:	681b      	ldr	r3, [r3, #0]
   b4c0e:	685b      	ldr	r3, [r3, #4]
   b4c10:	9301      	str	r3, [sp, #4]
   b4c12:	bd08      	pop	{r3, pc}
   b4c14:	0003024c 	.word	0x0003024c

000b4c18 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b4c18:	b508      	push	{r3, lr}
   b4c1a:	4b02      	ldr	r3, [pc, #8]	; (b4c24 <HAL_USB_USART_End+0xc>)
   b4c1c:	681b      	ldr	r3, [r3, #0]
   b4c1e:	689b      	ldr	r3, [r3, #8]
   b4c20:	9301      	str	r3, [sp, #4]
   b4c22:	bd08      	pop	{r3, pc}
   b4c24:	0003024c 	.word	0x0003024c

000b4c28 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN_WRAP(4, hal_usb, HAL_USB_USART_Available_Data, protected, int32_t(HAL_USB_USART_Serial))
   b4c28:	b508      	push	{r3, lr}
   b4c2a:	4b02      	ldr	r3, [pc, #8]	; (b4c34 <HAL_USB_USART_Available_Data+0xc>)
   b4c2c:	681b      	ldr	r3, [r3, #0]
   b4c2e:	691b      	ldr	r3, [r3, #16]
   b4c30:	9301      	str	r3, [sp, #4]
   b4c32:	bd08      	pop	{r3, pc}
   b4c34:	0003024c 	.word	0x0003024c

000b4c38 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN_WRAP(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, protected, int32_t(HAL_USB_USART_Serial))
   b4c38:	b508      	push	{r3, lr}
   b4c3a:	4b02      	ldr	r3, [pc, #8]	; (b4c44 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4c3c:	681b      	ldr	r3, [r3, #0]
   b4c3e:	695b      	ldr	r3, [r3, #20]
   b4c40:	9301      	str	r3, [sp, #4]
   b4c42:	bd08      	pop	{r3, pc}
   b4c44:	0003024c 	.word	0x0003024c

000b4c48 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN_WRAP(6, hal_usb, HAL_USB_USART_Receive_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4c48:	b508      	push	{r3, lr}
   b4c4a:	4b02      	ldr	r3, [pc, #8]	; (b4c54 <HAL_USB_USART_Receive_Data+0xc>)
   b4c4c:	681b      	ldr	r3, [r3, #0]
   b4c4e:	699b      	ldr	r3, [r3, #24]
   b4c50:	9301      	str	r3, [sp, #4]
   b4c52:	bd08      	pop	{r3, pc}
   b4c54:	0003024c 	.word	0x0003024c

000b4c58 <HAL_USB_USART_Send_Data>:
DYNALIB_FN_WRAP(7, hal_usb, HAL_USB_USART_Send_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4c58:	b508      	push	{r3, lr}
   b4c5a:	4b02      	ldr	r3, [pc, #8]	; (b4c64 <HAL_USB_USART_Send_Data+0xc>)
   b4c5c:	681b      	ldr	r3, [r3, #0]
   b4c5e:	69db      	ldr	r3, [r3, #28]
   b4c60:	9301      	str	r3, [sp, #4]
   b4c62:	bd08      	pop	{r3, pc}
   b4c64:	0003024c 	.word	0x0003024c

000b4c68 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN_WRAP(8, hal_usb, HAL_USB_USART_Flush_Data, protected, void(HAL_USB_USART_Serial))
   b4c68:	b508      	push	{r3, lr}
   b4c6a:	4b02      	ldr	r3, [pc, #8]	; (b4c74 <HAL_USB_USART_Flush_Data+0xc>)
   b4c6c:	681b      	ldr	r3, [r3, #0]
   b4c6e:	6a1b      	ldr	r3, [r3, #32]
   b4c70:	9301      	str	r3, [sp, #4]
   b4c72:	bd08      	pop	{r3, pc}
   b4c74:	0003024c 	.word	0x0003024c

000b4c78 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4c78:	b508      	push	{r3, lr}
   b4c7a:	4b02      	ldr	r3, [pc, #8]	; (b4c84 <panic_+0xc>)
   b4c7c:	681b      	ldr	r3, [r3, #0]
   b4c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4c80:	9301      	str	r3, [sp, #4]
   b4c82:	bd08      	pop	{r3, pc}
   b4c84:	00030260 	.word	0x00030260

000b4c88 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4c88:	b508      	push	{r3, lr}
   b4c8a:	4b02      	ldr	r3, [pc, #8]	; (b4c94 <log_message+0xc>)
   b4c8c:	681b      	ldr	r3, [r3, #0]
   b4c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4c90:	9301      	str	r3, [sp, #4]
   b4c92:	bd08      	pop	{r3, pc}
   b4c94:	00030260 	.word	0x00030260

000b4c98 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b4c98:	b508      	push	{r3, lr}
   b4c9a:	4b02      	ldr	r3, [pc, #8]	; (b4ca4 <log_message_v+0xc>)
   b4c9c:	681b      	ldr	r3, [r3, #0]
   b4c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4ca0:	9301      	str	r3, [sp, #4]
   b4ca2:	bd08      	pop	{r3, pc}
   b4ca4:	00030260 	.word	0x00030260

000b4ca8 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b4ca8:	b508      	push	{r3, lr}
   b4caa:	4b02      	ldr	r3, [pc, #8]	; (b4cb4 <log_level_name+0xc>)
   b4cac:	681b      	ldr	r3, [r3, #0]
   b4cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b4cb0:	9301      	str	r3, [sp, #4]
   b4cb2:	bd08      	pop	{r3, pc}
   b4cb4:	00030260 	.word	0x00030260

000b4cb8 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b4cb8:	b508      	push	{r3, lr}
   b4cba:	4b02      	ldr	r3, [pc, #8]	; (b4cc4 <log_set_callbacks+0xc>)
   b4cbc:	681b      	ldr	r3, [r3, #0]
   b4cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b4cc0:	9301      	str	r3, [sp, #4]
   b4cc2:	bd08      	pop	{r3, pc}
   b4cc4:	00030260 	.word	0x00030260

000b4cc8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4cc8:	b508      	push	{r3, lr}
   b4cca:	4b02      	ldr	r3, [pc, #8]	; (b4cd4 <set_system_mode+0xc>)
   b4ccc:	681b      	ldr	r3, [r3, #0]
   b4cce:	685b      	ldr	r3, [r3, #4]
   b4cd0:	9301      	str	r3, [sp, #4]
   b4cd2:	bd08      	pop	{r3, pc}
   b4cd4:	00030220 	.word	0x00030220

000b4cd8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4cd8:	b508      	push	{r3, lr}
   b4cda:	4b02      	ldr	r3, [pc, #8]	; (b4ce4 <system_thread_set_state+0xc>)
   b4cdc:	681b      	ldr	r3, [r3, #0]
   b4cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4ce0:	9301      	str	r3, [sp, #4]
   b4ce2:	bd08      	pop	{r3, pc}
   b4ce4:	00030220 	.word	0x00030220

000b4ce8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4ce8:	b508      	push	{r3, lr}
   b4cea:	4b03      	ldr	r3, [pc, #12]	; (b4cf8 <system_ctrl_set_app_request_handler+0x10>)
   b4cec:	681b      	ldr	r3, [r3, #0]
   b4cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4cf2:	9301      	str	r3, [sp, #4]
   b4cf4:	bd08      	pop	{r3, pc}
   b4cf6:	0000      	.short	0x0000
   b4cf8:	00030220 	.word	0x00030220

000b4cfc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4cfc:	b508      	push	{r3, lr}
   b4cfe:	4b03      	ldr	r3, [pc, #12]	; (b4d0c <system_ctrl_set_result+0x10>)
   b4d00:	681b      	ldr	r3, [r3, #0]
   b4d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4d06:	9301      	str	r3, [sp, #4]
   b4d08:	bd08      	pop	{r3, pc}
   b4d0a:	0000      	.short	0x0000
   b4d0c:	00030220 	.word	0x00030220

000b4d10 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4d10:	b508      	push	{r3, lr}
   b4d12:	4b02      	ldr	r3, [pc, #8]	; (b4d1c <network_connect+0xc>)
   b4d14:	681b      	ldr	r3, [r3, #0]
   b4d16:	685b      	ldr	r3, [r3, #4]
   b4d18:	9301      	str	r3, [sp, #4]
   b4d1a:	bd08      	pop	{r3, pc}
   b4d1c:	00030240 	.word	0x00030240

000b4d20 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4d20:	b508      	push	{r3, lr}
   b4d22:	4b02      	ldr	r3, [pc, #8]	; (b4d2c <network_connecting+0xc>)
   b4d24:	681b      	ldr	r3, [r3, #0]
   b4d26:	689b      	ldr	r3, [r3, #8]
   b4d28:	9301      	str	r3, [sp, #4]
   b4d2a:	bd08      	pop	{r3, pc}
   b4d2c:	00030240 	.word	0x00030240

000b4d30 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4d30:	b508      	push	{r3, lr}
   b4d32:	4b02      	ldr	r3, [pc, #8]	; (b4d3c <network_disconnect+0xc>)
   b4d34:	681b      	ldr	r3, [r3, #0]
   b4d36:	68db      	ldr	r3, [r3, #12]
   b4d38:	9301      	str	r3, [sp, #4]
   b4d3a:	bd08      	pop	{r3, pc}
   b4d3c:	00030240 	.word	0x00030240

000b4d40 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4d40:	b508      	push	{r3, lr}
   b4d42:	4b02      	ldr	r3, [pc, #8]	; (b4d4c <network_ready+0xc>)
   b4d44:	681b      	ldr	r3, [r3, #0]
   b4d46:	691b      	ldr	r3, [r3, #16]
   b4d48:	9301      	str	r3, [sp, #4]
   b4d4a:	bd08      	pop	{r3, pc}
   b4d4c:	00030240 	.word	0x00030240

000b4d50 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4d50:	b508      	push	{r3, lr}
   b4d52:	4b02      	ldr	r3, [pc, #8]	; (b4d5c <network_on+0xc>)
   b4d54:	681b      	ldr	r3, [r3, #0]
   b4d56:	695b      	ldr	r3, [r3, #20]
   b4d58:	9301      	str	r3, [sp, #4]
   b4d5a:	bd08      	pop	{r3, pc}
   b4d5c:	00030240 	.word	0x00030240

000b4d60 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4d60:	b508      	push	{r3, lr}
   b4d62:	4b02      	ldr	r3, [pc, #8]	; (b4d6c <network_off+0xc>)
   b4d64:	681b      	ldr	r3, [r3, #0]
   b4d66:	699b      	ldr	r3, [r3, #24]
   b4d68:	9301      	str	r3, [sp, #4]
   b4d6a:	bd08      	pop	{r3, pc}
   b4d6c:	00030240 	.word	0x00030240

000b4d70 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4d70:	b508      	push	{r3, lr}
   b4d72:	4b02      	ldr	r3, [pc, #8]	; (b4d7c <network_listen+0xc>)
   b4d74:	681b      	ldr	r3, [r3, #0]
   b4d76:	69db      	ldr	r3, [r3, #28]
   b4d78:	9301      	str	r3, [sp, #4]
   b4d7a:	bd08      	pop	{r3, pc}
   b4d7c:	00030240 	.word	0x00030240

000b4d80 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4d80:	b508      	push	{r3, lr}
   b4d82:	4b02      	ldr	r3, [pc, #8]	; (b4d8c <network_listening+0xc>)
   b4d84:	681b      	ldr	r3, [r3, #0]
   b4d86:	6a1b      	ldr	r3, [r3, #32]
   b4d88:	9301      	str	r3, [sp, #4]
   b4d8a:	bd08      	pop	{r3, pc}
   b4d8c:	00030240 	.word	0x00030240

000b4d90 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4d90:	b508      	push	{r3, lr}
   b4d92:	4b02      	ldr	r3, [pc, #8]	; (b4d9c <network_set_listen_timeout+0xc>)
   b4d94:	681b      	ldr	r3, [r3, #0]
   b4d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4d98:	9301      	str	r3, [sp, #4]
   b4d9a:	bd08      	pop	{r3, pc}
   b4d9c:	00030240 	.word	0x00030240

000b4da0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4da0:	b508      	push	{r3, lr}
   b4da2:	4b02      	ldr	r3, [pc, #8]	; (b4dac <network_get_listen_timeout+0xc>)
   b4da4:	681b      	ldr	r3, [r3, #0]
   b4da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4da8:	9301      	str	r3, [sp, #4]
   b4daa:	bd08      	pop	{r3, pc}
   b4dac:	00030240 	.word	0x00030240

000b4db0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4db0:	b508      	push	{r3, lr}
   b4db2:	4b02      	ldr	r3, [pc, #8]	; (b4dbc <network_is_on+0xc>)
   b4db4:	681b      	ldr	r3, [r3, #0]
   b4db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4db8:	9301      	str	r3, [sp, #4]
   b4dba:	bd08      	pop	{r3, pc}
   b4dbc:	00030240 	.word	0x00030240

000b4dc0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4dc0:	b508      	push	{r3, lr}
   b4dc2:	4b02      	ldr	r3, [pc, #8]	; (b4dcc <network_is_off+0xc>)
   b4dc4:	681b      	ldr	r3, [r3, #0]
   b4dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4dc8:	9301      	str	r3, [sp, #4]
   b4dca:	bd08      	pop	{r3, pc}
   b4dcc:	00030240 	.word	0x00030240

000b4dd0 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
   b4dd0:	b508      	push	{r3, lr}
   b4dd2:	4b02      	ldr	r3, [pc, #8]	; (b4ddc <network_prefer+0xc>)
   b4dd4:	681b      	ldr	r3, [r3, #0]
   b4dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4dd8:	9301      	str	r3, [sp, #4]
   b4dda:	bd08      	pop	{r3, pc}
   b4ddc:	00030240 	.word	0x00030240

000b4de0 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
   b4de0:	b508      	push	{r3, lr}
   b4de2:	4b02      	ldr	r3, [pc, #8]	; (b4dec <network_is_preferred+0xc>)
   b4de4:	681b      	ldr	r3, [r3, #0]
   b4de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4de8:	9301      	str	r3, [sp, #4]
   b4dea:	bd08      	pop	{r3, pc}
   b4dec:	00030240 	.word	0x00030240

000b4df0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4df0:	b508      	push	{r3, lr}
   b4df2:	4b02      	ldr	r3, [pc, #8]	; (b4dfc <spark_set_random_seed_from_cloud_handler+0xc>)
   b4df4:	681b      	ldr	r3, [r3, #0]
   b4df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4df8:	9301      	str	r3, [sp, #4]
   b4dfa:	bd08      	pop	{r3, pc}
   b4dfc:	00030244 	.word	0x00030244

000b4e00 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4e00:	b508      	push	{r3, lr}
   b4e02:	4b02      	ldr	r3, [pc, #8]	; (b4e0c <malloc+0xc>)
   b4e04:	681b      	ldr	r3, [r3, #0]
   b4e06:	681b      	ldr	r3, [r3, #0]
   b4e08:	9301      	str	r3, [sp, #4]
   b4e0a:	bd08      	pop	{r3, pc}
   b4e0c:	0003021c 	.word	0x0003021c

000b4e10 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4e10:	b508      	push	{r3, lr}
   b4e12:	4b02      	ldr	r3, [pc, #8]	; (b4e1c <free+0xc>)
   b4e14:	681b      	ldr	r3, [r3, #0]
   b4e16:	685b      	ldr	r3, [r3, #4]
   b4e18:	9301      	str	r3, [sp, #4]
   b4e1a:	bd08      	pop	{r3, pc}
   b4e1c:	0003021c 	.word	0x0003021c

000b4e20 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4e20:	b508      	push	{r3, lr}
   b4e22:	4b02      	ldr	r3, [pc, #8]	; (b4e2c <realloc+0xc>)
   b4e24:	681b      	ldr	r3, [r3, #0]
   b4e26:	689b      	ldr	r3, [r3, #8]
   b4e28:	9301      	str	r3, [sp, #4]
   b4e2a:	bd08      	pop	{r3, pc}
   b4e2c:	0003021c 	.word	0x0003021c

000b4e30 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4e30:	b508      	push	{r3, lr}
   b4e32:	4b02      	ldr	r3, [pc, #8]	; (b4e3c <vsnprintf+0xc>)
   b4e34:	681b      	ldr	r3, [r3, #0]
   b4e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4e38:	9301      	str	r3, [sp, #4]
   b4e3a:	bd08      	pop	{r3, pc}
   b4e3c:	0003021c 	.word	0x0003021c

000b4e40 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4e40:	b508      	push	{r3, lr}
   b4e42:	4b02      	ldr	r3, [pc, #8]	; (b4e4c <abort+0xc>)
   b4e44:	681b      	ldr	r3, [r3, #0]
   b4e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e48:	9301      	str	r3, [sp, #4]
   b4e4a:	bd08      	pop	{r3, pc}
   b4e4c:	0003021c 	.word	0x0003021c

000b4e50 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4e50:	b508      	push	{r3, lr}
   b4e52:	4b02      	ldr	r3, [pc, #8]	; (b4e5c <__errno+0xc>)
   b4e54:	681b      	ldr	r3, [r3, #0]
   b4e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4e58:	9301      	str	r3, [sp, #4]
   b4e5a:	bd08      	pop	{r3, pc}
   b4e5c:	0003021c 	.word	0x0003021c

000b4e60 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4e60:	b508      	push	{r3, lr}
   b4e62:	4b02      	ldr	r3, [pc, #8]	; (b4e6c <__assert_func+0xc>)
   b4e64:	681b      	ldr	r3, [r3, #0]
   b4e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e68:	9301      	str	r3, [sp, #4]
   b4e6a:	bd08      	pop	{r3, pc}
   b4e6c:	0003021c 	.word	0x0003021c

000b4e70 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4e70:	b508      	push	{r3, lr}
   b4e72:	4b02      	ldr	r3, [pc, #8]	; (b4e7c <newlib_impure_ptr_callback+0xc>)
   b4e74:	681b      	ldr	r3, [r3, #0]
   b4e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4e78:	9301      	str	r3, [sp, #4]
   b4e7a:	bd08      	pop	{r3, pc}
   b4e7c:	0003021c 	.word	0x0003021c

000b4e80 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4e80:	2200      	movs	r2, #0
   b4e82:	6840      	ldr	r0, [r0, #4]
   b4e84:	4611      	mov	r1, r2
   b4e86:	f7ff bf7b 	b.w	b4d80 <network_listening>

000b4e8a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4e8a:	2200      	movs	r2, #0
   b4e8c:	6840      	ldr	r0, [r0, #4]
   b4e8e:	4611      	mov	r1, r2
   b4e90:	f7ff bf86 	b.w	b4da0 <network_get_listen_timeout>

000b4e94 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4e94:	6840      	ldr	r0, [r0, #4]
   b4e96:	2200      	movs	r2, #0
   b4e98:	f7ff bf7a 	b.w	b4d90 <network_set_listen_timeout>

000b4e9c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4e9c:	6840      	ldr	r0, [r0, #4]
   b4e9e:	2200      	movs	r2, #0
   b4ea0:	f081 0101 	eor.w	r1, r1, #1
   b4ea4:	f7ff bf64 	b.w	b4d70 <network_listen>

000b4ea8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4ea8:	2300      	movs	r3, #0
   b4eaa:	6840      	ldr	r0, [r0, #4]
   b4eac:	461a      	mov	r2, r3
   b4eae:	4619      	mov	r1, r3
   b4eb0:	f7ff bf56 	b.w	b4d60 <network_off>

000b4eb4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4eb4:	2300      	movs	r3, #0
   b4eb6:	6840      	ldr	r0, [r0, #4]
   b4eb8:	461a      	mov	r2, r3
   b4eba:	4619      	mov	r1, r3
   b4ebc:	f7ff bf48 	b.w	b4d50 <network_on>

000b4ec0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4ec0:	2200      	movs	r2, #0
   b4ec2:	6840      	ldr	r0, [r0, #4]
   b4ec4:	4611      	mov	r1, r2
   b4ec6:	f7ff bf3b 	b.w	b4d40 <network_ready>

000b4eca <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4eca:	2200      	movs	r2, #0
   b4ecc:	6840      	ldr	r0, [r0, #4]
   b4ece:	4611      	mov	r1, r2
   b4ed0:	f7ff bf26 	b.w	b4d20 <network_connecting>

000b4ed4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4ed4:	6840      	ldr	r0, [r0, #4]
   b4ed6:	2200      	movs	r2, #0
   b4ed8:	2102      	movs	r1, #2
   b4eda:	f7ff bf29 	b.w	b4d30 <network_disconnect>

000b4ede <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4ede:	2300      	movs	r3, #0
   b4ee0:	6840      	ldr	r0, [r0, #4]
   b4ee2:	461a      	mov	r2, r3
   b4ee4:	f7ff bf14 	b.w	b4d10 <network_connect>

000b4ee8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4ee8:	4b02      	ldr	r3, [pc, #8]	; (b4ef4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4eea:	2203      	movs	r2, #3
   b4eec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4eee:	4a02      	ldr	r2, [pc, #8]	; (b4ef8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4ef0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4ef2:	4770      	bx	lr
   b4ef4:	2003e678 	.word	0x2003e678
   b4ef8:	000b7dfc 	.word	0x000b7dfc

000b4efc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4efc:	680b      	ldr	r3, [r1, #0]
   b4efe:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b4f00:	684b      	ldr	r3, [r1, #4]
   b4f02:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b4f04:	b113      	cbz	r3, b4f0c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b4f06:	685a      	ldr	r2, [r3, #4]
   b4f08:	3201      	adds	r2, #1
   b4f0a:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4f0c:	4770      	bx	lr

000b4f0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b4f0e:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b4f10:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4f12:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4f14:	b17c      	cbz	r4, b4f36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4f16:	6863      	ldr	r3, [r4, #4]
   b4f18:	3b01      	subs	r3, #1
   b4f1a:	6063      	str	r3, [r4, #4]
   b4f1c:	b95b      	cbnz	r3, b4f36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4f1e:	6823      	ldr	r3, [r4, #0]
   b4f20:	4620      	mov	r0, r4
   b4f22:	689b      	ldr	r3, [r3, #8]
   b4f24:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4f26:	68a3      	ldr	r3, [r4, #8]
   b4f28:	3b01      	subs	r3, #1
   b4f2a:	60a3      	str	r3, [r4, #8]
   b4f2c:	b91b      	cbnz	r3, b4f36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4f2e:	6823      	ldr	r3, [r4, #0]
   b4f30:	4620      	mov	r0, r4
   b4f32:	68db      	ldr	r3, [r3, #12]
   b4f34:	4798      	blx	r3
      }
   b4f36:	4628      	mov	r0, r5
   b4f38:	bd38      	pop	{r3, r4, r5, pc}

000b4f3a <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4f3a:	b510      	push	{r4, lr}
   b4f3c:	4604      	mov	r4, r0
   b4f3e:	4608      	mov	r0, r1
{
    _spi = spi;
   b4f40:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4f42:	f7ff fe49 	bl	b4bd8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4f46:	2300      	movs	r3, #0
   b4f48:	6063      	str	r3, [r4, #4]
}
   b4f4a:	4620      	mov	r0, r4
   b4f4c:	bd10      	pop	{r4, pc}
	...

000b4f50 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4f50:	4b05      	ldr	r3, [pc, #20]	; (b4f68 <_GLOBAL__sub_I_System+0x18>)
   b4f52:	2202      	movs	r2, #2
   b4f54:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4f56:	4b05      	ldr	r3, [pc, #20]	; (b4f6c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4f58:	4a05      	ldr	r2, [pc, #20]	; (b4f70 <_GLOBAL__sub_I_System+0x20>)
   b4f5a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4f5c:	2000      	movs	r0, #0
   b4f5e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4f62:	f7ff beb1 	b.w	b4cc8 <set_system_mode>
   b4f66:	bf00      	nop
   b4f68:	2003e68c 	.word	0x2003e68c
   b4f6c:	2003e680 	.word	0x2003e680
   b4f70:	ffff0000 	.word	0xffff0000

000b4f74 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   b4f74:	b510      	push	{r4, lr}
   b4f76:	4604      	mov	r4, r0
{
    free(buffer);
   b4f78:	6800      	ldr	r0, [r0, #0]
   b4f7a:	f7ff ff49 	bl	b4e10 <free>
}
   b4f7e:	4620      	mov	r0, r4
   b4f80:	bd10      	pop	{r4, pc}

000b4f82 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   b4f82:	b510      	push	{r4, lr}
   b4f84:	4604      	mov	r4, r0
    if (buffer) {
   b4f86:	6800      	ldr	r0, [r0, #0]
   b4f88:	b108      	cbz	r0, b4f8e <_ZN6String10invalidateEv+0xc>
        free(buffer);
   b4f8a:	f7ff ff41 	bl	b4e10 <free>
    }
    buffer = nullptr;
   b4f8e:	2300      	movs	r3, #0
    capacity_ = len = 0;
   b4f90:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   b4f94:	6023      	str	r3, [r4, #0]
}
   b4f96:	bd10      	pop	{r4, pc}

000b4f98 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b4f98:	b538      	push	{r3, r4, r5, lr}
   b4f9a:	4604      	mov	r4, r0
   b4f9c:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4f9e:	6800      	ldr	r0, [r0, #0]
   b4fa0:	3101      	adds	r1, #1
   b4fa2:	f7ff ff3d 	bl	b4e20 <realloc>
    if (newbuffer) {
   b4fa6:	b110      	cbz	r0, b4fae <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
   b4fa8:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   b4fac:	2001      	movs	r0, #1
    }
    return 0;
}
   b4fae:	bd38      	pop	{r3, r4, r5, pc}

000b4fb0 <_ZN6String7reserveEj>:
{
   b4fb0:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
   b4fb2:	6803      	ldr	r3, [r0, #0]
{
   b4fb4:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
   b4fb6:	b123      	cbz	r3, b4fc2 <_ZN6String7reserveEj+0x12>
   b4fb8:	6843      	ldr	r3, [r0, #4]
   b4fba:	428b      	cmp	r3, r1
   b4fbc:	d301      	bcc.n	b4fc2 <_ZN6String7reserveEj+0x12>
   b4fbe:	2001      	movs	r0, #1
}
   b4fc0:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   b4fc2:	4620      	mov	r0, r4
   b4fc4:	f7ff ffe8 	bl	b4f98 <_ZN6String12changeBufferEj>
   b4fc8:	2800      	cmp	r0, #0
   b4fca:	d0f9      	beq.n	b4fc0 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   b4fcc:	68a3      	ldr	r3, [r4, #8]
   b4fce:	2b00      	cmp	r3, #0
   b4fd0:	d1f5      	bne.n	b4fbe <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   b4fd2:	6822      	ldr	r2, [r4, #0]
   b4fd4:	7013      	strb	r3, [r2, #0]
   b4fd6:	e7f2      	b.n	b4fbe <_ZN6String7reserveEj+0xe>

000b4fd8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b4fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4fda:	460d      	mov	r5, r1
    if (!reserve(length)) {
   b4fdc:	4611      	mov	r1, r2
   b4fde:	9201      	str	r2, [sp, #4]
{
   b4fe0:	4604      	mov	r4, r0
    if (!reserve(length)) {
   b4fe2:	f7ff ffe5 	bl	b4fb0 <_ZN6String7reserveEj>
   b4fe6:	9a01      	ldr	r2, [sp, #4]
   b4fe8:	b928      	cbnz	r0, b4ff6 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   b4fea:	4620      	mov	r0, r4
   b4fec:	f7ff ffc9 	bl	b4f82 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   b4ff0:	4620      	mov	r0, r4
   b4ff2:	b003      	add	sp, #12
   b4ff4:	bd30      	pop	{r4, r5, pc}
    len = length;
   b4ff6:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   b4ff8:	4629      	mov	r1, r5
   b4ffa:	6820      	ldr	r0, [r4, #0]
   b4ffc:	f002 fcac 	bl	b7958 <memcpy>
    buffer[len] = 0;
   b5000:	6822      	ldr	r2, [r4, #0]
   b5002:	68a3      	ldr	r3, [r4, #8]
   b5004:	2100      	movs	r1, #0
   b5006:	54d1      	strb	r1, [r2, r3]
    return *this;
   b5008:	e7f2      	b.n	b4ff0 <_ZN6String4copyEPKcj+0x18>

000b500a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b500a:	b538      	push	{r3, r4, r5, lr}
   b500c:	4605      	mov	r5, r0
    if (buffer) {
   b500e:	6800      	ldr	r0, [r0, #0]
{
   b5010:	460c      	mov	r4, r1
    if (buffer) {
   b5012:	b170      	cbz	r0, b5032 <_ZN6String4moveERS_+0x28>
        if (capacity_ >= rhs.len && rhs.buffer) {
   b5014:	686a      	ldr	r2, [r5, #4]
   b5016:	688b      	ldr	r3, [r1, #8]
   b5018:	429a      	cmp	r2, r3
   b501a:	d308      	bcc.n	b502e <_ZN6String4moveERS_+0x24>
   b501c:	6809      	ldr	r1, [r1, #0]
   b501e:	b131      	cbz	r1, b502e <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
   b5020:	f002 fd0f 	bl	b7a42 <strcpy>
            len = rhs.len;
   b5024:	68a3      	ldr	r3, [r4, #8]
   b5026:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
   b5028:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity_ = rhs.capacity_;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity_ = 0;
    rhs.len = 0;
   b502a:	60a3      	str	r3, [r4, #8]
}
   b502c:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
   b502e:	f7ff feef 	bl	b4e10 <free>
    buffer = rhs.buffer;
   b5032:	6823      	ldr	r3, [r4, #0]
   b5034:	602b      	str	r3, [r5, #0]
    capacity_ = rhs.capacity_;
   b5036:	6863      	ldr	r3, [r4, #4]
   b5038:	606b      	str	r3, [r5, #4]
    len = rhs.len;
   b503a:	68a3      	ldr	r3, [r4, #8]
   b503c:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
   b503e:	2300      	movs	r3, #0
    rhs.capacity_ = 0;
   b5040:	e9c4 3300 	strd	r3, r3, [r4]
   b5044:	e7f1      	b.n	b502a <_ZN6String4moveERS_+0x20>

000b5046 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b5046:	b510      	push	{r4, lr}
    buffer = nullptr;
   b5048:	2300      	movs	r3, #0
    capacity_ = 0;
   b504a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b504e:	4604      	mov	r4, r0
    len = 0;
   b5050:	6083      	str	r3, [r0, #8]
    flags = 0;
   b5052:	7303      	strb	r3, [r0, #12]
    move(rval);
   b5054:	f7ff ffd9 	bl	b500a <_ZN6String4moveERS_>
}
   b5058:	4620      	mov	r0, r4
   b505a:	bd10      	pop	{r4, pc}

000b505c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
   b505c:	4288      	cmp	r0, r1
{
   b505e:	b510      	push	{r4, lr}
   b5060:	4604      	mov	r4, r0
    if (this == &rhs) {
   b5062:	d005      	beq.n	b5070 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
   b5064:	680b      	ldr	r3, [r1, #0]
   b5066:	b12b      	cbz	r3, b5074 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
   b5068:	688a      	ldr	r2, [r1, #8]
   b506a:	4619      	mov	r1, r3
   b506c:	f7ff ffb4 	bl	b4fd8 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   b5070:	4620      	mov	r0, r4
   b5072:	bd10      	pop	{r4, pc}
        invalidate();
   b5074:	f7ff ff85 	bl	b4f82 <_ZN6String10invalidateEv>
   b5078:	e7fa      	b.n	b5070 <_ZN6StringaSERKS_+0x14>

000b507a <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b507a:	b510      	push	{r4, lr}
    buffer = nullptr;
   b507c:	2300      	movs	r3, #0
String::String(const String &value)
   b507e:	4604      	mov	r4, r0
    capacity_ = 0;
   b5080:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
   b5084:	6083      	str	r3, [r0, #8]
    flags = 0;
   b5086:	7303      	strb	r3, [r0, #12]
    *this = value;
   b5088:	f7ff ffe8 	bl	b505c <_ZN6StringaSERKS_>
}
   b508c:	4620      	mov	r0, r4
   b508e:	bd10      	pop	{r4, pc}

000b5090 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b5090:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5092:	6843      	ldr	r3, [r0, #4]
   b5094:	3b01      	subs	r3, #1
    {
   b5096:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5098:	6043      	str	r3, [r0, #4]
   b509a:	b963      	cbnz	r3, b50b6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b509c:	6803      	ldr	r3, [r0, #0]
   b509e:	689b      	ldr	r3, [r3, #8]
   b50a0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b50a2:	68a3      	ldr	r3, [r4, #8]
   b50a4:	3b01      	subs	r3, #1
   b50a6:	60a3      	str	r3, [r4, #8]
   b50a8:	b92b      	cbnz	r3, b50b6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b50aa:	6823      	ldr	r3, [r4, #0]
   b50ac:	4620      	mov	r0, r4
   b50ae:	68db      	ldr	r3, [r3, #12]
    }
   b50b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b50b4:	4718      	bx	r3
    }
   b50b6:	bd10      	pop	{r4, pc}

000b50b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b50b8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b50ba:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b50be:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b50c0:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b50c4:	42ae      	cmp	r6, r5
   b50c6:	d004      	beq.n	b50d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b50c8:	4628      	mov	r0, r5
   b50ca:	f7ff ff53 	bl	b4f74 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b50ce:	3510      	adds	r5, #16
   b50d0:	e7f8      	b.n	b50c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b50d2:	6820      	ldr	r0, [r4, #0]
   b50d4:	f7ff fe9c 	bl	b4e10 <free>
    AllocatorT::free(data_);
}
   b50d8:	4620      	mov	r0, r4
   b50da:	bd70      	pop	{r4, r5, r6, pc}

000b50dc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b50dc:	4802      	ldr	r0, [pc, #8]	; (b50e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b50de:	2300      	movs	r3, #0
   b50e0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b50e2:	f7ff bc89 	b.w	b49f8 <os_mutex_recursive_create>
   b50e6:	bf00      	nop
   b50e8:	2003e690 	.word	0x2003e690

000b50ec <_ZN5spark16JSONStreamWriter5writeEPKcj>:

inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
   b50ec:	b510      	push	{r4, lr}
   b50ee:	4604      	mov	r4, r0
    bytesWritten_ += strm_.write((const uint8_t*)data, size);
   b50f0:	6880      	ldr	r0, [r0, #8]
   b50f2:	6803      	ldr	r3, [r0, #0]
   b50f4:	68db      	ldr	r3, [r3, #12]
   b50f6:	4798      	blx	r3
   b50f8:	68e3      	ldr	r3, [r4, #12]
   b50fa:	4418      	add	r0, r3
   b50fc:	60e0      	str	r0, [r4, #12]
}
   b50fe:	bd10      	pop	{r4, pc}

000b5100 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5102:	4606      	mov	r6, r0
   b5104:	460d      	mov	r5, r1
  size_t n = 0;
   b5106:	188f      	adds	r7, r1, r2
   b5108:	2400      	movs	r4, #0
  while (size--) {
   b510a:	42bd      	cmp	r5, r7
   b510c:	d00c      	beq.n	b5128 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b510e:	6833      	ldr	r3, [r6, #0]
   b5110:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5114:	689b      	ldr	r3, [r3, #8]
   b5116:	4630      	mov	r0, r6
   b5118:	4798      	blx	r3
     if (chunk>=0)
   b511a:	1e03      	subs	r3, r0, #0
   b511c:	db01      	blt.n	b5122 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b511e:	441c      	add	r4, r3
  while (size--) {
   b5120:	e7f3      	b.n	b510a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5122:	2c00      	cmp	r4, #0
   b5124:	bf08      	it	eq
   b5126:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5128:	4620      	mov	r0, r4
   b512a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b512c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b512c:	4770      	bx	lr

000b512e <_ZN5spark16JSONStreamWriterD0Ev>:
   b512e:	b510      	push	{r4, lr}
   b5130:	2110      	movs	r1, #16
   b5132:	4604      	mov	r4, r0
   b5134:	f7fe ffc3 	bl	b40be <_ZdlPvj>
   b5138:	4620      	mov	r0, r4
   b513a:	bd10      	pop	{r4, pc}

000b513c <_ZN5Print5writeEPKc>:

    int getWriteError() const { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b513c:	b513      	push	{r0, r1, r4, lr}
   b513e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5140:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5142:	b159      	cbz	r1, b515c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5144:	9101      	str	r1, [sp, #4]
   b5146:	f7fe ff73 	bl	b4030 <strlen>
   b514a:	6823      	ldr	r3, [r4, #0]
   b514c:	9901      	ldr	r1, [sp, #4]
   b514e:	68db      	ldr	r3, [r3, #12]
   b5150:	4602      	mov	r2, r0
   b5152:	4620      	mov	r0, r4
    }
   b5154:	b002      	add	sp, #8
   b5156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b515a:	4718      	bx	r3
    }
   b515c:	b002      	add	sp, #8
   b515e:	bd10      	pop	{r4, pc}

000b5160 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5160:	6803      	ldr	r3, [r0, #0]
   b5162:	689b      	ldr	r3, [r3, #8]
   b5164:	4718      	bx	r3

000b5166 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5166:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5168:	210d      	movs	r1, #13
{
   b516a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b516c:	f7ff fff8 	bl	b5160 <_ZN5Print5printEc>
  n += print('\n');
   b5170:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5172:	4604      	mov	r4, r0
  n += print('\n');
   b5174:	4628      	mov	r0, r5
   b5176:	f7ff fff3 	bl	b5160 <_ZN5Print5printEc>
  return n;
}
   b517a:	4420      	add	r0, r4
   b517c:	bd38      	pop	{r3, r4, r5, pc}

000b517e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b517e:	b538      	push	{r3, r4, r5, lr}
   b5180:	4605      	mov	r5, r0
  return write(str);
   b5182:	f7ff ffdb 	bl	b513c <_ZN5Print5writeEPKc>
   b5186:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5188:	4628      	mov	r0, r5
   b518a:	f7ff ffec 	bl	b5166 <_ZN5Print7printlnEv>
  return n;
}
   b518e:	4420      	add	r0, r4
   b5190:	bd38      	pop	{r3, r4, r5, pc}

000b5192 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5192:	b530      	push	{r4, r5, lr}
   b5194:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5196:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5198:	2a01      	cmp	r2, #1
  *str = '\0';
   b519a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b519e:	bf98      	it	ls
   b51a0:	220a      	movls	r2, #10
   b51a2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b51a4:	460d      	mov	r5, r1
   b51a6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b51aa:	fb01 5312 	mls	r3, r1, r2, r5
   b51ae:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b51b2:	2b09      	cmp	r3, #9
   b51b4:	bf94      	ite	ls
   b51b6:	3330      	addls	r3, #48	; 0x30
   b51b8:	3337      	addhi	r3, #55	; 0x37
   b51ba:	b2db      	uxtb	r3, r3
  } while(n);
   b51bc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b51be:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b51c2:	d9ef      	bls.n	b51a4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b51c4:	4621      	mov	r1, r4
   b51c6:	f7ff ffb9 	bl	b513c <_ZN5Print5writeEPKc>
}
   b51ca:	b00b      	add	sp, #44	; 0x2c
   b51cc:	bd30      	pop	{r4, r5, pc}

000b51ce <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b51ce:	b510      	push	{r4, lr}
   b51d0:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b51d2:	f7ff fc09 	bl	b49e8 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b51d6:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b51d8:	6823      	ldr	r3, [r4, #0]
   b51da:	4620      	mov	r0, r4
   b51dc:	695b      	ldr	r3, [r3, #20]
   b51de:	4798      	blx	r3
    if (c >= 0) return c;
   b51e0:	2800      	cmp	r0, #0
   b51e2:	da08      	bge.n	b51f6 <_ZN6Stream9timedReadEv+0x28>
   b51e4:	f7ff fc00 	bl	b49e8 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b51e8:	68e3      	ldr	r3, [r4, #12]
   b51ea:	1ac0      	subs	r0, r0, r3
   b51ec:	68a3      	ldr	r3, [r4, #8]
   b51ee:	4298      	cmp	r0, r3
   b51f0:	d3f2      	bcc.n	b51d8 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b51f2:	f04f 30ff 	mov.w	r0, #4294967295
}
   b51f6:	bd10      	pop	{r4, pc}

000b51f8 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b51f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b51fc:	4607      	mov	r7, r0
   b51fe:	460c      	mov	r4, r1
   b5200:	188e      	adds	r6, r1, r2
   b5202:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b5204:	42b5      	cmp	r5, r6
   b5206:	eba5 0804 	sub.w	r8, r5, r4
   b520a:	d007      	beq.n	b521c <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b520c:	4638      	mov	r0, r7
   b520e:	f7ff ffde 	bl	b51ce <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b5212:	1e03      	subs	r3, r0, #0
   b5214:	db02      	blt.n	b521c <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b5216:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b521a:	e7f3      	b.n	b5204 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b521c:	4640      	mov	r0, r8
   b521e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5222 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b5222:	4770      	bx	lr

000b5224 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b5224:	4608      	mov	r0, r1
   b5226:	b111      	cbz	r1, b522e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b5228:	680b      	ldr	r3, [r1, #0]
   b522a:	685b      	ldr	r3, [r3, #4]
   b522c:	4718      	bx	r3
}
   b522e:	4770      	bx	lr

000b5230 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b5230:	4770      	bx	lr

000b5232 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5232:	4770      	bx	lr

000b5234 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b5234:	4770      	bx	lr

000b5236 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b5236:	b538      	push	{r3, r4, r5, lr}
   b5238:	4604      	mov	r4, r0
   b523a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b523c:	6800      	ldr	r0, [r0, #0]
   b523e:	212e      	movs	r1, #46	; 0x2e
   b5240:	f002 fbf5 	bl	b7a2e <strchrnul>
    size = s - category;
   b5244:	6823      	ldr	r3, [r4, #0]
   b5246:	1ac3      	subs	r3, r0, r3
   b5248:	602b      	str	r3, [r5, #0]
    if (size) {
   b524a:	b123      	cbz	r3, b5256 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b524c:	7803      	ldrb	r3, [r0, #0]
   b524e:	b103      	cbz	r3, b5252 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b5250:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b5252:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5254:	6020      	str	r0, [r4, #0]
}
   b5256:	4618      	mov	r0, r3
   b5258:	bd38      	pop	{r3, r4, r5, pc}

000b525a <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b525a:	b510      	push	{r4, lr}
   b525c:	2104      	movs	r1, #4
   b525e:	4604      	mov	r4, r0
   b5260:	f7fe ff2d 	bl	b40be <_ZdlPvj>
   b5264:	4620      	mov	r0, r4
   b5266:	bd10      	pop	{r4, pc}

000b5268 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b5268:	b510      	push	{r4, lr}
   b526a:	2104      	movs	r1, #4
   b526c:	4604      	mov	r4, r0
   b526e:	f7fe ff26 	bl	b40be <_ZdlPvj>
   b5272:	4620      	mov	r0, r4
   b5274:	bd10      	pop	{r4, pc}

000b5276 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b5276:	f7ff bbcf 	b.w	b4a18 <os_mutex_recursive_lock>

000b527a <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b527a:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b527c:	f7fe fece 	bl	b401c <strcmp>
}
   b5280:	fab0 f080 	clz	r0, r0
   b5284:	0940      	lsrs	r0, r0, #5
   b5286:	bd08      	pop	{r3, pc}

000b5288 <__tcf_1>:
   b5288:	4770      	bx	lr

000b528a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b528a:	b510      	push	{r4, lr}
   b528c:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b528e:	f001 f929 	bl	b64e4 <_Z16_fetch_usbserialv>
   b5292:	4284      	cmp	r4, r0
   b5294:	d010      	beq.n	b52b8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b5296:	f002 f83d 	bl	b7314 <_Z22__fetch_global_Serial1v>
   b529a:	4284      	cmp	r4, r0
   b529c:	d105      	bne.n	b52aa <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b529e:	f002 f839 	bl	b7314 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b52a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b52a6:	f001 b9a8 	b.w	b65fa <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b52aa:	b12c      	cbz	r4, b52b8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b52ac:	6823      	ldr	r3, [r4, #0]
   b52ae:	4620      	mov	r0, r4
   b52b0:	685b      	ldr	r3, [r3, #4]
}
   b52b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b52b6:	4718      	bx	r3
   b52b8:	bd10      	pop	{r4, pc}

000b52ba <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b52ba:	b513      	push	{r0, r1, r4, lr}
   b52bc:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b52be:	4608      	mov	r0, r1
   b52c0:	9101      	str	r1, [sp, #4]
   b52c2:	f7fe feb5 	bl	b4030 <strlen>
   b52c6:	9901      	ldr	r1, [sp, #4]
   b52c8:	4602      	mov	r2, r0
   b52ca:	4620      	mov	r0, r4
}
   b52cc:	b002      	add	sp, #8
   b52ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b52d2:	f001 bf79 	b.w	b71c8 <_ZN5spark10JSONWriter5valueEPKcj>

000b52d6 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b52d6:	b513      	push	{r0, r1, r4, lr}
   b52d8:	4604      	mov	r4, r0
    write(str, strlen(str));
   b52da:	4608      	mov	r0, r1
   b52dc:	9101      	str	r1, [sp, #4]
   b52de:	f7fe fea7 	bl	b4030 <strlen>
   b52e2:	6823      	ldr	r3, [r4, #0]
   b52e4:	9901      	ldr	r1, [sp, #4]
   b52e6:	68db      	ldr	r3, [r3, #12]
   b52e8:	4602      	mov	r2, r0
   b52ea:	4620      	mov	r0, r4
}
   b52ec:	b002      	add	sp, #8
   b52ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b52f2:	4718      	bx	r3

000b52f4 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b52f4:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b52f6:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b52f8:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b52fc:	68db      	ldr	r3, [r3, #12]
   b52fe:	2201      	movs	r2, #1
   b5300:	f10d 0107 	add.w	r1, sp, #7
   b5304:	4798      	blx	r3
}
   b5306:	b003      	add	sp, #12
   b5308:	f85d fb04 	ldr.w	pc, [sp], #4

000b530c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b530c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::ConstIterator spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b5310:	e9d0 8400 	ldrd	r8, r4, [r0]
   b5314:	f04f 0a14 	mov.w	sl, #20
   b5318:	9300      	str	r3, [sp, #0]
   b531a:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b531e:	4b18      	ldr	r3, [pc, #96]	; (b5380 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5320:	10a4      	asrs	r4, r4, #2
   b5322:	4617      	mov	r7, r2
   b5324:	435c      	muls	r4, r3
   b5326:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b5328:	2c00      	cmp	r4, #0
   b532a:	dd21      	ble.n	b5370 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b532c:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b532e:	fb0a f006 	mul.w	r0, sl, r6
   b5332:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b5336:	463a      	mov	r2, r7
   b5338:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b533c:	5828      	ldr	r0, [r5, r0]
   b533e:	9101      	str	r1, [sp, #4]
   b5340:	455f      	cmp	r7, fp
   b5342:	bf28      	it	cs
   b5344:	465a      	movcs	r2, fp
   b5346:	f002 fb84 	bl	b7a52 <strncmp>
                if (cmp == 0) {
   b534a:	2800      	cmp	r0, #0
   b534c:	9901      	ldr	r1, [sp, #4]
   b534e:	f04f 0301 	mov.w	r3, #1
   b5352:	d10b      	bne.n	b536c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b5354:	455f      	cmp	r7, fp
   b5356:	d103      	bne.n	b5360 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b5358:	9a00      	ldr	r2, [sp, #0]
   b535a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b535c:	4634      	mov	r4, r6
   b535e:	e7e3      	b.n	b5328 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b5360:	d9fc      	bls.n	b535c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b5362:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b5364:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b5368:	3e01      	subs	r6, #1
   b536a:	e7f7      	b.n	b535c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b536c:	dbf9      	blt.n	b5362 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b536e:	e7f5      	b.n	b535c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b5370:	eba5 0508 	sub.w	r5, r5, r8
}
   b5374:	4802      	ldr	r0, [pc, #8]	; (b5380 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b5376:	10ad      	asrs	r5, r5, #2
   b5378:	4368      	muls	r0, r5
   b537a:	b003      	add	sp, #12
   b537c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5380:	cccccccd 	.word	0xcccccccd

000b5384 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b5384:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b5386:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b5388:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b538a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b538c:	b303      	cbz	r3, b53d0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b538e:	b1f9      	cbz	r1, b53d0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b5390:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b5392:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b5396:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b5398:	a903      	add	r1, sp, #12
   b539a:	a801      	add	r0, sp, #4
   b539c:	f7ff ff4b 	bl	b5236 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b53a0:	4601      	mov	r1, r0
   b53a2:	b1a8      	cbz	r0, b53d0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b53a4:	f10d 030b 	add.w	r3, sp, #11
   b53a8:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b53aa:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b53ae:	4620      	mov	r0, r4
   b53b0:	f7ff ffac 	bl	b530c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b53b4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b53b8:	b153      	cbz	r3, b53d0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b53ba:	6823      	ldr	r3, [r4, #0]
   b53bc:	2414      	movs	r4, #20
   b53be:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b53c2:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b53c4:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b53c8:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b53ca:	bfa8      	it	ge
   b53cc:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b53ce:	e7e3      	b.n	b5398 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b53d0:	4628      	mov	r0, r5
   b53d2:	b004      	add	sp, #16
   b53d4:	bd70      	pop	{r4, r5, r6, pc}

000b53d6 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b53d6:	b40e      	push	{r1, r2, r3}
   b53d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b53da:	b08c      	sub	sp, #48	; 0x30
   b53dc:	af00      	add	r7, sp, #0
   b53de:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b53e2:	4604      	mov	r4, r0
   b53e4:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b53e8:	607a      	str	r2, [r7, #4]
   b53ea:	462b      	mov	r3, r5
   b53ec:	2120      	movs	r1, #32
   b53ee:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b53f2:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b53f4:	f7ff fd1c 	bl	b4e30 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b53f8:	281f      	cmp	r0, #31
   b53fa:	687a      	ldr	r2, [r7, #4]
   b53fc:	d91a      	bls.n	b5434 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b53fe:	f100 0308 	add.w	r3, r0, #8
   b5402:	f023 0307 	bic.w	r3, r3, #7
        }
   b5406:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b5408:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b540c:	1c41      	adds	r1, r0, #1
   b540e:	462b      	mov	r3, r5
   b5410:	4668      	mov	r0, sp
        va_start(args, fmt);
   b5412:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b5414:	f7ff fd0c 	bl	b4e30 <vsnprintf>
        if (n > 0) {
   b5418:	1e02      	subs	r2, r0, #0
   b541a:	dd04      	ble.n	b5426 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b541c:	6823      	ldr	r3, [r4, #0]
   b541e:	4669      	mov	r1, sp
   b5420:	68db      	ldr	r3, [r3, #12]
   b5422:	4620      	mov	r0, r4
   b5424:	4798      	blx	r3
   b5426:	46b5      	mov	sp, r6
}
   b5428:	3730      	adds	r7, #48	; 0x30
   b542a:	46bd      	mov	sp, r7
   b542c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5430:	b003      	add	sp, #12
   b5432:	4770      	bx	lr
    } else if (n > 0) {
   b5434:	2800      	cmp	r0, #0
   b5436:	d0f7      	beq.n	b5428 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b5438:	6823      	ldr	r3, [r4, #0]
   b543a:	4602      	mov	r2, r0
   b543c:	68db      	ldr	r3, [r3, #12]
   b543e:	f107 0110 	add.w	r1, r7, #16
   b5442:	4620      	mov	r0, r4
   b5444:	4798      	blx	r3
}
   b5446:	e7ef      	b.n	b5428 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b5448 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b5448:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b544a:	4c09      	ldr	r4, [pc, #36]	; (b5470 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b544c:	7823      	ldrb	r3, [r4, #0]
   b544e:	f3bf 8f5b 	dmb	ish
   b5452:	07db      	lsls	r3, r3, #31
   b5454:	d409      	bmi.n	b546a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b5456:	4620      	mov	r0, r4
   b5458:	f7fe fe40 	bl	b40dc <__cxa_guard_acquire>
   b545c:	b128      	cbz	r0, b546a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b545e:	4620      	mov	r0, r4
   b5460:	f7fe fe41 	bl	b40e6 <__cxa_guard_release>
   b5464:	4803      	ldr	r0, [pc, #12]	; (b5474 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b5466:	f002 fa69 	bl	b793c <atexit>
}
   b546a:	4803      	ldr	r0, [pc, #12]	; (b5478 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b546c:	bd10      	pop	{r4, pc}
   b546e:	bf00      	nop
   b5470:	2003e698 	.word	0x2003e698
   b5474:	000b5231 	.word	0x000b5231
   b5478:	2003e58c 	.word	0x2003e58c

000b547c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b547c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b547e:	4c09      	ldr	r4, [pc, #36]	; (b54a4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b5480:	7823      	ldrb	r3, [r4, #0]
   b5482:	f3bf 8f5b 	dmb	ish
   b5486:	07db      	lsls	r3, r3, #31
   b5488:	d409      	bmi.n	b549e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b548a:	4620      	mov	r0, r4
   b548c:	f7fe fe26 	bl	b40dc <__cxa_guard_acquire>
   b5490:	b128      	cbz	r0, b549e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b5492:	4620      	mov	r0, r4
   b5494:	f7fe fe27 	bl	b40e6 <__cxa_guard_release>
   b5498:	4803      	ldr	r0, [pc, #12]	; (b54a8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b549a:	f002 fa4f 	bl	b793c <atexit>
    return &factory;
}
   b549e:	4803      	ldr	r0, [pc, #12]	; (b54ac <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b54a0:	bd10      	pop	{r4, pc}
   b54a2:	bf00      	nop
   b54a4:	2003e69c 	.word	0x2003e69c
   b54a8:	000b5289 	.word	0x000b5289
   b54ac:	2003e590 	.word	0x2003e590

000b54b0 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b54b0:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b54b2:	2500      	movs	r5, #0
   b54b4:	4604      	mov	r4, r0
   b54b6:	e9c0 5500 	strd	r5, r5, [r0]
   b54ba:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b54be:	6085      	str	r5, [r0, #8]
   b54c0:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b54c2:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b54c6:	f7ff fa97 	bl	b49f8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b54ca:	f7ff ffbd 	bl	b5448 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b54ce:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b54d0:	f7ff ffd4 	bl	b547c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b54d4:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b54d6:	6220      	str	r0, [r4, #32]
}
   b54d8:	4620      	mov	r0, r4
   b54da:	bd38      	pop	{r3, r4, r5, pc}

000b54dc <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b54dc:	b510      	push	{r4, lr}
    static LogManager mgr;
   b54de:	4c0a      	ldr	r4, [pc, #40]	; (b5508 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b54e0:	7823      	ldrb	r3, [r4, #0]
   b54e2:	f3bf 8f5b 	dmb	ish
   b54e6:	07db      	lsls	r3, r3, #31
   b54e8:	d40c      	bmi.n	b5504 <_ZN5spark10LogManager8instanceEv+0x28>
   b54ea:	4620      	mov	r0, r4
   b54ec:	f7fe fdf6 	bl	b40dc <__cxa_guard_acquire>
   b54f0:	b140      	cbz	r0, b5504 <_ZN5spark10LogManager8instanceEv+0x28>
   b54f2:	4806      	ldr	r0, [pc, #24]	; (b550c <_ZN5spark10LogManager8instanceEv+0x30>)
   b54f4:	f7ff ffdc 	bl	b54b0 <_ZN5spark10LogManagerC1Ev>
   b54f8:	4620      	mov	r0, r4
   b54fa:	f7fe fdf4 	bl	b40e6 <__cxa_guard_release>
   b54fe:	4804      	ldr	r0, [pc, #16]	; (b5510 <_ZN5spark10LogManager8instanceEv+0x34>)
   b5500:	f002 fa1c 	bl	b793c <atexit>
    return &mgr;
}
   b5504:	4801      	ldr	r0, [pc, #4]	; (b550c <_ZN5spark10LogManager8instanceEv+0x30>)
   b5506:	bd10      	pop	{r4, pc}
   b5508:	2003e694 	.word	0x2003e694
   b550c:	2003e6a4 	.word	0x2003e6a4
   b5510:	000b5a55 	.word	0x000b5a55

000b5514 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b5514:	4a02      	ldr	r2, [pc, #8]	; (b5520 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b5516:	4903      	ldr	r1, [pc, #12]	; (b5524 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b5518:	4803      	ldr	r0, [pc, #12]	; (b5528 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b551a:	2300      	movs	r3, #0
   b551c:	f7ff bbcc 	b.w	b4cb8 <log_set_callbacks>
   b5520:	000b5839 	.word	0x000b5839
   b5524:	000b57c5 	.word	0x000b57c5
   b5528:	000b5745 	.word	0x000b5745

000b552c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b552c:	2300      	movs	r3, #0
   b552e:	461a      	mov	r2, r3
   b5530:	4619      	mov	r1, r3
   b5532:	4618      	mov	r0, r3
   b5534:	f7ff bbc0 	b.w	b4cb8 <log_set_callbacks>

000b5538 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5538:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b553a:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b553c:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b553e:	4668      	mov	r0, sp
   b5540:	f7ff fcdc 	bl	b4efc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b5544:	466a      	mov	r2, sp
   b5546:	4629      	mov	r1, r5
   b5548:	4620      	mov	r0, r4
   b554a:	f001 fd5d 	bl	b7008 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b554e:	a801      	add	r0, sp, #4
   b5550:	f7ff fcdd 	bl	b4f0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5554:	4620      	mov	r0, r4
   b5556:	b003      	add	sp, #12
   b5558:	bd30      	pop	{r4, r5, pc}

000b555a <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b555a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b555c:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b555e:	4604      	mov	r4, r0
   b5560:	4668      	mov	r0, sp
   b5562:	f7ff fccb 	bl	b4efc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b5566:	466a      	mov	r2, sp
   b5568:	4629      	mov	r1, r5
   b556a:	4620      	mov	r0, r4
   b556c:	f001 fd28 	bl	b6fc0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b5570:	a801      	add	r0, sp, #4
   b5572:	f7ff fccc 	bl	b4f0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5576:	4620      	mov	r0, r4
   b5578:	b003      	add	sp, #12
   b557a:	bd30      	pop	{r4, r5, pc}

000b557c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b557c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b557e:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b5580:	4604      	mov	r4, r0
   b5582:	4668      	mov	r0, sp
   b5584:	f7ff fcba 	bl	b4efc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b5588:	466a      	mov	r2, sp
   b558a:	4629      	mov	r1, r5
   b558c:	4620      	mov	r0, r4
   b558e:	f001 fcc0 	bl	b6f12 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b5592:	a801      	add	r0, sp, #4
   b5594:	f7ff fcbb 	bl	b4f0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5598:	4620      	mov	r0, r4
   b559a:	b003      	add	sp, #12
   b559c:	bd30      	pop	{r4, r5, pc}
	...

000b55a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b55a0:	b570      	push	{r4, r5, r6, lr}
   b55a2:	b08a      	sub	sp, #40	; 0x28
   b55a4:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b55a6:	4601      	mov	r1, r0
   b55a8:	a804      	add	r0, sp, #16
   b55aa:	f7ff ffc5 	bl	b5538 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b55ae:	4e14      	ldr	r6, [pc, #80]	; (b5600 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b55b0:	a804      	add	r0, sp, #16
   b55b2:	f001 fd41 	bl	b7038 <_ZN5spark18JSONObjectIterator4nextEv>
   b55b6:	b1e8      	cbz	r0, b55f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b55b8:	a904      	add	r1, sp, #16
   b55ba:	4668      	mov	r0, sp
   b55bc:	f7ff ffcd 	bl	b555a <_ZNK5spark18JSONObjectIterator4nameEv>
   b55c0:	9802      	ldr	r0, [sp, #8]
   b55c2:	4631      	mov	r1, r6
   b55c4:	f7ff fe59 	bl	b527a <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b55c8:	4604      	mov	r4, r0
   b55ca:	b110      	cbz	r0, b55d2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b55cc:	1e2c      	subs	r4, r5, #0
   b55ce:	bf18      	it	ne
   b55d0:	2401      	movne	r4, #1
   b55d2:	a801      	add	r0, sp, #4
   b55d4:	f7ff fc9b 	bl	b4f0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b55d8:	2c00      	cmp	r4, #0
   b55da:	d0e9      	beq.n	b55b0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b55dc:	a904      	add	r1, sp, #16
   b55de:	4668      	mov	r0, sp
   b55e0:	f7ff ffcc 	bl	b557c <_ZNK5spark18JSONObjectIterator5valueEv>
   b55e4:	4668      	mov	r0, sp
   b55e6:	f001 fcca 	bl	b6f7e <_ZNK5spark9JSONValue5toIntEv>
   b55ea:	6028      	str	r0, [r5, #0]
   b55ec:	a801      	add	r0, sp, #4
   b55ee:	f7ff fc8e 	bl	b4f0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b55f2:	e7dd      	b.n	b55b0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b55f4:	a805      	add	r0, sp, #20
   b55f6:	f7ff fc8a 	bl	b4f0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b55fa:	b00a      	add	sp, #40	; 0x28
   b55fc:	bd70      	pop	{r4, r5, r6, pc}
   b55fe:	bf00      	nop
   b5600:	000b7e58 	.word	0x000b7e58

000b5604 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5604:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5606:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b5608:	4620      	mov	r0, r4
   b560a:	4913      	ldr	r1, [pc, #76]	; (b5658 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b560c:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b560e:	f7fe fd05 	bl	b401c <strcmp>
   b5612:	b950      	cbnz	r0, b562a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b5614:	f000 ff66 	bl	b64e4 <_Z16_fetch_usbserialv>
   b5618:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b561c:	f000 ff52 	bl	b64c4 <_ZN9USBSerial5beginEl>
}
   b5620:	b003      	add	sp, #12
   b5622:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b5626:	f000 bf5d 	b.w	b64e4 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b562a:	490c      	ldr	r1, [pc, #48]	; (b565c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b562c:	4620      	mov	r0, r4
   b562e:	f7fe fcf5 	bl	b401c <strcmp>
   b5632:	b978      	cbnz	r0, b5654 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b5634:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b5638:	a901      	add	r1, sp, #4
   b563a:	4628      	mov	r0, r5
        int baud = 9600;
   b563c:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b563e:	f7ff ffaf 	bl	b55a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b5642:	f001 fe67 	bl	b7314 <_Z22__fetch_global_Serial1v>
   b5646:	9901      	ldr	r1, [sp, #4]
   b5648:	f000 ffd4 	bl	b65f4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b564c:	f001 fe62 	bl	b7314 <_Z22__fetch_global_Serial1v>
}
   b5650:	b003      	add	sp, #12
   b5652:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b5654:	2000      	movs	r0, #0
   b5656:	e7fb      	b.n	b5650 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b5658:	000b7e5d 	.word	0x000b7e5d
   b565c:	000b7e64 	.word	0x000b7e64

000b5660 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5660:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5662:	e9d0 5300 	ldrd	r5, r3, [r0]
   b5666:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5668:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b566a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b566e:	42ae      	cmp	r6, r5
   b5670:	d005      	beq.n	b567e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b5672:	f105 0008 	add.w	r0, r5, #8
   b5676:	f7ff fff3 	bl	b5660 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b567a:	3514      	adds	r5, #20
   b567c:	e7f7      	b.n	b566e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b567e:	6820      	ldr	r0, [r4, #0]
   b5680:	f7ff fbc6 	bl	b4e10 <free>
}
   b5684:	4620      	mov	r0, r4
   b5686:	bd70      	pop	{r4, r5, r6, pc}

000b5688 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b5688:	b510      	push	{r4, lr}
   b568a:	4604      	mov	r4, r0
   b568c:	300c      	adds	r0, #12
   b568e:	f7ff ffe7 	bl	b5660 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5692:	4620      	mov	r0, r4
   b5694:	f7ff fd10 	bl	b50b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5698:	4620      	mov	r0, r4
   b569a:	bd10      	pop	{r4, pc}

000b569c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b569c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b569e:	4b04      	ldr	r3, [pc, #16]	; (b56b0 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b56a0:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b56a2:	f840 3b04 	str.w	r3, [r0], #4
   b56a6:	f7ff ffef 	bl	b5688 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b56aa:	4620      	mov	r0, r4
   b56ac:	bd10      	pop	{r4, pc}
   b56ae:	bf00      	nop
   b56b0:	000b7d3c 	.word	0x000b7d3c

000b56b4 <_ZN5spark16StreamLogHandlerD0Ev>:
   b56b4:	b510      	push	{r4, lr}
   b56b6:	4604      	mov	r4, r0
   b56b8:	f7ff fff0 	bl	b569c <_ZN5spark16StreamLogHandlerD1Ev>
   b56bc:	4620      	mov	r0, r4
   b56be:	2124      	movs	r1, #36	; 0x24
   b56c0:	f7fe fcfd 	bl	b40be <_ZdlPvj>
   b56c4:	4620      	mov	r0, r4
   b56c6:	bd10      	pop	{r4, pc}

000b56c8 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b56c8:	b510      	push	{r4, lr}
   b56ca:	4b03      	ldr	r3, [pc, #12]	; (b56d8 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b56cc:	6003      	str	r3, [r0, #0]
   b56ce:	4604      	mov	r4, r0
   b56d0:	f7ff ffe4 	bl	b569c <_ZN5spark16StreamLogHandlerD1Ev>
   b56d4:	4620      	mov	r0, r4
   b56d6:	bd10      	pop	{r4, pc}
   b56d8:	000b7eec 	.word	0x000b7eec

000b56dc <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b56dc:	b510      	push	{r4, lr}
   b56de:	4604      	mov	r4, r0
   b56e0:	f7ff fff2 	bl	b56c8 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b56e4:	4620      	mov	r0, r4
   b56e6:	2124      	movs	r1, #36	; 0x24
   b56e8:	f7fe fce9 	bl	b40be <_ZdlPvj>
   b56ec:	4620      	mov	r0, r4
   b56ee:	bd10      	pop	{r4, pc}

000b56f0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b56f0:	680a      	ldr	r2, [r1, #0]
   b56f2:	6002      	str	r2, [r0, #0]
   b56f4:	684a      	ldr	r2, [r1, #4]
   b56f6:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b56f8:	2200      	movs	r2, #0
   b56fa:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b56fe:	b510      	push	{r4, lr}
   b5700:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5702:	688c      	ldr	r4, [r1, #8]
   b5704:	6084      	str	r4, [r0, #8]
   b5706:	68cc      	ldr	r4, [r1, #12]
   b5708:	60c4      	str	r4, [r0, #12]
   b570a:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b570c:	608a      	str	r2, [r1, #8]
   b570e:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5710:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b5712:	610a      	str	r2, [r1, #16]
   b5714:	bd10      	pop	{r4, pc}

000b5716 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
   b5716:	2200      	movs	r2, #0
   b5718:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b571c:	b510      	push	{r4, lr}
        capacity_(0) {
   b571e:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5720:	680c      	ldr	r4, [r1, #0]
   b5722:	6004      	str	r4, [r0, #0]
   b5724:	684c      	ldr	r4, [r1, #4]
   b5726:	6044      	str	r4, [r0, #4]
   b5728:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b572a:	600a      	str	r2, [r1, #0]
   b572c:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b572e:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5730:	608a      	str	r2, [r1, #8]
}
   b5732:	bd10      	pop	{r4, pc}

000b5734 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b5734:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5736:	6803      	ldr	r3, [r0, #0]
   b5738:	4604      	mov	r4, r0
   b573a:	6818      	ldr	r0, [r3, #0]
   b573c:	f7ff f974 	bl	b4a28 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b5740:	4620      	mov	r0, r4
   b5742:	bd10      	pop	{r4, pc}

000b5744 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b5744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5748:	b087      	sub	sp, #28
   b574a:	4680      	mov	r8, r0
   b574c:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b574e:	4b1c      	ldr	r3, [pc, #112]	; (b57c0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b5750:	685b      	ldr	r3, [r3, #4]
   b5752:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5756:	4689      	mov	r9, r1
   b5758:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   b575a:	b96b      	cbnz	r3, b5778 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b575c:	f7ff febe 	bl	b54dc <_ZN5spark10LogManager8instanceEv>
   b5760:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b5762:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b5766:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5768:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b576a:	f7ff fd84 	bl	b5276 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b576e:	7b23      	ldrb	r3, [r4, #12]
   b5770:	b12b      	cbz	r3, b577e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b5772:	a805      	add	r0, sp, #20
   b5774:	f7ff ffde 	bl	b5734 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b5778:	b007      	add	sp, #28
   b577a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b577e:	2301      	movs	r3, #1
   b5780:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b5782:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b5786:	fa5f f989 	uxtb.w	r9, r9
   b578a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b578e:	45aa      	cmp	sl, r5
   b5790:	d012      	beq.n	b57b8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b5792:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b5796:	4631      	mov	r1, r6
   b5798:	1d38      	adds	r0, r7, #4
   b579a:	f7ff fdf3 	bl	b5384 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b579e:	4581      	cmp	r9, r0
   b57a0:	d3f5      	bcc.n	b578e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b57a2:	683b      	ldr	r3, [r7, #0]
   b57a4:	9a03      	ldr	r2, [sp, #12]
   b57a6:	9200      	str	r2, [sp, #0]
   b57a8:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b57ac:	464a      	mov	r2, r9
   b57ae:	4633      	mov	r3, r6
   b57b0:	4641      	mov	r1, r8
   b57b2:	4638      	mov	r0, r7
   b57b4:	47d8      	blx	fp
   b57b6:	e7ea      	b.n	b578e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b57b8:	2300      	movs	r3, #0
   b57ba:	7323      	strb	r3, [r4, #12]
   b57bc:	e7d9      	b.n	b5772 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b57be:	bf00      	nop
   b57c0:	e000ed00 	.word	0xe000ed00

000b57c4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b57c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b57c8:	469b      	mov	fp, r3
   b57ca:	4b1a      	ldr	r3, [pc, #104]	; (b5834 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b57cc:	685b      	ldr	r3, [r3, #4]
   b57ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b57d2:	4680      	mov	r8, r0
   b57d4:	4689      	mov	r9, r1
   b57d6:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   b57d8:	b96b      	cbnz	r3, b57f6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b57da:	f7ff fe7f 	bl	b54dc <_ZN5spark10LogManager8instanceEv>
   b57de:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b57e0:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b57e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b57e6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b57e8:	f7ff fd45 	bl	b5276 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b57ec:	7b23      	ldrb	r3, [r4, #12]
   b57ee:	b12b      	cbz	r3, b57fc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b57f0:	a801      	add	r0, sp, #4
   b57f2:	f7ff ff9f 	bl	b5734 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b57f6:	b003      	add	sp, #12
   b57f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b57fc:	2301      	movs	r3, #1
   b57fe:	7323      	strb	r3, [r4, #12]
   b5800:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b5804:	b2f6      	uxtb	r6, r6
   b5806:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b580a:	4555      	cmp	r5, sl
   b580c:	d00e      	beq.n	b582c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b580e:	f855 7b04 	ldr.w	r7, [r5], #4
   b5812:	4659      	mov	r1, fp
   b5814:	1d38      	adds	r0, r7, #4
   b5816:	f7ff fdb5 	bl	b5384 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b581a:	4286      	cmp	r6, r0
   b581c:	d3f5      	bcc.n	b580a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b581e:	683b      	ldr	r3, [r7, #0]
   b5820:	464a      	mov	r2, r9
   b5822:	68db      	ldr	r3, [r3, #12]
   b5824:	4641      	mov	r1, r8
   b5826:	4638      	mov	r0, r7
   b5828:	4798      	blx	r3
   b582a:	e7ee      	b.n	b580a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b582c:	2300      	movs	r3, #0
   b582e:	7323      	strb	r3, [r4, #12]
   b5830:	e7de      	b.n	b57f0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b5832:	bf00      	nop
   b5834:	e000ed00 	.word	0xe000ed00

000b5838 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b5838:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b583c:	4b16      	ldr	r3, [pc, #88]	; (b5898 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b583e:	685b      	ldr	r3, [r3, #4]
   b5840:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5844:	4605      	mov	r5, r0
   b5846:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   b5848:	bb1b      	cbnz	r3, b5892 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b584a:	f7ff fe47 	bl	b54dc <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b584e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b5852:	4604      	mov	r4, r0
   b5854:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5856:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5858:	f7ff fd0d 	bl	b5276 <_ZN14RecursiveMutex4lockEv.isra.0>
   b585c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b5860:	2446      	movs	r4, #70	; 0x46
   b5862:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5866:	45b0      	cmp	r8, r6
   b5868:	d109      	bne.n	b587e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b586a:	a801      	add	r0, sp, #4
   b586c:	f7ff ff62 	bl	b5734 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b5870:	42a5      	cmp	r5, r4
   b5872:	bfb4      	ite	lt
   b5874:	2000      	movlt	r0, #0
   b5876:	2001      	movge	r0, #1
}
   b5878:	b002      	add	sp, #8
   b587a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b587e:	f856 0b04 	ldr.w	r0, [r6], #4
   b5882:	4639      	mov	r1, r7
   b5884:	3004      	adds	r0, #4
   b5886:	f7ff fd7d 	bl	b5384 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b588a:	4284      	cmp	r4, r0
   b588c:	bfa8      	it	ge
   b588e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b5890:	e7e9      	b.n	b5866 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b5892:	2000      	movs	r0, #0
   b5894:	e7f0      	b.n	b5878 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b5896:	bf00      	nop
   b5898:	e000ed00 	.word	0xe000ed00

000b589c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b589e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b58a2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b58a4:	4604      	mov	r4, r0
   b58a6:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b58a8:	db0d      	blt.n	b58c6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b58aa:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b58ac:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b58ae:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b58b0:	dd04      	ble.n	b58bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b58b2:	00b9      	lsls	r1, r7, #2
   b58b4:	f7ff fab4 	bl	b4e20 <realloc>
            if (!d) {
   b58b8:	b918      	cbnz	r0, b58c2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b58ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b58bc:	f7ff faa8 	bl	b4e10 <free>
        T* d = nullptr;
   b58c0:	2000      	movs	r0, #0
        data_ = d;
   b58c2:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b58c4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b58c6:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b58c8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b58ca:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b58ce:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b58d0:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b58d4:	1d08      	adds	r0, r1, #4
   b58d6:	f002 f84d 	bl	b7974 <memmove>
    new(p) T(std::move(value));
   b58da:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b58de:	6863      	ldr	r3, [r4, #4]
   b58e0:	3301      	adds	r3, #1
   b58e2:	6063      	str	r3, [r4, #4]
    return true;
   b58e4:	2001      	movs	r0, #1
   b58e6:	e7e8      	b.n	b58ba <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b58e8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b58e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b58ea:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b58ee:	4604      	mov	r4, r0
   b58f0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b58f2:	9301      	str	r3, [sp, #4]
   b58f4:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b58f6:	f7ff fcbe 	bl	b5276 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b58fa:	e9d4 3200 	ldrd	r3, r2, [r4]
   b58fe:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b5902:	4293      	cmp	r3, r2
   b5904:	4619      	mov	r1, r3
   b5906:	d00b      	beq.n	b5920 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b5908:	6809      	ldr	r1, [r1, #0]
   b590a:	42a9      	cmp	r1, r5
   b590c:	f103 0304 	add.w	r3, r3, #4
   b5910:	d1f7      	bne.n	b5902 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b5912:	a801      	add	r0, sp, #4
   b5914:	f7ff ff0e 	bl	b5734 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b5918:	2500      	movs	r5, #0
}
   b591a:	4628      	mov	r0, r5
   b591c:	b003      	add	sp, #12
   b591e:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b5920:	4629      	mov	r1, r5
   b5922:	4620      	mov	r0, r4
   b5924:	f7ff ffba 	bl	b589c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b5928:	4605      	mov	r5, r0
   b592a:	2800      	cmp	r0, #0
   b592c:	d0f1      	beq.n	b5912 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b592e:	6863      	ldr	r3, [r4, #4]
   b5930:	2b01      	cmp	r3, #1
   b5932:	d101      	bne.n	b5938 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b5934:	f7ff fdee 	bl	b5514 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5938:	a801      	add	r0, sp, #4
   b593a:	f7ff fefb 	bl	b5734 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b593e:	e7ec      	b.n	b591a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b5940 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5940:	b570      	push	{r4, r5, r6, lr}
   b5942:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b5944:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5948:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b594a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b594e:	4282      	cmp	r2, r0
   b5950:	d00f      	beq.n	b5972 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b5952:	4601      	mov	r1, r0
            if (*p == value) {
   b5954:	681d      	ldr	r5, [r3, #0]
   b5956:	f851 6b04 	ldr.w	r6, [r1], #4
   b595a:	42ae      	cmp	r6, r5
   b595c:	d107      	bne.n	b596e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b595e:	1a52      	subs	r2, r2, r1
   b5960:	f002 f808 	bl	b7974 <memmove>
    --size_;
   b5964:	6863      	ldr	r3, [r4, #4]
   b5966:	3b01      	subs	r3, #1
   b5968:	6063      	str	r3, [r4, #4]
    return true;
   b596a:	2001      	movs	r0, #1
}
   b596c:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b596e:	4608      	mov	r0, r1
   b5970:	e7ed      	b.n	b594e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b5972:	2000      	movs	r0, #0
   b5974:	e7fa      	b.n	b596c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b5976 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5976:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b5978:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b597c:	4604      	mov	r4, r0
   b597e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5980:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5982:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b5984:	f7ff fc77 	bl	b5276 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b5988:	a901      	add	r1, sp, #4
   b598a:	4620      	mov	r0, r4
   b598c:	f7ff ffd8 	bl	b5940 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b5990:	b118      	cbz	r0, b599a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b5992:	6863      	ldr	r3, [r4, #4]
   b5994:	b90b      	cbnz	r3, b599a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b5996:	f7ff fdc9 	bl	b552c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b599a:	a803      	add	r0, sp, #12
   b599c:	f7ff feca 	bl	b5734 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b59a0:	b004      	add	sp, #16
   b59a2:	bd10      	pop	{r4, pc}

000b59a4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b59a4:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b59a6:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b59aa:	2318      	movs	r3, #24
   b59ac:	4604      	mov	r4, r0
   b59ae:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b59b2:	42ae      	cmp	r6, r5
   b59b4:	d015      	beq.n	b59e2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b59b6:	f105 0110 	add.w	r1, r5, #16
   b59ba:	4620      	mov	r0, r4
   b59bc:	f7ff ffc0 	bl	b5940 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b59c0:	6863      	ldr	r3, [r4, #4]
   b59c2:	b90b      	cbnz	r3, b59c8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b59c4:	f7ff fdb2 	bl	b552c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b59c8:	69e0      	ldr	r0, [r4, #28]
   b59ca:	6929      	ldr	r1, [r5, #16]
   b59cc:	6803      	ldr	r3, [r0, #0]
   b59ce:	68db      	ldr	r3, [r3, #12]
   b59d0:	4798      	blx	r3
        if (h.stream) {
   b59d2:	6969      	ldr	r1, [r5, #20]
   b59d4:	b119      	cbz	r1, b59de <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b59d6:	6a20      	ldr	r0, [r4, #32]
   b59d8:	6803      	ldr	r3, [r0, #0]
   b59da:	68db      	ldr	r3, [r3, #12]
   b59dc:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b59de:	3518      	adds	r5, #24
   b59e0:	e7e7      	b.n	b59b2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b59e2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b59e6:	2618      	movs	r6, #24
   b59e8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b59ec:	42ae      	cmp	r6, r5
   b59ee:	d004      	beq.n	b59fa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b59f0:	4628      	mov	r0, r5
   b59f2:	f7ff fabf 	bl	b4f74 <_ZN6StringD1Ev>
   b59f6:	3518      	adds	r5, #24
   b59f8:	e7f8      	b.n	b59ec <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b59fa:	2300      	movs	r3, #0
   b59fc:	6163      	str	r3, [r4, #20]
}
   b59fe:	bd70      	pop	{r4, r5, r6, pc}

000b5a00 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b5a00:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5a02:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b5a04:	f7ff fd92 	bl	b552c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5a08:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b5a0c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5a0e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5a10:	f7ff fc31 	bl	b5276 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b5a14:	4620      	mov	r0, r4
   b5a16:	f7ff ffc5 	bl	b59a4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b5a1a:	a801      	add	r0, sp, #4
   b5a1c:	f7ff fe8a 	bl	b5734 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b5a20:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5a22:	b108      	cbz	r0, b5a28 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b5a24:	f7fe fff0 	bl	b4a08 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b5a28:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5a2c:	2618      	movs	r6, #24
   b5a2e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5a32:	42ae      	cmp	r6, r5
   b5a34:	d004      	beq.n	b5a40 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b5a36:	4628      	mov	r0, r5
   b5a38:	f7ff fa9c 	bl	b4f74 <_ZN6StringD1Ev>
   b5a3c:	3518      	adds	r5, #24
   b5a3e:	e7f8      	b.n	b5a32 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b5a40:	6920      	ldr	r0, [r4, #16]
   b5a42:	f7ff f9e5 	bl	b4e10 <free>
   b5a46:	6820      	ldr	r0, [r4, #0]
   b5a48:	f7ff f9e2 	bl	b4e10 <free>
}
   b5a4c:	4620      	mov	r0, r4
   b5a4e:	b002      	add	sp, #8
   b5a50:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5a54 <__tcf_2>:
    static LogManager mgr;
   b5a54:	4801      	ldr	r0, [pc, #4]	; (b5a5c <__tcf_2+0x8>)
   b5a56:	f7ff bfd3 	b.w	b5a00 <_ZN5spark10LogManagerD1Ev>
   b5a5a:	bf00      	nop
   b5a5c:	2003e6a4 	.word	0x2003e6a4

000b5a60 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b5a60:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5a64:	4604      	mov	r4, r0
   b5a66:	460d      	mov	r5, r1
   b5a68:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5a6a:	d915      	bls.n	b5a98 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b5a6c:	4290      	cmp	r0, r2
   b5a6e:	d214      	bcs.n	b5a9a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b5a70:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5a74:	1a75      	subs	r5, r6, r1
   b5a76:	f1a1 0714 	sub.w	r7, r1, #20
   b5a7a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5a7c:	42b7      	cmp	r7, r6
   b5a7e:	d01a      	beq.n	b5ab6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b5a80:	b11c      	cbz	r4, b5a8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b5a82:	4631      	mov	r1, r6
   b5a84:	4620      	mov	r0, r4
   b5a86:	f7ff fe33 	bl	b56f0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b5a8a:	f106 0008 	add.w	r0, r6, #8
   b5a8e:	f7ff fde7 	bl	b5660 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b5a92:	3e14      	subs	r6, #20
   b5a94:	3c14      	subs	r4, #20
   b5a96:	e7f1      	b.n	b5a7c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b5a98:	d00d      	beq.n	b5ab6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b5a9a:	42b5      	cmp	r5, r6
   b5a9c:	d00b      	beq.n	b5ab6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b5a9e:	b11c      	cbz	r4, b5aa8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b5aa0:	4629      	mov	r1, r5
   b5aa2:	4620      	mov	r0, r4
   b5aa4:	f7ff fe24 	bl	b56f0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b5aa8:	f105 0008 	add.w	r0, r5, #8
   b5aac:	f7ff fdd8 	bl	b5660 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b5ab0:	3514      	adds	r5, #20
   b5ab2:	3414      	adds	r4, #20
   b5ab4:	e7f1      	b.n	b5a9a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b5ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5ab8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5ab8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5abc:	4604      	mov	r4, r0
   b5abe:	460d      	mov	r5, r1
   b5ac0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5ac2:	d914      	bls.n	b5aee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b5ac4:	4290      	cmp	r0, r2
   b5ac6:	d213      	bcs.n	b5af0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b5ac8:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b5acc:	1a75      	subs	r5, r6, r1
   b5ace:	f1a1 0710 	sub.w	r7, r1, #16
   b5ad2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5ad4:	42b7      	cmp	r7, r6
   b5ad6:	d018      	beq.n	b5b0a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b5ad8:	b11c      	cbz	r4, b5ae2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b5ada:	4631      	mov	r1, r6
   b5adc:	4620      	mov	r0, r4
   b5ade:	f7ff fab2 	bl	b5046 <_ZN6StringC1EOS_>
                end->~T();
   b5ae2:	4630      	mov	r0, r6
   b5ae4:	f7ff fa46 	bl	b4f74 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b5ae8:	3e10      	subs	r6, #16
   b5aea:	3c10      	subs	r4, #16
   b5aec:	e7f2      	b.n	b5ad4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5aee:	d00c      	beq.n	b5b0a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b5af0:	42b5      	cmp	r5, r6
   b5af2:	d00a      	beq.n	b5b0a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b5af4:	b11c      	cbz	r4, b5afe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b5af6:	4629      	mov	r1, r5
   b5af8:	4620      	mov	r0, r4
   b5afa:	f7ff faa4 	bl	b5046 <_ZN6StringC1EOS_>
                p->~T();
   b5afe:	4628      	mov	r0, r5
   b5b00:	f7ff fa38 	bl	b4f74 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5b04:	3510      	adds	r5, #16
   b5b06:	3410      	adds	r4, #16
   b5b08:	e7f2      	b.n	b5af0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b5b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5b0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b5b0c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b5b0e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5b10:	4605      	mov	r5, r0
        if (n > 0) {
   b5b12:	dd11      	ble.n	b5b38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5b14:	0130      	lsls	r0, r6, #4
   b5b16:	f7ff f973 	bl	b4e00 <malloc>
            if (!d) {
   b5b1a:	4604      	mov	r4, r0
   b5b1c:	b158      	cbz	r0, b5b36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b5b1e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5b22:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b5b26:	f7ff ffc7 	bl	b5ab8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b5b2a:	6828      	ldr	r0, [r5, #0]
   b5b2c:	f7ff f970 	bl	b4e10 <free>
        data_ = d;
   b5b30:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5b32:	60ae      	str	r6, [r5, #8]
        return true;
   b5b34:	2001      	movs	r0, #1
    }
   b5b36:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5b38:	2400      	movs	r4, #0
   b5b3a:	e7f6      	b.n	b5b2a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b5b3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5b40:	4690      	mov	r8, r2
   b5b42:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b5b44:	2300      	movs	r3, #0
   b5b46:	9103      	str	r1, [sp, #12]
    return size_;
   b5b48:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b5b4c:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5b4e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b5b50:	4299      	cmp	r1, r3
        capacity_(0) {
   b5b52:	e9c0 3300 	strd	r3, r3, [r0]
   b5b56:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b5b5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b5b5e:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5b62:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5b64:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b5b66:	dc23      	bgt.n	b5bb0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b5b68:	e9d8 5700 	ldrd	r5, r7, [r8]
   b5b6c:	2314      	movs	r3, #20
   b5b6e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b5b72:	42af      	cmp	r7, r5
   b5b74:	d03b      	beq.n	b5bee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b5b76:	4629      	mov	r1, r5
   b5b78:	a80b      	add	r0, sp, #44	; 0x2c
   b5b7a:	f7ff fa64 	bl	b5046 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b5b7e:	a90b      	add	r1, sp, #44	; 0x2c
   b5b80:	a80f      	add	r0, sp, #60	; 0x3c
   b5b82:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b5b84:	f7ff fa5f 	bl	b5046 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5b88:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b5b8c:	4299      	cmp	r1, r3
   b5b8e:	da1b      	bge.n	b5bc8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b5b90:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b5b92:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b5b94:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b5b98:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b5b9c:	4631      	mov	r1, r6
   b5b9e:	f106 0010 	add.w	r0, r6, #16
   b5ba2:	f7ff ff89 	bl	b5ab8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b5ba6:	b9ee      	cbnz	r6, b5be4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b5ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5baa:	3301      	adds	r3, #1
   b5bac:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b5bae:	e011      	b.n	b5bd4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b5bb0:	a808      	add	r0, sp, #32
   b5bb2:	f7ff ffab 	bl	b5b0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b5bb6:	2800      	cmp	r0, #0
   b5bb8:	d1d6      	bne.n	b5b68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b5bba:	a808      	add	r0, sp, #32
   b5bbc:	f7ff fa7c 	bl	b50b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b5bc0:	4620      	mov	r0, r4
   b5bc2:	b015      	add	sp, #84	; 0x54
   b5bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5bc8:	3101      	adds	r1, #1
   b5bca:	a808      	add	r0, sp, #32
   b5bcc:	f7ff ff9e 	bl	b5b0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b5bd0:	2800      	cmp	r0, #0
   b5bd2:	d1dd      	bne.n	b5b90 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b5bd4:	a80f      	add	r0, sp, #60	; 0x3c
   b5bd6:	f7ff f9cd 	bl	b4f74 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b5bda:	a80b      	add	r0, sp, #44	; 0x2c
   b5bdc:	f7ff f9ca 	bl	b4f74 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b5be0:	3514      	adds	r5, #20
   b5be2:	e7c6      	b.n	b5b72 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b5be4:	a90f      	add	r1, sp, #60	; 0x3c
   b5be6:	4630      	mov	r0, r6
   b5be8:	f7ff fa2d 	bl	b5046 <_ZN6StringC1EOS_>
   b5bec:	e7dc      	b.n	b5ba8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b5bee:	2600      	movs	r6, #0
   b5bf0:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b5bf4:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b5bf6:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b5bfa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b5bfe:	429e      	cmp	r6, r3
   b5c00:	da7c      	bge.n	b5cfc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b5c02:	0133      	lsls	r3, r6, #4
   b5c04:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b5c06:	9306      	str	r3, [sp, #24]
        if (!category) {
   b5c08:	b90b      	cbnz	r3, b5c0e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b5c0a:	3601      	adds	r6, #1
   b5c0c:	e7f5      	b.n	b5bfa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b5c0e:	2300      	movs	r3, #0
   b5c10:	9307      	str	r3, [sp, #28]
   b5c12:	fb09 f306 	mul.w	r3, r9, r6
   b5c16:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b5c18:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b5c1a:	a907      	add	r1, sp, #28
   b5c1c:	a806      	add	r0, sp, #24
   b5c1e:	f7ff fb0a 	bl	b5236 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5c22:	4682      	mov	sl, r0
   b5c24:	2800      	cmp	r0, #0
   b5c26:	d0f0      	beq.n	b5c0a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b5c28:	f04f 0300 	mov.w	r3, #0
   b5c2c:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5c30:	4601      	mov	r1, r0
   b5c32:	9a07      	ldr	r2, [sp, #28]
   b5c34:	f10d 0317 	add.w	r3, sp, #23
   b5c38:	4628      	mov	r0, r5
   b5c3a:	f7ff fb67 	bl	b530c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5c3e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5c42:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5c44:	2f00      	cmp	r7, #0
   b5c46:	d14a      	bne.n	b5cde <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b5c48:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b5c4c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b5c50:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b5c54:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5c58:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b5c5c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b5c60:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5c62:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b5c66:	4293      	cmp	r3, r2
   b5c68:	db17      	blt.n	b5c9a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b5c6a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b5c6e:	f1ba 0f00 	cmp.w	sl, #0
   b5c72:	dd30      	ble.n	b5cd6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b5c74:	fb09 f00a 	mul.w	r0, r9, sl
   b5c78:	f7ff f8c2 	bl	b4e00 <malloc>
            if (!d) {
   b5c7c:	4683      	mov	fp, r0
   b5c7e:	b360      	cbz	r0, b5cda <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b5c80:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5c84:	fb09 1202 	mla	r2, r9, r2, r1
   b5c88:	f7ff feea 	bl	b5a60 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b5c8c:	6828      	ldr	r0, [r5, #0]
   b5c8e:	f7ff f8bf 	bl	b4e10 <free>
        data_ = d;
   b5c92:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b5c96:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b5c9a:	682b      	ldr	r3, [r5, #0]
   b5c9c:	9a01      	ldr	r2, [sp, #4]
   b5c9e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b5ca2:	686a      	ldr	r2, [r5, #4]
   b5ca4:	4651      	mov	r1, sl
   b5ca6:	fb09 3202 	mla	r2, r9, r2, r3
   b5caa:	f10a 0014 	add.w	r0, sl, #20
   b5cae:	f7ff fed7 	bl	b5a60 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b5cb2:	f1ba 0f00 	cmp.w	sl, #0
   b5cb6:	d003      	beq.n	b5cc0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b5cb8:	a90f      	add	r1, sp, #60	; 0x3c
   b5cba:	4650      	mov	r0, sl
   b5cbc:	f7ff fd18 	bl	b56f0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b5cc0:	686b      	ldr	r3, [r5, #4]
   b5cc2:	3301      	adds	r3, #1
   b5cc4:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b5cc6:	a811      	add	r0, sp, #68	; 0x44
   b5cc8:	f7ff fcca 	bl	b5660 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5ccc:	b13f      	cbz	r7, b5cde <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b5cce:	a80b      	add	r0, sp, #44	; 0x2c
   b5cd0:	f7ff fcc6 	bl	b5660 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5cd4:	e771      	b.n	b5bba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b5cd6:	46bb      	mov	fp, r7
   b5cd8:	e7d8      	b.n	b5c8c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5cda:	2701      	movs	r7, #1
   b5cdc:	e7f3      	b.n	b5cc6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b5cde:	9b01      	ldr	r3, [sp, #4]
   b5ce0:	682d      	ldr	r5, [r5, #0]
   b5ce2:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b5ce6:	9b06      	ldr	r3, [sp, #24]
   b5ce8:	781b      	ldrb	r3, [r3, #0]
   b5cea:	b92b      	cbnz	r3, b5cf8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b5cec:	f8d8 3000 	ldr.w	r3, [r8]
   b5cf0:	9a02      	ldr	r2, [sp, #8]
   b5cf2:	4413      	add	r3, r2
   b5cf4:	7c1b      	ldrb	r3, [r3, #16]
   b5cf6:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b5cf8:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b5cfa:	e78e      	b.n	b5c1a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5cfc:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b5cfe:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5d00:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5d02:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5d04:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5d06:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b5d08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b5d0a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5d0c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5d0e:	60a2      	str	r2, [r4, #8]
   b5d10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b5d12:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5d14:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5d16:	60e2      	str	r2, [r4, #12]
   b5d18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b5d1a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5d1c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5d1e:	6122      	str	r2, [r4, #16]
   b5d20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b5d22:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b5d24:	9b03      	ldr	r3, [sp, #12]
   b5d26:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b5d28:	6162      	str	r2, [r4, #20]
   b5d2a:	7623      	strb	r3, [r4, #24]
   b5d2c:	e7cf      	b.n	b5cce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b5d30 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5d30:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5d32:	4604      	mov	r4, r0
   b5d34:	b087      	sub	sp, #28
   b5d36:	460d      	mov	r5, r1
        filter_(level, filters) {
   b5d38:	4626      	mov	r6, r4
        stream_(&stream) {
   b5d3a:	4619      	mov	r1, r3
   b5d3c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5d3e:	4617      	mov	r7, r2
        stream_(&stream) {
   b5d40:	f7fe fba9 	bl	b4496 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5d44:	4b0b      	ldr	r3, [pc, #44]	; (b5d74 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b5d46:	f846 3b04 	str.w	r3, [r6], #4
   b5d4a:	4669      	mov	r1, sp
   b5d4c:	a803      	add	r0, sp, #12
   b5d4e:	f7fe fba2 	bl	b4496 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5d52:	aa03      	add	r2, sp, #12
   b5d54:	4639      	mov	r1, r7
   b5d56:	4630      	mov	r0, r6
   b5d58:	f7ff fef0 	bl	b5b3c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5d5c:	a803      	add	r0, sp, #12
   b5d5e:	f7fe fb59 	bl	b4414 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5d62:	4668      	mov	r0, sp
   b5d64:	f7fe fb56 	bl	b4414 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5d68:	4b03      	ldr	r3, [pc, #12]	; (b5d78 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b5d6a:	6023      	str	r3, [r4, #0]
}
   b5d6c:	4620      	mov	r0, r4
        stream_(&stream) {
   b5d6e:	6225      	str	r5, [r4, #32]
}
   b5d70:	b007      	add	sp, #28
   b5d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5d74:	000b7d3c 	.word	0x000b7d3c
   b5d78:	000b7ed4 	.word	0x000b7ed4

000b5d7c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b5d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5d7e:	460f      	mov	r7, r1
   b5d80:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5d82:	491d      	ldr	r1, [pc, #116]	; (b5df8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b5d84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5d86:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b5d88:	4616      	mov	r6, r2
   b5d8a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5d8c:	f7fe f946 	bl	b401c <strcmp>
   b5d90:	b9c0      	cbnz	r0, b5dc4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b5d92:	b1a4      	cbz	r4, b5dbe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b5d94:	4629      	mov	r1, r5
   b5d96:	a801      	add	r0, sp, #4
   b5d98:	f7ff fcbd 	bl	b5716 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b5d9c:	4917      	ldr	r1, [pc, #92]	; (b5dfc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b5d9e:	2024      	movs	r0, #36	; 0x24
   b5da0:	f001 fcb2 	bl	b7708 <_ZnwjRKSt9nothrow_t>
   b5da4:	4605      	mov	r5, r0
   b5da6:	b130      	cbz	r0, b5db6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b5da8:	ab01      	add	r3, sp, #4
   b5daa:	4632      	mov	r2, r6
   b5dac:	4621      	mov	r1, r4
   b5dae:	f7ff ffbf 	bl	b5d30 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5db2:	4b13      	ldr	r3, [pc, #76]	; (b5e00 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b5db4:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b5db6:	a801      	add	r0, sp, #4
   b5db8:	f7fe fb2c 	bl	b4414 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5dbc:	462c      	mov	r4, r5
}
   b5dbe:	4620      	mov	r0, r4
   b5dc0:	b005      	add	sp, #20
   b5dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b5dc4:	490f      	ldr	r1, [pc, #60]	; (b5e04 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b5dc6:	4638      	mov	r0, r7
   b5dc8:	f7fe f928 	bl	b401c <strcmp>
   b5dcc:	b990      	cbnz	r0, b5df4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b5dce:	2c00      	cmp	r4, #0
   b5dd0:	d0f5      	beq.n	b5dbe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b5dd2:	4629      	mov	r1, r5
   b5dd4:	a801      	add	r0, sp, #4
   b5dd6:	f7ff fc9e 	bl	b5716 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b5dda:	4908      	ldr	r1, [pc, #32]	; (b5dfc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b5ddc:	2024      	movs	r0, #36	; 0x24
   b5dde:	f001 fc93 	bl	b7708 <_ZnwjRKSt9nothrow_t>
   b5de2:	4605      	mov	r5, r0
   b5de4:	2800      	cmp	r0, #0
   b5de6:	d0e6      	beq.n	b5db6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b5de8:	ab01      	add	r3, sp, #4
   b5dea:	4632      	mov	r2, r6
   b5dec:	4621      	mov	r1, r4
   b5dee:	f7ff ff9f 	bl	b5d30 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5df2:	e7e0      	b.n	b5db6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b5df4:	2400      	movs	r4, #0
   b5df6:	e7e2      	b.n	b5dbe <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b5df8:	000b7e6c 	.word	0x000b7e6c
   b5dfc:	000b8111 	.word	0x000b8111
   b5e00:	000b7eec 	.word	0x000b7eec
   b5e04:	000b7e70 	.word	0x000b7e70

000b5e08 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b5e08:	4b01      	ldr	r3, [pc, #4]	; (b5e10 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5e0a:	4a02      	ldr	r2, [pc, #8]	; (b5e14 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5e0c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5e0e:	4770      	bx	lr
   b5e10:	2003e6a0 	.word	0x2003e6a0
   b5e14:	000b7e81 	.word	0x000b7e81

000b5e18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5e1c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b5e1e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5e22:	4604      	mov	r4, r0
   b5e24:	460e      	mov	r6, r1
   b5e26:	4617      	mov	r7, r2
   b5e28:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b5e2a:	f000 fb5b 	bl	b64e4 <_Z16_fetch_usbserialv>
   b5e2e:	4581      	cmp	r9, r0
   b5e30:	d04c      	beq.n	b5ecc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b5e32:	792b      	ldrb	r3, [r5, #4]
   b5e34:	0719      	lsls	r1, r3, #28
   b5e36:	d504      	bpl.n	b5e42 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b5e38:	696a      	ldr	r2, [r5, #20]
   b5e3a:	4954      	ldr	r1, [pc, #336]	; (b5f8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b5e3c:	4620      	mov	r0, r4
   b5e3e:	f7ff faca 	bl	b53d6 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b5e42:	f1b8 0f00 	cmp.w	r8, #0
   b5e46:	d00d      	beq.n	b5e64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b5e48:	215b      	movs	r1, #91	; 0x5b
   b5e4a:	4620      	mov	r0, r4
   b5e4c:	f7ff fa52 	bl	b52f4 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b5e50:	4641      	mov	r1, r8
   b5e52:	4620      	mov	r0, r4
   b5e54:	f7ff fa3f 	bl	b52d6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b5e58:	6823      	ldr	r3, [r4, #0]
   b5e5a:	494d      	ldr	r1, [pc, #308]	; (b5f90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b5e5c:	68db      	ldr	r3, [r3, #12]
   b5e5e:	2202      	movs	r2, #2
   b5e60:	4620      	mov	r0, r4
   b5e62:	4798      	blx	r3
    if (attr.has_file) {
   b5e64:	792b      	ldrb	r3, [r5, #4]
   b5e66:	07da      	lsls	r2, r3, #31
   b5e68:	d523      	bpl.n	b5eb2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b5e6a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b5e6e:	212f      	movs	r1, #47	; 0x2f
   b5e70:	4640      	mov	r0, r8
   b5e72:	f001 fe02 	bl	b7a7a <strrchr>
    if (s1) {
   b5e76:	b108      	cbz	r0, b5e7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b5e78:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b5e7c:	4641      	mov	r1, r8
   b5e7e:	4620      	mov	r0, r4
   b5e80:	f7ff fa29 	bl	b52d6 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b5e84:	792b      	ldrb	r3, [r5, #4]
   b5e86:	079b      	lsls	r3, r3, #30
   b5e88:	d508      	bpl.n	b5e9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b5e8a:	213a      	movs	r1, #58	; 0x3a
   b5e8c:	4620      	mov	r0, r4
   b5e8e:	f7ff fa31 	bl	b52f4 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b5e92:	68ea      	ldr	r2, [r5, #12]
   b5e94:	493f      	ldr	r1, [pc, #252]	; (b5f94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b5e96:	4620      	mov	r0, r4
   b5e98:	f7ff fa9d 	bl	b53d6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b5e9c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b5e9e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b5ea0:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b5ea4:	68db      	ldr	r3, [r3, #12]
   b5ea6:	bf14      	ite	ne
   b5ea8:	493b      	ldrne	r1, [pc, #236]	; (b5f98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b5eaa:	493c      	ldreq	r1, [pc, #240]	; (b5f9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b5eac:	2202      	movs	r2, #2
            write(": ", 2);
   b5eae:	4620      	mov	r0, r4
   b5eb0:	4798      	blx	r3
    if (attr.has_function) {
   b5eb2:	792b      	ldrb	r3, [r5, #4]
   b5eb4:	0758      	lsls	r0, r3, #29
   b5eb6:	d51d      	bpl.n	b5ef4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b5eb8:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b5eba:	460b      	mov	r3, r1
   b5ebc:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b5ebe:	f813 0b01 	ldrb.w	r0, [r3], #1
   b5ec2:	b160      	cbz	r0, b5ede <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b5ec4:	2820      	cmp	r0, #32
   b5ec6:	d108      	bne.n	b5eda <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b5ec8:	4619      	mov	r1, r3
   b5eca:	e7f7      	b.n	b5ebc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b5ecc:	4834      	ldr	r0, [pc, #208]	; (b5fa0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b5ece:	f000 ff1e 	bl	b6d0e <_ZN5spark12NetworkClass9listeningEv>
   b5ed2:	2800      	cmp	r0, #0
   b5ed4:	d0ad      	beq.n	b5e32 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b5ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b5eda:	2828      	cmp	r0, #40	; 0x28
   b5edc:	d1ee      	bne.n	b5ebc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b5ede:	6823      	ldr	r3, [r4, #0]
   b5ee0:	1a52      	subs	r2, r2, r1
   b5ee2:	68db      	ldr	r3, [r3, #12]
   b5ee4:	4620      	mov	r0, r4
   b5ee6:	4798      	blx	r3
        write("(): ", 4);
   b5ee8:	6823      	ldr	r3, [r4, #0]
   b5eea:	492e      	ldr	r1, [pc, #184]	; (b5fa4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b5eec:	68db      	ldr	r3, [r3, #12]
   b5eee:	2204      	movs	r2, #4
   b5ef0:	4620      	mov	r0, r4
   b5ef2:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b5ef4:	2100      	movs	r1, #0
   b5ef6:	4638      	mov	r0, r7
   b5ef8:	f7fe fed6 	bl	b4ca8 <log_level_name>
   b5efc:	4601      	mov	r1, r0
    write(s);
   b5efe:	4620      	mov	r0, r4
   b5f00:	f7ff f9e9 	bl	b52d6 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b5f04:	6823      	ldr	r3, [r4, #0]
   b5f06:	4925      	ldr	r1, [pc, #148]	; (b5f9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b5f08:	68db      	ldr	r3, [r3, #12]
   b5f0a:	2202      	movs	r2, #2
   b5f0c:	4620      	mov	r0, r4
   b5f0e:	4798      	blx	r3
    if (msg) {
   b5f10:	b11e      	cbz	r6, b5f1a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b5f12:	4631      	mov	r1, r6
   b5f14:	4620      	mov	r0, r4
   b5f16:	f7ff f9de 	bl	b52d6 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b5f1a:	792b      	ldrb	r3, [r5, #4]
   b5f1c:	f013 0f30 	tst.w	r3, #48	; 0x30
   b5f20:	d02c      	beq.n	b5f7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b5f22:	6823      	ldr	r3, [r4, #0]
   b5f24:	4920      	ldr	r1, [pc, #128]	; (b5fa8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b5f26:	68db      	ldr	r3, [r3, #12]
   b5f28:	2202      	movs	r2, #2
   b5f2a:	4620      	mov	r0, r4
   b5f2c:	4798      	blx	r3
        if (attr.has_code) {
   b5f2e:	792b      	ldrb	r3, [r5, #4]
   b5f30:	06d9      	lsls	r1, r3, #27
   b5f32:	d50a      	bpl.n	b5f4a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b5f34:	6823      	ldr	r3, [r4, #0]
   b5f36:	491d      	ldr	r1, [pc, #116]	; (b5fac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b5f38:	68db      	ldr	r3, [r3, #12]
   b5f3a:	2207      	movs	r2, #7
   b5f3c:	4620      	mov	r0, r4
   b5f3e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b5f40:	69aa      	ldr	r2, [r5, #24]
   b5f42:	491b      	ldr	r1, [pc, #108]	; (b5fb0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b5f44:	4620      	mov	r0, r4
   b5f46:	f7ff fa46 	bl	b53d6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b5f4a:	792b      	ldrb	r3, [r5, #4]
   b5f4c:	069a      	lsls	r2, r3, #26
   b5f4e:	d511      	bpl.n	b5f74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b5f50:	06db      	lsls	r3, r3, #27
   b5f52:	d505      	bpl.n	b5f60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b5f54:	6823      	ldr	r3, [r4, #0]
   b5f56:	4910      	ldr	r1, [pc, #64]	; (b5f98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b5f58:	68db      	ldr	r3, [r3, #12]
   b5f5a:	2202      	movs	r2, #2
   b5f5c:	4620      	mov	r0, r4
   b5f5e:	4798      	blx	r3
            write("details = ", 10);
   b5f60:	6823      	ldr	r3, [r4, #0]
   b5f62:	4914      	ldr	r1, [pc, #80]	; (b5fb4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b5f64:	68db      	ldr	r3, [r3, #12]
   b5f66:	4620      	mov	r0, r4
   b5f68:	220a      	movs	r2, #10
   b5f6a:	4798      	blx	r3
            write(attr.details);
   b5f6c:	69e9      	ldr	r1, [r5, #28]
   b5f6e:	4620      	mov	r0, r4
   b5f70:	f7ff f9b1 	bl	b52d6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b5f74:	215d      	movs	r1, #93	; 0x5d
   b5f76:	4620      	mov	r0, r4
   b5f78:	f7ff f9bc 	bl	b52f4 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b5f7c:	6823      	ldr	r3, [r4, #0]
   b5f7e:	490e      	ldr	r1, [pc, #56]	; (b5fb8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b5f80:	68db      	ldr	r3, [r3, #12]
   b5f82:	4620      	mov	r0, r4
   b5f84:	2202      	movs	r2, #2
}
   b5f86:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b5f8a:	4718      	bx	r3
   b5f8c:	000b7e85 	.word	0x000b7e85
   b5f90:	000b7e8c 	.word	0x000b7e8c
   b5f94:	000b8004 	.word	0x000b8004
   b5f98:	000b7e8f 	.word	0x000b7e8f
   b5f9c:	000b7e94 	.word	0x000b7e94
   b5fa0:	2003e708 	.word	0x2003e708
   b5fa4:	000b7e92 	.word	0x000b7e92
   b5fa8:	000b7e97 	.word	0x000b7e97
   b5fac:	000b7e9a 	.word	0x000b7e9a
   b5fb0:	000b7ea2 	.word	0x000b7ea2
   b5fb4:	000b7ea5 	.word	0x000b7ea5
   b5fb8:	000b7eb0 	.word	0x000b7eb0

000b5fbc <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b5fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5fc0:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   b5fc2:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b5fc4:	460d      	mov	r5, r1
   b5fc6:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   b5fc8:	f000 fa8c 	bl	b64e4 <_Z16_fetch_usbserialv>
   b5fcc:	4287      	cmp	r7, r0
   b5fce:	d007      	beq.n	b5fe0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   b5fd0:	6a20      	ldr	r0, [r4, #32]
   b5fd2:	6803      	ldr	r3, [r0, #0]
   b5fd4:	4632      	mov	r2, r6
   b5fd6:	4629      	mov	r1, r5
   b5fd8:	68db      	ldr	r3, [r3, #12]
}
   b5fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   b5fde:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   b5fe0:	4803      	ldr	r0, [pc, #12]	; (b5ff0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   b5fe2:	f000 fe94 	bl	b6d0e <_ZN5spark12NetworkClass9listeningEv>
   b5fe6:	2800      	cmp	r0, #0
   b5fe8:	d0f2      	beq.n	b5fd0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   b5fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5fee:	bf00      	nop
   b5ff0:	2003e708 	.word	0x2003e708

000b5ff4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5ff8:	b085      	sub	sp, #20
    return stream_;
   b5ffa:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b5ffe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b6000:	4605      	mov	r5, r0
   b6002:	460f      	mov	r7, r1
   b6004:	4690      	mov	r8, r2
   b6006:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b6008:	f000 fa6c 	bl	b64e4 <_Z16_fetch_usbserialv>
   b600c:	4581      	cmp	r9, r0
   b600e:	d105      	bne.n	b601c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b6010:	4849      	ldr	r0, [pc, #292]	; (b6138 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b6012:	f000 fe7c 	bl	b6d0e <_ZN5spark12NetworkClass9listeningEv>
   b6016:	2800      	cmp	r0, #0
   b6018:	f040 808a 	bne.w	b6130 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b601c:	6a2b      	ldr	r3, [r5, #32]
        bytesWritten_(0) {
   b601e:	4a47      	ldr	r2, [pc, #284]	; (b613c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b6020:	9200      	str	r2, [sp, #0]
        state_(BEGIN) {
   b6022:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b6026:	4668      	mov	r0, sp
        bytesWritten_(0) {
   b6028:	e9cd 3902 	strd	r3, r9, [sp, #8]
        state_(BEGIN) {
   b602c:	f88d 9004 	strb.w	r9, [sp, #4]
   b6030:	f001 f82b 	bl	b708a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b6034:	4649      	mov	r1, r9
   b6036:	4640      	mov	r0, r8
   b6038:	f7fe fe36 	bl	b4ca8 <log_level_name>
    json.name("l", 1).value(s);
   b603c:	4940      	ldr	r1, [pc, #256]	; (b6140 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b603e:	4680      	mov	r8, r0
   b6040:	2201      	movs	r2, #1
   b6042:	4668      	mov	r0, sp
   b6044:	f001 f8b0 	bl	b71a8 <_ZN5spark10JSONWriter4nameEPKcj>
   b6048:	4641      	mov	r1, r8
   b604a:	f7ff f936 	bl	b52ba <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b604e:	b13f      	cbz	r7, b6060 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6c>
        json.name("m", 1).value(msg);
   b6050:	493c      	ldr	r1, [pc, #240]	; (b6144 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b6052:	2201      	movs	r2, #1
   b6054:	4668      	mov	r0, sp
   b6056:	f001 f8a7 	bl	b71a8 <_ZN5spark10JSONWriter4nameEPKcj>
   b605a:	4639      	mov	r1, r7
   b605c:	f7ff f92d 	bl	b52ba <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b6060:	b13e      	cbz	r6, b6072 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7e>
        json.name("c", 1).value(category);
   b6062:	4939      	ldr	r1, [pc, #228]	; (b6148 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b6064:	2201      	movs	r2, #1
   b6066:	4668      	mov	r0, sp
   b6068:	f001 f89e 	bl	b71a8 <_ZN5spark10JSONWriter4nameEPKcj>
   b606c:	4631      	mov	r1, r6
   b606e:	f7ff f924 	bl	b52ba <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b6072:	7923      	ldrb	r3, [r4, #4]
   b6074:	07df      	lsls	r7, r3, #31
   b6076:	d50e      	bpl.n	b6096 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa2>
        s = extractFileName(attr.file); // Strip directory path
   b6078:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b607a:	212f      	movs	r1, #47	; 0x2f
   b607c:	4630      	mov	r0, r6
   b607e:	f001 fcfc 	bl	b7a7a <strrchr>
    if (s1) {
   b6082:	b100      	cbz	r0, b6086 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x92>
        return s1 + 1;
   b6084:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b6086:	4931      	ldr	r1, [pc, #196]	; (b614c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b6088:	2201      	movs	r2, #1
   b608a:	4668      	mov	r0, sp
   b608c:	f001 f88c 	bl	b71a8 <_ZN5spark10JSONWriter4nameEPKcj>
   b6090:	4631      	mov	r1, r6
   b6092:	f7ff f912 	bl	b52ba <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b6096:	7923      	ldrb	r3, [r4, #4]
   b6098:	079e      	lsls	r6, r3, #30
   b609a:	d507      	bpl.n	b60ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb8>
        json.name("ln", 2).value(attr.line);
   b609c:	492c      	ldr	r1, [pc, #176]	; (b6150 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b609e:	2202      	movs	r2, #2
   b60a0:	4668      	mov	r0, sp
   b60a2:	f001 f881 	bl	b71a8 <_ZN5spark10JSONWriter4nameEPKcj>
   b60a6:	68e1      	ldr	r1, [r4, #12]
   b60a8:	f000 fffc 	bl	b70a4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b60ac:	7923      	ldrb	r3, [r4, #4]
   b60ae:	0758      	lsls	r0, r3, #29
   b60b0:	d514      	bpl.n	b60dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe8>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b60b2:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b60b4:	4633      	mov	r3, r6
   b60b6:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b60b8:	f813 2b01 	ldrb.w	r2, [r3], #1
   b60bc:	b12a      	cbz	r2, b60ca <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd6>
        if (*s == ' ') {
   b60be:	2a20      	cmp	r2, #32
   b60c0:	d101      	bne.n	b60c6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd2>
            s1 = s + 1; // Skip return type
   b60c2:	461e      	mov	r6, r3
   b60c4:	e7f7      	b.n	b60b6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        } else if (*s == '(') {
   b60c6:	2a28      	cmp	r2, #40	; 0x28
   b60c8:	d1f5      	bne.n	b60b6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        json.name("fn", 2).value(s, n);
   b60ca:	4922      	ldr	r1, [pc, #136]	; (b6154 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b60cc:	2202      	movs	r2, #2
   b60ce:	4668      	mov	r0, sp
   b60d0:	f001 f86a 	bl	b71a8 <_ZN5spark10JSONWriter4nameEPKcj>
   b60d4:	1bba      	subs	r2, r7, r6
   b60d6:	4631      	mov	r1, r6
   b60d8:	f001 f876 	bl	b71c8 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b60dc:	7923      	ldrb	r3, [r4, #4]
   b60de:	0719      	lsls	r1, r3, #28
   b60e0:	d507      	bpl.n	b60f2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfe>
        json.name("t", 1).value((unsigned)attr.time);
   b60e2:	491d      	ldr	r1, [pc, #116]	; (b6158 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b60e4:	2201      	movs	r2, #1
   b60e6:	4668      	mov	r0, sp
   b60e8:	f001 f85e 	bl	b71a8 <_ZN5spark10JSONWriter4nameEPKcj>
   b60ec:	6961      	ldr	r1, [r4, #20]
   b60ee:	f000 ffeb 	bl	b70c8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b60f2:	7923      	ldrb	r3, [r4, #4]
   b60f4:	06da      	lsls	r2, r3, #27
   b60f6:	d507      	bpl.n	b6108 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b60f8:	4918      	ldr	r1, [pc, #96]	; (b615c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b60fa:	2204      	movs	r2, #4
   b60fc:	4668      	mov	r0, sp
   b60fe:	f001 f853 	bl	b71a8 <_ZN5spark10JSONWriter4nameEPKcj>
   b6102:	69a1      	ldr	r1, [r4, #24]
   b6104:	f000 ffce 	bl	b70a4 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b6108:	7923      	ldrb	r3, [r4, #4]
   b610a:	069b      	lsls	r3, r3, #26
   b610c:	d507      	bpl.n	b611e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b610e:	4914      	ldr	r1, [pc, #80]	; (b6160 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b6110:	2206      	movs	r2, #6
   b6112:	4668      	mov	r0, sp
   b6114:	f001 f848 	bl	b71a8 <_ZN5spark10JSONWriter4nameEPKcj>
   b6118:	69e1      	ldr	r1, [r4, #28]
   b611a:	f7ff f8ce 	bl	b52ba <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b611e:	4668      	mov	r0, sp
   b6120:	f000 ff9d 	bl	b705e <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b6124:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b6126:	490f      	ldr	r1, [pc, #60]	; (b6164 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b6128:	6803      	ldr	r3, [r0, #0]
   b612a:	2202      	movs	r2, #2
   b612c:	68db      	ldr	r3, [r3, #12]
   b612e:	4798      	blx	r3
}
   b6130:	b005      	add	sp, #20
   b6132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6136:	bf00      	nop
   b6138:	2003e708 	.word	0x2003e708
   b613c:	000b7e48 	.word	0x000b7e48
   b6140:	000b7e62 	.word	0x000b7e62
   b6144:	000b7eb3 	.word	0x000b7eb3
   b6148:	000b8297 	.word	0x000b8297
   b614c:	000b7eb5 	.word	0x000b7eb5
   b6150:	000b7eb7 	.word	0x000b7eb7
   b6154:	000b7eba 	.word	0x000b7eba
   b6158:	000b7ebd 	.word	0x000b7ebd
   b615c:	000b7ebf 	.word	0x000b7ebf
   b6160:	000b7ec4 	.word	0x000b7ec4
   b6164:	000b7eb0 	.word	0x000b7eb0

000b6168 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6168:	4b02      	ldr	r3, [pc, #8]	; (b6174 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b616a:	681a      	ldr	r2, [r3, #0]
   b616c:	4b02      	ldr	r3, [pc, #8]	; (b6178 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b616e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6170:	4770      	bx	lr
   b6172:	bf00      	nop
   b6174:	2003e594 	.word	0x2003e594
   b6178:	2003e6cc 	.word	0x2003e6cc

000b617c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b617c:	b510      	push	{r4, lr}
   b617e:	4b04      	ldr	r3, [pc, #16]	; (b6190 <_ZN9TCPClientD1Ev+0x14>)
   b6180:	6003      	str	r3, [r0, #0]
   b6182:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b6184:	6980      	ldr	r0, [r0, #24]
   b6186:	b108      	cbz	r0, b618c <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b6188:	f7fe ff82 	bl	b5090 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b618c:	4620      	mov	r0, r4
   b618e:	bd10      	pop	{r4, pc}
   b6190:	000b802c 	.word	0x000b802c

000b6194 <_ZN9TCPClientD0Ev>:
   b6194:	b510      	push	{r4, lr}
   b6196:	4604      	mov	r4, r0
   b6198:	f7ff fff0 	bl	b617c <_ZN9TCPClientD1Ev>
   b619c:	4620      	mov	r0, r4
   b619e:	211c      	movs	r1, #28
   b61a0:	f7fd ff8d 	bl	b40be <_ZdlPvj>
   b61a4:	4620      	mov	r0, r4
   b61a6:	bd10      	pop	{r4, pc}

000b61a8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b61a8:	4b01      	ldr	r3, [pc, #4]	; (b61b0 <_GLOBAL__sub_I_RGB+0x8>)
   b61aa:	2200      	movs	r2, #0
   b61ac:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b61ae:	4770      	bx	lr
   b61b0:	2003e6d0 	.word	0x2003e6d0

000b61b4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b61b4:	4b01      	ldr	r3, [pc, #4]	; (b61bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b61b6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b61b8:	4770      	bx	lr
   b61ba:	bf00      	nop
   b61bc:	2003e598 	.word	0x2003e598

000b61c0 <serialEventRun>:
{
   b61c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b61c2:	4b0b      	ldr	r3, [pc, #44]	; (b61f0 <serialEventRun+0x30>)
   b61c4:	b143      	cbz	r3, b61d8 <serialEventRun+0x18>
   b61c6:	f000 f98d 	bl	b64e4 <_Z16_fetch_usbserialv>
   b61ca:	6803      	ldr	r3, [r0, #0]
   b61cc:	691b      	ldr	r3, [r3, #16]
   b61ce:	4798      	blx	r3
   b61d0:	2800      	cmp	r0, #0
   b61d2:	dd01      	ble.n	b61d8 <serialEventRun+0x18>
        serialEvent();
   b61d4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b61d8:	4b06      	ldr	r3, [pc, #24]	; (b61f4 <serialEventRun+0x34>)
   b61da:	b143      	cbz	r3, b61ee <serialEventRun+0x2e>
   b61dc:	f001 f89a 	bl	b7314 <_Z22__fetch_global_Serial1v>
   b61e0:	6803      	ldr	r3, [r0, #0]
   b61e2:	691b      	ldr	r3, [r3, #16]
   b61e4:	4798      	blx	r3
   b61e6:	2800      	cmp	r0, #0
   b61e8:	dd01      	ble.n	b61ee <serialEventRun+0x2e>
        serialEvent1();
   b61ea:	f3af 8000 	nop.w
}
   b61ee:	bd08      	pop	{r3, pc}
	...

000b61f8 <_post_loop>:
{
   b61f8:	b508      	push	{r3, lr}
	serialEventRun();
   b61fa:	f7ff ffe1 	bl	b61c0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b61fe:	f7fe fbf3 	bl	b49e8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6202:	4b01      	ldr	r3, [pc, #4]	; (b6208 <_post_loop+0x10>)
   b6204:	6018      	str	r0, [r3, #0]
}
   b6206:	bd08      	pop	{r3, pc}
   b6208:	2003e734 	.word	0x2003e734

000b620c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b620c:	4805      	ldr	r0, [pc, #20]	; (b6224 <_Z33system_initialize_user_backup_ramv+0x18>)
   b620e:	4a06      	ldr	r2, [pc, #24]	; (b6228 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6210:	4906      	ldr	r1, [pc, #24]	; (b622c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6212:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6214:	1a12      	subs	r2, r2, r0
   b6216:	f001 fb9f 	bl	b7958 <memcpy>
    __backup_sram_signature = signature;
   b621a:	4b05      	ldr	r3, [pc, #20]	; (b6230 <_Z33system_initialize_user_backup_ramv+0x24>)
   b621c:	4a05      	ldr	r2, [pc, #20]	; (b6234 <_Z33system_initialize_user_backup_ramv+0x28>)
   b621e:	601a      	str	r2, [r3, #0]
}
   b6220:	bd08      	pop	{r3, pc}
   b6222:	bf00      	nop
   b6224:	2003f400 	.word	0x2003f400
   b6228:	2003f404 	.word	0x2003f404
   b622c:	000b8468 	.word	0x000b8468
   b6230:	2003f400 	.word	0x2003f400
   b6234:	9a271c1e 	.word	0x9a271c1e

000b6238 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6238:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b623a:	2300      	movs	r3, #0
   b623c:	9300      	str	r3, [sp, #0]
   b623e:	461a      	mov	r2, r3
   b6240:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6244:	f7fe fd5a 	bl	b4cfc <system_ctrl_set_result>
}
   b6248:	b003      	add	sp, #12
   b624a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6250 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6250:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6252:	8843      	ldrh	r3, [r0, #2]
   b6254:	2b0a      	cmp	r3, #10
   b6256:	d008      	beq.n	b626a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6258:	2b50      	cmp	r3, #80	; 0x50
   b625a:	d10b      	bne.n	b6274 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b625c:	4b09      	ldr	r3, [pc, #36]	; (b6284 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b625e:	681b      	ldr	r3, [r3, #0]
   b6260:	b14b      	cbz	r3, b6276 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6262:	b003      	add	sp, #12
   b6264:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6268:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b626a:	f7ff ffe5 	bl	b6238 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b626e:	b003      	add	sp, #12
   b6270:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6274:	2300      	movs	r3, #0
   b6276:	9300      	str	r3, [sp, #0]
   b6278:	461a      	mov	r2, r3
   b627a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b627e:	f7fe fd3d 	bl	b4cfc <system_ctrl_set_result>
}
   b6282:	e7f4      	b.n	b626e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6284:	2003e6e4 	.word	0x2003e6e4

000b6288 <module_user_init_hook>:
{
   b6288:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b628a:	4812      	ldr	r0, [pc, #72]	; (b62d4 <module_user_init_hook+0x4c>)
   b628c:	2100      	movs	r1, #0
   b628e:	f7fe fdef 	bl	b4e70 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6292:	4b11      	ldr	r3, [pc, #68]	; (b62d8 <module_user_init_hook+0x50>)
   b6294:	681a      	ldr	r2, [r3, #0]
   b6296:	4b11      	ldr	r3, [pc, #68]	; (b62dc <module_user_init_hook+0x54>)
   b6298:	429a      	cmp	r2, r3
   b629a:	4b11      	ldr	r3, [pc, #68]	; (b62e0 <module_user_init_hook+0x58>)
   b629c:	bf0c      	ite	eq
   b629e:	2201      	moveq	r2, #1
   b62a0:	2200      	movne	r2, #0
   b62a2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b62a4:	d001      	beq.n	b62aa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b62a6:	f7ff ffb1 	bl	b620c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b62aa:	f7fe fb8d 	bl	b49c8 <HAL_RNG_GetRandomNumber>
   b62ae:	4604      	mov	r4, r0
    srand(seed);
   b62b0:	f001 fb82 	bl	b79b8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b62b4:	4b0b      	ldr	r3, [pc, #44]	; (b62e4 <module_user_init_hook+0x5c>)
   b62b6:	b113      	cbz	r3, b62be <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b62b8:	4620      	mov	r0, r4
   b62ba:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b62be:	2100      	movs	r1, #0
   b62c0:	4808      	ldr	r0, [pc, #32]	; (b62e4 <module_user_init_hook+0x5c>)
   b62c2:	f7fe fd95 	bl	b4df0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b62c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b62ca:	4807      	ldr	r0, [pc, #28]	; (b62e8 <module_user_init_hook+0x60>)
   b62cc:	2100      	movs	r1, #0
   b62ce:	f7fe bd0b 	b.w	b4ce8 <system_ctrl_set_app_request_handler>
   b62d2:	bf00      	nop
   b62d4:	000b61b5 	.word	0x000b61b5
   b62d8:	2003f400 	.word	0x2003f400
   b62dc:	9a271c1e 	.word	0x9a271c1e
   b62e0:	2003e6e0 	.word	0x2003e6e0
   b62e4:	00000000 	.word	0x00000000
   b62e8:	000b6251 	.word	0x000b6251

000b62ec <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b62ec:	4770      	bx	lr

000b62ee <_ZN9IPAddressD0Ev>:
   b62ee:	b510      	push	{r4, lr}
   b62f0:	2118      	movs	r1, #24
   b62f2:	4604      	mov	r4, r0
   b62f4:	f7fd fee3 	bl	b40be <_ZdlPvj>
   b62f8:	4620      	mov	r0, r4
   b62fa:	bd10      	pop	{r4, pc}

000b62fc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b62fc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b62fe:	7d03      	ldrb	r3, [r0, #20]
   b6300:	2b06      	cmp	r3, #6
{
   b6302:	b08d      	sub	sp, #52	; 0x34
   b6304:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6306:	f100 0704 	add.w	r7, r0, #4
   b630a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b630e:	d012      	beq.n	b6336 <_ZNK9IPAddress7printToER5Print+0x3a>
   b6310:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6314:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6318:	220a      	movs	r2, #10
   b631a:	4630      	mov	r0, r6
   b631c:	f7fe ff39 	bl	b5192 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6320:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6322:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6324:	d019      	beq.n	b635a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6326:	2c00      	cmp	r4, #0
   b6328:	d0f4      	beq.n	b6314 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b632a:	212e      	movs	r1, #46	; 0x2e
   b632c:	4630      	mov	r0, r6
   b632e:	f7fe ff17 	bl	b5160 <_ZN5Print5printEc>
   b6332:	4404      	add	r4, r0
   b6334:	e7ee      	b.n	b6314 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6336:	232f      	movs	r3, #47	; 0x2f
   b6338:	466a      	mov	r2, sp
   b633a:	4639      	mov	r1, r7
   b633c:	200a      	movs	r0, #10
		buf[0] = 0;
   b633e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6342:	f7fe fb79 	bl	b4a38 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6346:	4668      	mov	r0, sp
   b6348:	f7fd fe72 	bl	b4030 <strlen>
   b634c:	6833      	ldr	r3, [r6, #0]
   b634e:	4602      	mov	r2, r0
   b6350:	68db      	ldr	r3, [r3, #12]
   b6352:	4669      	mov	r1, sp
   b6354:	4630      	mov	r0, r6
   b6356:	4798      	blx	r3
   b6358:	4604      	mov	r4, r0
    }
    return n;
}
   b635a:	4620      	mov	r0, r4
   b635c:	b00d      	add	sp, #52	; 0x34
   b635e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6360 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6360:	b510      	push	{r4, lr}
   b6362:	4b05      	ldr	r3, [pc, #20]	; (b6378 <_ZN9IPAddressC1Ev+0x18>)
   b6364:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6366:	2211      	movs	r2, #17
   b6368:	f840 3b04 	str.w	r3, [r0], #4
   b636c:	2100      	movs	r1, #0
   b636e:	f001 fb1b 	bl	b79a8 <memset>
}
   b6372:	4620      	mov	r0, r4
   b6374:	bd10      	pop	{r4, pc}
   b6376:	bf00      	nop
   b6378:	000b7f50 	.word	0x000b7f50

000b637c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b637c:	4603      	mov	r3, r0
   b637e:	4a07      	ldr	r2, [pc, #28]	; (b639c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6380:	b510      	push	{r4, lr}
   b6382:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6386:	f101 0210 	add.w	r2, r1, #16
   b638a:	f851 4b04 	ldr.w	r4, [r1], #4
   b638e:	f843 4b04 	str.w	r4, [r3], #4
   b6392:	4291      	cmp	r1, r2
   b6394:	d1f9      	bne.n	b638a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6396:	780a      	ldrb	r2, [r1, #0]
   b6398:	701a      	strb	r2, [r3, #0]
}
   b639a:	bd10      	pop	{r4, pc}
   b639c:	000b7f50 	.word	0x000b7f50

000b63a0 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b63a0:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b63a2:	2b04      	cmp	r3, #4
   b63a4:	d104      	bne.n	b63b0 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b63a6:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b63a8:	3800      	subs	r0, #0
   b63aa:	bf18      	it	ne
   b63ac:	2001      	movne	r0, #1
   b63ae:	4770      	bx	lr
    } else if (version() == 6) {
   b63b0:	2b06      	cmp	r3, #6
   b63b2:	d107      	bne.n	b63c4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b63b4:	6843      	ldr	r3, [r0, #4]
   b63b6:	b93b      	cbnz	r3, b63c8 <_ZNK9IPAddresscvbEv+0x28>
   b63b8:	6883      	ldr	r3, [r0, #8]
   b63ba:	b92b      	cbnz	r3, b63c8 <_ZNK9IPAddresscvbEv+0x28>
   b63bc:	68c3      	ldr	r3, [r0, #12]
   b63be:	b91b      	cbnz	r3, b63c8 <_ZNK9IPAddresscvbEv+0x28>
   b63c0:	6900      	ldr	r0, [r0, #16]
   b63c2:	e7f1      	b.n	b63a8 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b63c4:	2000      	movs	r0, #0
   b63c6:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b63c8:	2001      	movs	r0, #1
}
   b63ca:	4770      	bx	lr

000b63cc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b63cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b63ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b63d2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b63d6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b63da:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b63de:	2304      	movs	r3, #4
   b63e0:	6041      	str	r1, [r0, #4]
   b63e2:	7503      	strb	r3, [r0, #20]
}
   b63e4:	bd10      	pop	{r4, pc}
	...

000b63e8 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   b63e8:	b513      	push	{r0, r1, r4, lr}
   b63ea:	4c04      	ldr	r4, [pc, #16]	; (b63fc <_ZN9IPAddressC1Ehhhh+0x14>)
   b63ec:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   b63ee:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b63f2:	9400      	str	r4, [sp, #0]
   b63f4:	f7ff ffea 	bl	b63cc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b63f8:	b002      	add	sp, #8
   b63fa:	bd10      	pop	{r4, pc}
   b63fc:	000b7f50 	.word	0x000b7f50

000b6400 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6400:	b507      	push	{r0, r1, r2, lr}
   b6402:	4b06      	ldr	r3, [pc, #24]	; (b641c <_ZN9IPAddressC1EPKh+0x1c>)
   b6404:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6406:	78cb      	ldrb	r3, [r1, #3]
   b6408:	9300      	str	r3, [sp, #0]
   b640a:	788b      	ldrb	r3, [r1, #2]
   b640c:	784a      	ldrb	r2, [r1, #1]
   b640e:	7809      	ldrb	r1, [r1, #0]
   b6410:	f7ff ffdc 	bl	b63cc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6414:	b003      	add	sp, #12
   b6416:	f85d fb04 	ldr.w	pc, [sp], #4
   b641a:	bf00      	nop
   b641c:	000b7f50 	.word	0x000b7f50

000b6420 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6420:	7441      	strb	r1, [r0, #17]
}
   b6422:	4770      	bx	lr

000b6424 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6424:	4770      	bx	lr

000b6426 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6426:	4770      	bx	lr

000b6428 <_ZN9USBSerial4readEv>:
{
   b6428:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b642a:	2100      	movs	r1, #0
   b642c:	7c00      	ldrb	r0, [r0, #16]
   b642e:	f7fe fc0b 	bl	b4c48 <HAL_USB_USART_Receive_Data>
}
   b6432:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6436:	bd08      	pop	{r3, pc}

000b6438 <_ZN9USBSerial4peekEv>:
{
   b6438:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b643a:	2101      	movs	r1, #1
   b643c:	7c00      	ldrb	r0, [r0, #16]
   b643e:	f7fe fc03 	bl	b4c48 <HAL_USB_USART_Receive_Data>
}
   b6442:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6446:	bd08      	pop	{r3, pc}

000b6448 <_ZN9USBSerial17availableForWriteEv>:
{
   b6448:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b644a:	7c00      	ldrb	r0, [r0, #16]
   b644c:	f7fe fbf4 	bl	b4c38 <HAL_USB_USART_Available_Data_For_Write>
}
   b6450:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6454:	bd08      	pop	{r3, pc}

000b6456 <_ZN9USBSerial9availableEv>:
{
   b6456:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6458:	7c00      	ldrb	r0, [r0, #16]
   b645a:	f7fe fbe5 	bl	b4c28 <HAL_USB_USART_Available_Data>
}
   b645e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6462:	bd08      	pop	{r3, pc}

000b6464 <_ZN9USBSerial5writeEh>:
{
   b6464:	b513      	push	{r0, r1, r4, lr}
   b6466:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6468:	7c00      	ldrb	r0, [r0, #16]
{
   b646a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b646c:	f7fe fbe4 	bl	b4c38 <HAL_USB_USART_Available_Data_For_Write>
   b6470:	2800      	cmp	r0, #0
   b6472:	9901      	ldr	r1, [sp, #4]
   b6474:	dc01      	bgt.n	b647a <_ZN9USBSerial5writeEh+0x16>
   b6476:	7c60      	ldrb	r0, [r4, #17]
   b6478:	b120      	cbz	r0, b6484 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b647a:	7c20      	ldrb	r0, [r4, #16]
   b647c:	f7fe fbec 	bl	b4c58 <HAL_USB_USART_Send_Data>
   b6480:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6484:	b002      	add	sp, #8
   b6486:	bd10      	pop	{r4, pc}

000b6488 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6488:	7c00      	ldrb	r0, [r0, #16]
   b648a:	f7fe bbed 	b.w	b4c68 <HAL_USB_USART_Flush_Data>

000b648e <_ZN9USBSerialD0Ev>:
   b648e:	b510      	push	{r4, lr}
   b6490:	2114      	movs	r1, #20
   b6492:	4604      	mov	r4, r0
   b6494:	f7fd fe13 	bl	b40be <_ZdlPvj>
   b6498:	4620      	mov	r0, r4
   b649a:	bd10      	pop	{r4, pc}

000b649c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b649c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b649e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b64a2:	4604      	mov	r4, r0
   b64a4:	4608      	mov	r0, r1
   b64a6:	2100      	movs	r1, #0
   b64a8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b64ac:	4b04      	ldr	r3, [pc, #16]	; (b64c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b64ae:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b64b0:	2301      	movs	r3, #1
  _serial = serial;
   b64b2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b64b4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b64b6:	4611      	mov	r1, r2
   b64b8:	f7fe fb9e 	bl	b4bf8 <HAL_USB_USART_Init>
}
   b64bc:	4620      	mov	r0, r4
   b64be:	bd10      	pop	{r4, pc}
   b64c0:	000b7f64 	.word	0x000b7f64

000b64c4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b64c4:	7c00      	ldrb	r0, [r0, #16]
   b64c6:	2200      	movs	r2, #0
   b64c8:	f7fe bb9e 	b.w	b4c08 <HAL_USB_USART_Begin>

000b64cc <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b64cc:	7c00      	ldrb	r0, [r0, #16]
   b64ce:	f7fe bba3 	b.w	b4c18 <HAL_USB_USART_End>

000b64d2 <_Z19acquireSerialBufferv>:
{
   b64d2:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b64d4:	2214      	movs	r2, #20
{
   b64d6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b64d8:	2100      	movs	r1, #0
   b64da:	f001 fa65 	bl	b79a8 <memset>
}
   b64de:	4620      	mov	r0, r4
   b64e0:	bd10      	pop	{r4, pc}
	...

000b64e4 <_Z16_fetch_usbserialv>:
{
   b64e4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b64e6:	4c0f      	ldr	r4, [pc, #60]	; (b6524 <_Z16_fetch_usbserialv+0x40>)
{
   b64e8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b64ea:	a803      	add	r0, sp, #12
   b64ec:	f7ff fff1 	bl	b64d2 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b64f0:	7821      	ldrb	r1, [r4, #0]
   b64f2:	f3bf 8f5b 	dmb	ish
   b64f6:	f011 0101 	ands.w	r1, r1, #1
   b64fa:	d10f      	bne.n	b651c <_Z16_fetch_usbserialv+0x38>
   b64fc:	4620      	mov	r0, r4
   b64fe:	9101      	str	r1, [sp, #4]
   b6500:	f7fd fdec 	bl	b40dc <__cxa_guard_acquire>
   b6504:	9901      	ldr	r1, [sp, #4]
   b6506:	b148      	cbz	r0, b651c <_Z16_fetch_usbserialv+0x38>
   b6508:	aa03      	add	r2, sp, #12
   b650a:	4807      	ldr	r0, [pc, #28]	; (b6528 <_Z16_fetch_usbserialv+0x44>)
   b650c:	f7ff ffc6 	bl	b649c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6510:	4620      	mov	r0, r4
   b6512:	f7fd fde8 	bl	b40e6 <__cxa_guard_release>
   b6516:	4805      	ldr	r0, [pc, #20]	; (b652c <_Z16_fetch_usbserialv+0x48>)
   b6518:	f001 fa10 	bl	b793c <atexit>
	return _usbserial;
}
   b651c:	4802      	ldr	r0, [pc, #8]	; (b6528 <_Z16_fetch_usbserialv+0x44>)
   b651e:	b008      	add	sp, #32
   b6520:	bd10      	pop	{r4, pc}
   b6522:	bf00      	nop
   b6524:	2003e6e8 	.word	0x2003e6e8
   b6528:	2003e6ec 	.word	0x2003e6ec
   b652c:	000b6425 	.word	0x000b6425

000b6530 <_Z21attachInterruptDirect9IRQn_TypePFvvEb>:
/*
 * System Interrupts
 */
bool attachInterruptDirect(IRQn_Type irq, hal_interrupt_direct_handler_t handler, bool enable)
{
    const bool ok = !hal_interrupt_set_direct_handler(irq, handler, enable ? HAL_INTERRUPT_DIRECT_FLAG_ENABLE : HAL_INTERRUPT_DIRECT_FLAG_NONE, nullptr);
   b6530:	2a00      	cmp	r2, #0
{
   b6532:	b508      	push	{r3, lr}
    const bool ok = !hal_interrupt_set_direct_handler(irq, handler, enable ? HAL_INTERRUPT_DIRECT_FLAG_ENABLE : HAL_INTERRUPT_DIRECT_FLAG_NONE, nullptr);
   b6534:	f04f 0300 	mov.w	r3, #0
   b6538:	bf14      	ite	ne
   b653a:	2204      	movne	r2, #4
   b653c:	461a      	moveq	r2, r3
   b653e:	f7fe fa31 	bl	b49a4 <hal_interrupt_set_direct_handler>
    return ok;
}
   b6542:	fab0 f080 	clz	r0, r0
   b6546:	0940      	lsrs	r0, r0, #5
   b6548:	bd08      	pop	{r3, pc}

000b654a <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b654a:	4770      	bx	lr

000b654c <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b654c:	7441      	strb	r1, [r0, #17]
}
   b654e:	4770      	bx	lr

000b6550 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6550:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6552:	7c00      	ldrb	r0, [r0, #16]
   b6554:	f7fe fac0 	bl	b4ad8 <hal_usart_available_data_for_write>
}
   b6558:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b655c:	bd08      	pop	{r3, pc}

000b655e <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b655e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6560:	7c00      	ldrb	r0, [r0, #16]
   b6562:	f7fe fa91 	bl	b4a88 <hal_usart_available>
}
   b6566:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b656a:	bd08      	pop	{r3, pc}

000b656c <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b656c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b656e:	7c00      	ldrb	r0, [r0, #16]
   b6570:	f7fe fa9a 	bl	b4aa8 <hal_usart_peek>
}
   b6574:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6578:	bd08      	pop	{r3, pc}

000b657a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b657a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b657c:	7c00      	ldrb	r0, [r0, #16]
   b657e:	f7fe fa8b 	bl	b4a98 <hal_usart_read>
}
   b6582:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6586:	bd08      	pop	{r3, pc}

000b6588 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6588:	7c00      	ldrb	r0, [r0, #16]
   b658a:	f7fe ba95 	b.w	b4ab8 <hal_usart_flush>

000b658e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b658e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6590:	7c45      	ldrb	r5, [r0, #17]
{
   b6592:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6594:	b12d      	cbz	r5, b65a2 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6596:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6598:	b003      	add	sp, #12
   b659a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b659e:	f7fe ba6b 	b.w	b4a78 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b65a2:	7c00      	ldrb	r0, [r0, #16]
   b65a4:	9101      	str	r1, [sp, #4]
   b65a6:	f7fe fa97 	bl	b4ad8 <hal_usart_available_data_for_write>
   b65aa:	2800      	cmp	r0, #0
   b65ac:	9901      	ldr	r1, [sp, #4]
   b65ae:	dcf2      	bgt.n	b6596 <_ZN11USARTSerial5writeEh+0x8>
}
   b65b0:	4628      	mov	r0, r5
   b65b2:	b003      	add	sp, #12
   b65b4:	bd30      	pop	{r4, r5, pc}

000b65b6 <_ZN11USARTSerialD0Ev>:
   b65b6:	b510      	push	{r4, lr}
   b65b8:	2114      	movs	r1, #20
   b65ba:	4604      	mov	r4, r0
   b65bc:	f7fd fd7f 	bl	b40be <_ZdlPvj>
   b65c0:	4620      	mov	r0, r4
   b65c2:	bd10      	pop	{r4, pc}

000b65c4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b65c4:	b510      	push	{r4, lr}
   b65c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b65ca:	4604      	mov	r4, r0
   b65cc:	4608      	mov	r0, r1
   b65ce:	4611      	mov	r1, r2
   b65d0:	2200      	movs	r2, #0
   b65d2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b65d6:	4b04      	ldr	r3, [pc, #16]	; (b65e8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b65d8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b65da:	2301      	movs	r3, #1
  _serial = serial;
   b65dc:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b65de:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b65e0:	f7fe fa8a 	bl	b4af8 <hal_usart_init_ex>
}
   b65e4:	4620      	mov	r0, r4
   b65e6:	bd10      	pop	{r4, pc}
   b65e8:	000b7f98 	.word	0x000b7f98

000b65ec <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b65ec:	7c00      	ldrb	r0, [r0, #16]
   b65ee:	2300      	movs	r3, #0
   b65f0:	f7fe ba7a 	b.w	b4ae8 <hal_usart_begin_config>

000b65f4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b65f4:	2200      	movs	r2, #0
   b65f6:	f7ff bff9 	b.w	b65ec <_ZN11USARTSerial5beginEmm>

000b65fa <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b65fa:	7c00      	ldrb	r0, [r0, #16]
   b65fc:	f7fe ba34 	b.w	b4a68 <hal_usart_end>

000b6600 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6600:	4770      	bx	lr

000b6602 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6604:	4606      	mov	r6, r0
   b6606:	4615      	mov	r5, r2
   b6608:	460c      	mov	r4, r1
   b660a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b660c:	42bc      	cmp	r4, r7
   b660e:	d006      	beq.n	b661e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6610:	6833      	ldr	r3, [r6, #0]
   b6612:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6616:	689b      	ldr	r3, [r3, #8]
   b6618:	4630      	mov	r0, r6
   b661a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b661c:	e7f6      	b.n	b660c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b661e:	4628      	mov	r0, r5
   b6620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6622 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6622:	7c00      	ldrb	r0, [r0, #16]
   b6624:	2200      	movs	r2, #0
   b6626:	f7fe ba6f 	b.w	b4b08 <hal_i2c_write>

000b662a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b662a:	7c00      	ldrb	r0, [r0, #16]
   b662c:	2100      	movs	r1, #0
   b662e:	f7fe ba73 	b.w	b4b18 <hal_i2c_available>

000b6632 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6632:	7c00      	ldrb	r0, [r0, #16]
   b6634:	2100      	movs	r1, #0
   b6636:	f7fe ba77 	b.w	b4b28 <hal_i2c_read>

000b663a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b663a:	7c00      	ldrb	r0, [r0, #16]
   b663c:	2100      	movs	r1, #0
   b663e:	f7fe ba7b 	b.w	b4b38 <hal_i2c_peek>

000b6642 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6642:	7c00      	ldrb	r0, [r0, #16]
   b6644:	2100      	movs	r1, #0
   b6646:	f7fe ba7f 	b.w	b4b48 <hal_i2c_flush>

000b664a <_ZN7TwoWireD0Ev>:
   b664a:	b510      	push	{r4, lr}
   b664c:	2114      	movs	r1, #20
   b664e:	4604      	mov	r4, r0
   b6650:	f7fd fd35 	bl	b40be <_ZdlPvj>
   b6654:	4620      	mov	r0, r4
   b6656:	bd10      	pop	{r4, pc}

000b6658 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6658:	b538      	push	{r3, r4, r5, lr}
   b665a:	4604      	mov	r4, r0
   b665c:	4615      	mov	r5, r2
   b665e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6662:	2200      	movs	r2, #0
   b6664:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6668:	4b09      	ldr	r3, [pc, #36]	; (b6690 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b666a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b666c:	4608      	mov	r0, r1
   b666e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6670:	4629      	mov	r1, r5
   b6672:	f7fe fa79 	bl	b4b68 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6676:	30bf      	adds	r0, #191	; 0xbf
   b6678:	d108      	bne.n	b668c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b667a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b667c:	07db      	lsls	r3, r3, #31
   b667e:	d505      	bpl.n	b668c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6680:	6868      	ldr	r0, [r5, #4]
   b6682:	f7fe fbc5 	bl	b4e10 <free>
    free(conf.tx_buffer);
   b6686:	68e8      	ldr	r0, [r5, #12]
   b6688:	f7fe fbc2 	bl	b4e10 <free>
}
   b668c:	4620      	mov	r0, r4
   b668e:	bd38      	pop	{r3, r4, r5, pc}
   b6690:	000b7fcc 	.word	0x000b7fcc

000b6694 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b6694:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6696:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b6698:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b669c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   b669e:	2201      	movs	r2, #1
   b66a0:	f04f 33ff 	mov.w	r3, #4294967295
   b66a4:	f10d 0107 	add.w	r1, sp, #7
   b66a8:	47a0      	blx	r4
}
   b66aa:	b002      	add	sp, #8
   b66ac:	bd10      	pop	{r4, pc}

000b66ae <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b66ae:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b66b0:	6803      	ldr	r3, [r0, #0]
   b66b2:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   b66b4:	f04f 33ff 	mov.w	r3, #4294967295
   b66b8:	46a4      	mov	ip, r4
}
   b66ba:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b66be:	4760      	bx	ip

000b66c0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b66c0:	b513      	push	{r0, r1, r4, lr}
   b66c2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b66c4:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b66c6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b66ca:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b66cc:	f10d 0107 	add.w	r1, sp, #7
   b66d0:	2201      	movs	r2, #1
   b66d2:	47a0      	blx	r4
}
   b66d4:	b002      	add	sp, #8
   b66d6:	bd10      	pop	{r4, pc}

000b66d8 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b66d8:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b66da:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b66dc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b66e0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b66e4:	429a      	cmp	r2, r3
int TCPClient::read() {
   b66e6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b66e8:	d008      	beq.n	b66fc <_ZN9TCPClient4readEv+0x24>
   b66ea:	6963      	ldr	r3, [r4, #20]
   b66ec:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b66f0:	1c51      	adds	r1, r2, #1
   b66f2:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b66f6:	4413      	add	r3, r2
   b66f8:	7918      	ldrb	r0, [r3, #4]
}
   b66fa:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b66fc:	6803      	ldr	r3, [r0, #0]
   b66fe:	691b      	ldr	r3, [r3, #16]
   b6700:	4798      	blx	r3
   b6702:	2800      	cmp	r0, #0
   b6704:	d1f1      	bne.n	b66ea <_ZN9TCPClient4readEv+0x12>
   b6706:	f04f 30ff 	mov.w	r0, #4294967295
   b670a:	e7f6      	b.n	b66fa <_ZN9TCPClient4readEv+0x22>

000b670c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b670c:	4770      	bx	lr

000b670e <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b670e:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b6710:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b6712:	43c0      	mvns	r0, r0
   b6714:	0fc0      	lsrs	r0, r0, #31
   b6716:	4770      	bx	lr

000b6718 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6718:	4770      	bx	lr
	...

000b671c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b671c:	4b06      	ldr	r3, [pc, #24]	; (b6738 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b671e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6720:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6722:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6726:	d005      	beq.n	b6734 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6728:	4608      	mov	r0, r1
   b672a:	f000 fff5 	bl	b7718 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b672e:	2800      	cmp	r0, #0
   b6730:	bf08      	it	eq
   b6732:	2400      	moveq	r4, #0
      }
   b6734:	4620      	mov	r0, r4
   b6736:	bd10      	pop	{r4, pc}
   b6738:	000b7e38 	.word	0x000b7e38

000b673c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b673c:	b510      	push	{r4, lr}
   b673e:	21ac      	movs	r1, #172	; 0xac
   b6740:	4604      	mov	r4, r0
   b6742:	f7fd fcbc 	bl	b40be <_ZdlPvj>
   b6746:	4620      	mov	r0, r4
   b6748:	bd10      	pop	{r4, pc}

000b674a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b674a:	21ac      	movs	r1, #172	; 0xac
   b674c:	f7fd bcb7 	b.w	b40be <_ZdlPvj>

000b6750 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6754:	f04f 0800 	mov.w	r8, #0
   b6758:	b086      	sub	sp, #24
   b675a:	461c      	mov	r4, r3
   b675c:	f8c0 8004 	str.w	r8, [r0, #4]
   b6760:	4605      	mov	r5, r0
   b6762:	460e      	mov	r6, r1
   b6764:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6766:	4641      	mov	r1, r8
   b6768:	2210      	movs	r2, #16
   b676a:	a802      	add	r0, sp, #8
   b676c:	f001 f91c 	bl	b79a8 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6770:	1c63      	adds	r3, r4, #1
   b6772:	d009      	beq.n	b6788 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6778:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b677c:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6780:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6784:	435c      	muls	r4, r3
   b6786:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6788:	6968      	ldr	r0, [r5, #20]
   b678a:	2310      	movs	r3, #16
   b678c:	9300      	str	r3, [sp, #0]
   b678e:	6800      	ldr	r0, [r0, #0]
   b6790:	ab02      	add	r3, sp, #8
   b6792:	f241 0205 	movw	r2, #4101	; 0x1005
   b6796:	f640 71ff 	movw	r1, #4095	; 0xfff
   b679a:	f7fe f9ed 	bl	b4b78 <sock_setsockopt>
    if (ret < 0) {
   b679e:	2800      	cmp	r0, #0
   b67a0:	da07      	bge.n	b67b2 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b67a2:	f7fe fb55 	bl	b4e50 <__errno>
   b67a6:	6803      	ldr	r3, [r0, #0]
   b67a8:	606b      	str	r3, [r5, #4]
        return 0;
   b67aa:	2000      	movs	r0, #0
}
   b67ac:	b006      	add	sp, #24
   b67ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b67b2:	6968      	ldr	r0, [r5, #20]
   b67b4:	2300      	movs	r3, #0
   b67b6:	6800      	ldr	r0, [r0, #0]
   b67b8:	463a      	mov	r2, r7
   b67ba:	4631      	mov	r1, r6
   b67bc:	f7fe f9fc 	bl	b4bb8 <sock_send>
    if (ret < 0) {
   b67c0:	1e03      	subs	r3, r0, #0
   b67c2:	dbee      	blt.n	b67a2 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b67c4:	4618      	mov	r0, r3
   b67c6:	e7f1      	b.n	b67ac <_ZN9TCPClient5writeEPKhjm+0x5c>

000b67c8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b67c8:	b530      	push	{r4, r5, lr}
   b67ca:	b087      	sub	sp, #28
   b67cc:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b67ce:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b67d0:	4668      	mov	r0, sp
   b67d2:	f7ff fe15 	bl	b6400 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b67d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b67d8:	3404      	adds	r4, #4
   b67da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b67dc:	682b      	ldr	r3, [r5, #0]
   b67de:	7023      	strb	r3, [r4, #0]
    }
   b67e0:	b007      	add	sp, #28
   b67e2:	bd30      	pop	{r4, r5, pc}

000b67e4 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b67e4:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b67e6:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b67e8:	4b05      	ldr	r3, [pc, #20]	; (b6800 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b67ea:	4604      	mov	r4, r0
   b67ec:	358c      	adds	r5, #140	; 0x8c
   b67ee:	f844 3b04 	str.w	r3, [r4], #4
   b67f2:	4606      	mov	r6, r0
   b67f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b67f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b67f8:	682b      	ldr	r3, [r5, #0]
   b67fa:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b67fc:	4630      	mov	r0, r6
   b67fe:	bd70      	pop	{r4, r5, r6, pc}
   b6800:	000b7f50 	.word	0x000b7f50

000b6804 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6808:	4698      	mov	r8, r3
    stop();
   b680a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b680c:	b093      	sub	sp, #76	; 0x4c
   b680e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b6810:	2400      	movs	r4, #0
    stop();
   b6812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6814:	4606      	mov	r6, r0
   b6816:	4617      	mov	r7, r2
    stop();
   b6818:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b681a:	4628      	mov	r0, r5
   b681c:	466b      	mov	r3, sp
   b681e:	4622      	mov	r2, r4
   b6820:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b6822:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6824:	f7fe f88e 	bl	b4944 <netdb_getaddrinfo>
   b6828:	4605      	mov	r5, r0
   b682a:	2800      	cmp	r0, #0
   b682c:	d163      	bne.n	b68f6 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b682e:	9b00      	ldr	r3, [sp, #0]
   b6830:	2b00      	cmp	r3, #0
   b6832:	d04b      	beq.n	b68cc <_ZN9TCPClient7connectEPKctm+0xc8>
   b6834:	695b      	ldr	r3, [r3, #20]
   b6836:	2b00      	cmp	r3, #0
   b6838:	d048      	beq.n	b68cc <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b683a:	a806      	add	r0, sp, #24
   b683c:	f7ff fd90 	bl	b6360 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b6840:	9b00      	ldr	r3, [sp, #0]
   b6842:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6844:	7863      	ldrb	r3, [r4, #1]
   b6846:	2b02      	cmp	r3, #2
   b6848:	d104      	bne.n	b6854 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b684a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b684c:	a806      	add	r0, sp, #24
   b684e:	f7ff ffbb 	bl	b67c8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b6852:	e026      	b.n	b68a2 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6854:	2b0a      	cmp	r3, #10
   b6856:	d124      	bne.n	b68a2 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b6858:	2211      	movs	r2, #17
   b685a:	4629      	mov	r1, r5
   b685c:	a801      	add	r0, sp, #4
   b685e:	f001 f8a3 	bl	b79a8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6862:	68a3      	ldr	r3, [r4, #8]
   b6864:	2b00      	cmp	r3, #0
   b6866:	d038      	beq.n	b68da <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6868:	f104 0308 	add.w	r3, r4, #8
   b686c:	f10d 0c04 	add.w	ip, sp, #4
   b6870:	3418      	adds	r4, #24
   b6872:	6818      	ldr	r0, [r3, #0]
   b6874:	6859      	ldr	r1, [r3, #4]
   b6876:	4662      	mov	r2, ip
   b6878:	c203      	stmia	r2!, {r0, r1}
   b687a:	3308      	adds	r3, #8
   b687c:	42a3      	cmp	r3, r4
   b687e:	4694      	mov	ip, r2
   b6880:	d1f7      	bne.n	b6872 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b6882:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6884:	a901      	add	r1, sp, #4
   b6886:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b6888:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b688c:	f7ff fd76 	bl	b637c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6890:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6894:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6898:	ac07      	add	r4, sp, #28
   b689a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b689c:	f8dc 3000 	ldr.w	r3, [ip]
   b68a0:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b68a2:	a806      	add	r0, sp, #24
   b68a4:	f7ff fd7c 	bl	b63a0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b68a8:	b180      	cbz	r0, b68cc <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b68aa:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b68ac:	ad07      	add	r5, sp, #28
   b68ae:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
   b68b2:	4b12      	ldr	r3, [pc, #72]	; (b68fc <_ZN9TCPClient7connectEPKctm+0xf8>)
   b68b4:	930c      	str	r3, [sp, #48]	; 0x30
   b68b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b68b8:	ac0d      	add	r4, sp, #52	; 0x34
   b68ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b68bc:	682b      	ldr	r3, [r5, #0]
   b68be:	7023      	strb	r3, [r4, #0]
   b68c0:	463a      	mov	r2, r7
   b68c2:	4643      	mov	r3, r8
   b68c4:	a90c      	add	r1, sp, #48	; 0x30
   b68c6:	4630      	mov	r0, r6
   b68c8:	47c8      	blx	r9
   b68ca:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b68cc:	9800      	ldr	r0, [sp, #0]
   b68ce:	f7fe f831 	bl	b4934 <netdb_freeaddrinfo>
}
   b68d2:	4628      	mov	r0, r5
   b68d4:	b013      	add	sp, #76	; 0x4c
   b68d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b68da:	68e3      	ldr	r3, [r4, #12]
   b68dc:	2b00      	cmp	r3, #0
   b68de:	d1c3      	bne.n	b6868 <_ZN9TCPClient7connectEPKctm+0x64>
   b68e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b68e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b68e8:	f7fe f8ae 	bl	b4a48 <inet_htonl>
   b68ec:	4581      	cmp	r9, r0
   b68ee:	d1bb      	bne.n	b6868 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b68f0:	f104 0114 	add.w	r1, r4, #20
   b68f4:	e7aa      	b.n	b684c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b68f6:	4625      	mov	r5, r4
   b68f8:	e7e8      	b.n	b68cc <_ZN9TCPClient7connectEPKctm+0xc8>
   b68fa:	bf00      	nop
   b68fc:	000b7f50 	.word	0x000b7f50

000b6900 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b6900:	b538      	push	{r3, r4, r5, lr}
   b6902:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b6904:	681a      	ldr	r2, [r3, #0]
   b6906:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b6908:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b690a:	da10      	bge.n	b692e <_ZN9TCPClient9connectedEv+0x2e>
   b690c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6910:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6914:	429a      	cmp	r2, r3
   b6916:	d10a      	bne.n	b692e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b6918:	6803      	ldr	r3, [r0, #0]
   b691a:	691b      	ldr	r3, [r3, #16]
   b691c:	4798      	blx	r3
        if (!rv) {
   b691e:	4604      	mov	r4, r0
   b6920:	b928      	cbnz	r0, b692e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b6922:	682b      	ldr	r3, [r5, #0]
   b6924:	4628      	mov	r0, r5
   b6926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6928:	4798      	blx	r3
        rv = available();
   b692a:	4620      	mov	r0, r4
}
   b692c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b692e:	2001      	movs	r0, #1
   b6930:	e7fc      	b.n	b692c <_ZN9TCPClient9connectedEv+0x2c>

000b6932 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b6932:	b510      	push	{r4, lr}
   b6934:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6936:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b693a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b693e:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b6940:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6942:	d005      	beq.n	b6950 <_ZN9TCPClient4peekEv+0x1e>
   b6944:	6963      	ldr	r3, [r4, #20]
   b6946:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b694a:	4413      	add	r3, r2
   b694c:	7918      	ldrb	r0, [r3, #4]
}
   b694e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6950:	6803      	ldr	r3, [r0, #0]
   b6952:	691b      	ldr	r3, [r3, #16]
   b6954:	4798      	blx	r3
   b6956:	2800      	cmp	r0, #0
   b6958:	d1f4      	bne.n	b6944 <_ZN9TCPClient4peekEv+0x12>
   b695a:	f04f 30ff 	mov.w	r0, #4294967295
   b695e:	e7f6      	b.n	b694e <_ZN9TCPClient4peekEv+0x1c>

000b6960 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6962:	6943      	ldr	r3, [r0, #20]
   b6964:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b6966:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b696a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b696e:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6970:	4605      	mov	r5, r0
   b6972:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b6974:	d016      	beq.n	b69a4 <_ZN9TCPClient4readEPhj+0x44>
   b6976:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b6978:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b697c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b6980:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b6982:	42bc      	cmp	r4, r7
   b6984:	bf28      	it	cs
   b6986:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b6988:	3304      	adds	r3, #4
   b698a:	4622      	mov	r2, r4
   b698c:	4419      	add	r1, r3
   b698e:	4630      	mov	r0, r6
   b6990:	f000 ffe2 	bl	b7958 <memcpy>
   b6994:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b6996:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b699a:	4423      	add	r3, r4
   b699c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b69a0:	4620      	mov	r0, r4
   b69a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b69a4:	6803      	ldr	r3, [r0, #0]
   b69a6:	691b      	ldr	r3, [r3, #16]
   b69a8:	4798      	blx	r3
   b69aa:	2800      	cmp	r0, #0
   b69ac:	d1e3      	bne.n	b6976 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b69ae:	f04f 34ff 	mov.w	r4, #4294967295
   b69b2:	e7f5      	b.n	b69a0 <_ZN9TCPClient4readEPhj+0x40>

000b69b4 <_ZN9TCPClient12flush_bufferEv>:
   b69b4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b69b6:	2300      	movs	r3, #0
   b69b8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b69bc:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b69be:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b69c2:	4770      	bx	lr

000b69c4 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b69c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b69c6:	461f      	mov	r7, r3
    stop();
   b69c8:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b69ca:	460c      	mov	r4, r1
    stop();
   b69cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b69ce:	b08b      	sub	sp, #44	; 0x2c
   b69d0:	4605      	mov	r5, r0
   b69d2:	4616      	mov	r6, r2
    stop();
   b69d4:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b69d6:	7d23      	ldrb	r3, [r4, #20]
   b69d8:	2b04      	cmp	r3, #4
   b69da:	bf0c      	ite	eq
   b69dc:	2002      	moveq	r0, #2
   b69de:	200a      	movne	r0, #10
   b69e0:	2206      	movs	r2, #6
   b69e2:	2101      	movs	r1, #1
   b69e4:	f7fe f8f0 	bl	b4bc8 <sock_socket>
   b69e8:	696b      	ldr	r3, [r5, #20]
   b69ea:	6018      	str	r0, [r3, #0]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b69ec:	696b      	ldr	r3, [r5, #20]
   b69ee:	681b      	ldr	r3, [r3, #0]
   b69f0:	2b00      	cmp	r3, #0
   b69f2:	da07      	bge.n	b6a04 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
    NAMED_SCOPE_GUARD(done, {
   b69f4:	682b      	ldr	r3, [r5, #0]
   b69f6:	4628      	mov	r0, r5
   b69f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b69fa:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b69fc:	4798      	blx	r3
}
   b69fe:	4620      	mov	r0, r4
   b6a00:	b00b      	add	sp, #44	; 0x2c
   b6a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    flush_buffer();
   b6a04:	4628      	mov	r0, r5
   b6a06:	f7ff ffd5 	bl	b69b4 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b6a0a:	b1b7      	cbz	r7, b6a3a <_ZN9TCPClient7connectE9IPAddresstm+0x76>
        struct ifreq ifr = {};
   b6a0c:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6a0e:	a903      	add	r1, sp, #12
   b6a10:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b6a12:	9303      	str	r3, [sp, #12]
   b6a14:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6a18:	f7fd ffce 	bl	b49b8 <if_index_to_name>
   b6a1c:	2800      	cmp	r0, #0
   b6a1e:	d1e9      	bne.n	b69f4 <_ZN9TCPClient7connectE9IPAddresstm+0x30>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b6a20:	6968      	ldr	r0, [r5, #20]
   b6a22:	2306      	movs	r3, #6
   b6a24:	9300      	str	r3, [sp, #0]
   b6a26:	6800      	ldr	r0, [r0, #0]
   b6a28:	ab03      	add	r3, sp, #12
   b6a2a:	f241 020b 	movw	r2, #4107	; 0x100b
   b6a2e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6a32:	f7fe f8a1 	bl	b4b78 <sock_setsockopt>
   b6a36:	2800      	cmp	r0, #0
   b6a38:	d1dc      	bne.n	b69f4 <_ZN9TCPClient7connectE9IPAddresstm+0x30>
    sockaddr_storage saddr = {};
   b6a3a:	221c      	movs	r2, #28
   b6a3c:	2100      	movs	r1, #0
   b6a3e:	a803      	add	r0, sp, #12
   b6a40:	f000 ffb2 	bl	b79a8 <memset>
    if (ip.version() == 4) {
   b6a44:	7d23      	ldrb	r3, [r4, #20]
   b6a46:	2b04      	cmp	r3, #4
   b6a48:	d11d      	bne.n	b6a86 <_ZN9TCPClient7connectE9IPAddresstm+0xc2>
        s->sin_len = sizeof(saddr);
   b6a4a:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b6a4e:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b6a50:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b6a54:	f7fe f800 	bl	b4a58 <inet_htons>
   b6a58:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b6a5c:	6860      	ldr	r0, [r4, #4]
   b6a5e:	f7fd fff3 	bl	b4a48 <inet_htonl>
   b6a62:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b6a64:	696b      	ldr	r3, [r5, #20]
   b6a66:	221c      	movs	r2, #28
   b6a68:	6818      	ldr	r0, [r3, #0]
   b6a6a:	a903      	add	r1, sp, #12
   b6a6c:	f7fe f894 	bl	b4b98 <sock_connect>
   b6a70:	2800      	cmp	r0, #0
   b6a72:	d1bf      	bne.n	b69f4 <_ZN9TCPClient7connectE9IPAddresstm+0x30>
   b6a74:	3404      	adds	r4, #4
   b6a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6a78:	696d      	ldr	r5, [r5, #20]
   b6a7a:	358c      	adds	r5, #140	; 0x8c
   b6a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6a7e:	6823      	ldr	r3, [r4, #0]
   b6a80:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b6a82:	2401      	movs	r4, #1
   b6a84:	e7bb      	b.n	b69fe <_ZN9TCPClient7connectE9IPAddresstm+0x3a>
        s->sin6_len = sizeof(saddr);
   b6a86:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b6a8a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b6a8c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b6a90:	f7fd ffe2 	bl	b4a58 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6a94:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b6a96:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6a9a:	1d23      	adds	r3, r4, #4
   b6a9c:	f104 0714 	add.w	r7, r4, #20
   b6aa0:	6818      	ldr	r0, [r3, #0]
   b6aa2:	6859      	ldr	r1, [r3, #4]
   b6aa4:	4632      	mov	r2, r6
   b6aa6:	c203      	stmia	r2!, {r0, r1}
   b6aa8:	3308      	adds	r3, #8
   b6aaa:	42bb      	cmp	r3, r7
   b6aac:	4616      	mov	r6, r2
   b6aae:	d1f7      	bne.n	b6aa0 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>
   b6ab0:	e7d8      	b.n	b6a64 <_ZN9TCPClient7connectE9IPAddresstm+0xa0>
	...

000b6ab4 <_ZN9TCPClient9availableEv>:
{
   b6ab4:	b530      	push	{r4, r5, lr}
   b6ab6:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b6ab8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b6abc:	b08b      	sub	sp, #44	; 0x2c
   b6abe:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b6ac0:	b12b      	cbz	r3, b6ace <_ZN9TCPClient9availableEv+0x1a>
   b6ac2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b6ac6:	429a      	cmp	r2, r3
   b6ac8:	d101      	bne.n	b6ace <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b6aca:	f7ff ff73 	bl	b69b4 <_ZN9TCPClient12flush_bufferEv>
   b6ace:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b6ad0:	6808      	ldr	r0, [r1, #0]
   b6ad2:	2800      	cmp	r0, #0
   b6ad4:	db18      	blt.n	b6b08 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b6ad6:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b6ada:	2d7f      	cmp	r5, #127	; 0x7f
   b6adc:	d814      	bhi.n	b6b08 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b6ade:	3104      	adds	r1, #4
   b6ae0:	2308      	movs	r3, #8
   b6ae2:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b6ae6:	4429      	add	r1, r5
   b6ae8:	f7fe f85e 	bl	b4ba8 <sock_recv>
            if (ret > 0) {
   b6aec:	2800      	cmp	r0, #0
   b6aee:	dd13      	ble.n	b6b18 <_ZN9TCPClient9availableEv+0x64>
   b6af0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b6af2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6af6:	b90a      	cbnz	r2, b6afc <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b6af8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b6afc:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b6afe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6b02:	4410      	add	r0, r2
   b6b04:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b6b08:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b6b0a:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b6b0e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b6b12:	1ac0      	subs	r0, r0, r3
   b6b14:	b00b      	add	sp, #44	; 0x2c
   b6b16:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b6b18:	f7fe f99a 	bl	b4e50 <__errno>
   b6b1c:	6803      	ldr	r3, [r0, #0]
   b6b1e:	2b0b      	cmp	r3, #11
   b6b20:	d0f2      	beq.n	b6b08 <_ZN9TCPClient9availableEv+0x54>
   b6b22:	f7fe f995 	bl	b4e50 <__errno>
   b6b26:	6803      	ldr	r3, [r0, #0]
   b6b28:	2b0b      	cmp	r3, #11
   b6b2a:	d0ed      	beq.n	b6b08 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b6b2c:	2320      	movs	r3, #32
   b6b2e:	2500      	movs	r5, #0
   b6b30:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b6b34:	f7fe f98c 	bl	b4e50 <__errno>
   b6b38:	6803      	ldr	r3, [r0, #0]
   b6b3a:	9301      	str	r3, [sp, #4]
   b6b3c:	4b08      	ldr	r3, [pc, #32]	; (b6b60 <_ZN9TCPClient9availableEv+0xac>)
   b6b3e:	4909      	ldr	r1, [pc, #36]	; (b6b64 <_ZN9TCPClient9availableEv+0xb0>)
   b6b40:	9300      	str	r3, [sp, #0]
   b6b42:	aa02      	add	r2, sp, #8
   b6b44:	462b      	mov	r3, r5
   b6b46:	2032      	movs	r0, #50	; 0x32
   b6b48:	f7fe f89e 	bl	b4c88 <log_message>
                    sock_close(d_->sock);
   b6b4c:	6963      	ldr	r3, [r4, #20]
   b6b4e:	6818      	ldr	r0, [r3, #0]
   b6b50:	f7fe f81a 	bl	b4b88 <sock_close>
   b6b54:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b6b56:	f04f 32ff 	mov.w	r2, #4294967295
   b6b5a:	601a      	str	r2, [r3, #0]
   b6b5c:	e7d4      	b.n	b6b08 <_ZN9TCPClient9availableEv+0x54>
   b6b5e:	bf00      	nop
   b6b60:	000b7ff7 	.word	0x000b7ff7
   b6b64:	000b7ff0 	.word	0x000b7ff0

000b6b68 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b6b68:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b6b6a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b6b6c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b6b6e:	6818      	ldr	r0, [r3, #0]
   b6b70:	2800      	cmp	r0, #0
   b6b72:	db01      	blt.n	b6b78 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b6b74:	f7fe f808 	bl	b4b88 <sock_close>
   b6b78:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b6b7a:	f04f 32ff 	mov.w	r2, #4294967295
   b6b7e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b6b80:	6960      	ldr	r0, [r4, #20]
   b6b82:	2211      	movs	r2, #17
   b6b84:	2100      	movs	r1, #0
   b6b86:	308c      	adds	r0, #140	; 0x8c
   b6b88:	f000 ff0e 	bl	b79a8 <memset>
    flush_buffer();
   b6b8c:	4620      	mov	r0, r4
}
   b6b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b6b92:	f7ff bf0f 	b.w	b69b4 <_ZN9TCPClient12flush_bufferEv>

000b6b96 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b6b96:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b6b98:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b6b9a:	4604      	mov	r4, r0
          total(0) {
   b6b9c:	6001      	str	r1, [r0, #0]
   b6b9e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b6ba2:	3088      	adds	r0, #136	; 0x88
   b6ba4:	f7ff fbdc 	bl	b6360 <_ZN9IPAddressC1Ev>
}
   b6ba8:	4620      	mov	r0, r4
   b6baa:	bd10      	pop	{r4, pc}

000b6bac <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b6bac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6bae:	2300      	movs	r3, #0
   b6bb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6bb4:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b6bb8:	4a0e      	ldr	r2, [pc, #56]	; (b6bf4 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b6bba:	6103      	str	r3, [r0, #16]
   b6bbc:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6bbe:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b6bc0:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6bc2:	20ac      	movs	r0, #172	; 0xac
   b6bc4:	9101      	str	r1, [sp, #4]
   b6bc6:	f7fd fa76 	bl	b40b6 <_Znwj>
	  auto __pi = ::new (__mem)
   b6bca:	1e05      	subs	r5, r0, #0
   b6bcc:	f105 060c 	add.w	r6, r5, #12
   b6bd0:	d008      	beq.n	b6be4 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b6bd2:	2301      	movs	r3, #1
   b6bd4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6bd8:	4b07      	ldr	r3, [pc, #28]	; (b6bf8 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6bda:	9901      	ldr	r1, [sp, #4]
   b6bdc:	602b      	str	r3, [r5, #0]
   b6bde:	4630      	mov	r0, r6
   b6be0:	f7ff ffd9 	bl	b6b96 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b6be4:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b6be6:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b6bea:	f7ff fee3 	bl	b69b4 <_ZN9TCPClient12flush_bufferEv>
}
   b6bee:	b002      	add	sp, #8
   b6bf0:	bd70      	pop	{r4, r5, r6, pc}
   b6bf2:	bf00      	nop
   b6bf4:	000b802c 	.word	0x000b802c
   b6bf8:	000b8010 	.word	0x000b8010

000b6bfc <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b6bfc:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b6bfe:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b6c02:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b6c04:	f7ff ffd2 	bl	b6bac <_ZN9TCPClientC1Ei>
}
   b6c08:	4620      	mov	r0, r4
   b6c0a:	bd10      	pop	{r4, pc}

000b6c0c <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b6c0c:	b510      	push	{r4, lr}
   b6c0e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b6c10:	6800      	ldr	r0, [r0, #0]
   b6c12:	2800      	cmp	r0, #0
   b6c14:	db01      	blt.n	b6c1a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b6c16:	f7fd ffb7 	bl	b4b88 <sock_close>
    }
}
   b6c1a:	4620      	mov	r0, r4
   b6c1c:	bd10      	pop	{r4, pc}

000b6c1e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b6c1e:	300c      	adds	r0, #12
   b6c20:	f7ff bff4 	b.w	b6c0c <_ZN9TCPClient4DataD1Ev>

000b6c24 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6c24:	2200      	movs	r2, #0
   b6c26:	6840      	ldr	r0, [r0, #4]
   b6c28:	4611      	mov	r1, r2
   b6c2a:	f7fe b889 	b.w	b4d40 <network_ready>

000b6c2e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6c2e:	2200      	movs	r2, #0
   b6c30:	6840      	ldr	r0, [r0, #4]
   b6c32:	4611      	mov	r1, r2
   b6c34:	f7fe b8a4 	b.w	b4d80 <network_listening>

000b6c38 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6c38:	2200      	movs	r2, #0
   b6c3a:	6840      	ldr	r0, [r0, #4]
   b6c3c:	4611      	mov	r1, r2
   b6c3e:	f7fe b8af 	b.w	b4da0 <network_get_listen_timeout>

000b6c42 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6c42:	6840      	ldr	r0, [r0, #4]
   b6c44:	2200      	movs	r2, #0
   b6c46:	f7fe b8a3 	b.w	b4d90 <network_set_listen_timeout>

000b6c4a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6c4a:	6840      	ldr	r0, [r0, #4]
   b6c4c:	2200      	movs	r2, #0
   b6c4e:	f081 0101 	eor.w	r1, r1, #1
   b6c52:	f7fe b88d 	b.w	b4d70 <network_listen>

000b6c56 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6c56:	2300      	movs	r3, #0
   b6c58:	6840      	ldr	r0, [r0, #4]
   b6c5a:	461a      	mov	r2, r3
   b6c5c:	4619      	mov	r1, r3
   b6c5e:	f7fe b87f 	b.w	b4d60 <network_off>

000b6c62 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6c62:	2300      	movs	r3, #0
   b6c64:	6840      	ldr	r0, [r0, #4]
   b6c66:	461a      	mov	r2, r3
   b6c68:	4619      	mov	r1, r3
   b6c6a:	f7fe b871 	b.w	b4d50 <network_on>

000b6c6e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6c6e:	2200      	movs	r2, #0
   b6c70:	6840      	ldr	r0, [r0, #4]
   b6c72:	4611      	mov	r1, r2
   b6c74:	f7fe b854 	b.w	b4d20 <network_connecting>

000b6c78 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6c78:	6840      	ldr	r0, [r0, #4]
   b6c7a:	2200      	movs	r2, #0
   b6c7c:	2102      	movs	r1, #2
   b6c7e:	f7fe b857 	b.w	b4d30 <network_disconnect>

000b6c82 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6c82:	2300      	movs	r3, #0
   b6c84:	6840      	ldr	r0, [r0, #4]
   b6c86:	461a      	mov	r2, r3
   b6c88:	f7fe b842 	b.w	b4d10 <network_connect>

000b6c8c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6c8c:	4b02      	ldr	r3, [pc, #8]	; (b6c98 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6c8e:	2204      	movs	r2, #4
   b6c90:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6c92:	4a02      	ldr	r2, [pc, #8]	; (b6c9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6c94:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6c96:	4770      	bx	lr
   b6c98:	2003e700 	.word	0x2003e700
   b6c9c:	000b807c 	.word	0x000b807c

000b6ca0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6ca0:	2300      	movs	r3, #0
   b6ca2:	6840      	ldr	r0, [r0, #4]
   b6ca4:	461a      	mov	r2, r3
   b6ca6:	f7fe b833 	b.w	b4d10 <network_connect>

000b6caa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6caa:	6840      	ldr	r0, [r0, #4]
   b6cac:	2200      	movs	r2, #0
   b6cae:	2102      	movs	r1, #2
   b6cb0:	f7fe b83e 	b.w	b4d30 <network_disconnect>

000b6cb4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6cb4:	2200      	movs	r2, #0
   b6cb6:	6840      	ldr	r0, [r0, #4]
   b6cb8:	4611      	mov	r1, r2
   b6cba:	f7fe b831 	b.w	b4d20 <network_connecting>

000b6cbe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6cbe:	2200      	movs	r2, #0
   b6cc0:	6840      	ldr	r0, [r0, #4]
   b6cc2:	4611      	mov	r1, r2
   b6cc4:	f7fe b83c 	b.w	b4d40 <network_ready>

000b6cc8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6cc8:	2300      	movs	r3, #0
   b6cca:	6840      	ldr	r0, [r0, #4]
   b6ccc:	461a      	mov	r2, r3
   b6cce:	4619      	mov	r1, r3
   b6cd0:	f7fe b83e 	b.w	b4d50 <network_on>

000b6cd4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6cd4:	2300      	movs	r3, #0
   b6cd6:	6840      	ldr	r0, [r0, #4]
   b6cd8:	461a      	mov	r2, r3
   b6cda:	4619      	mov	r1, r3
   b6cdc:	f7fe b840 	b.w	b4d60 <network_off>

000b6ce0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6ce0:	6840      	ldr	r0, [r0, #4]
   b6ce2:	2100      	movs	r1, #0
   b6ce4:	f7fe b864 	b.w	b4db0 <network_is_on>

000b6ce8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6ce8:	6840      	ldr	r0, [r0, #4]
   b6cea:	2100      	movs	r1, #0
   b6cec:	f7fe b868 	b.w	b4dc0 <network_is_off>

000b6cf0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6cf0:	6840      	ldr	r0, [r0, #4]
   b6cf2:	2200      	movs	r2, #0
   b6cf4:	f081 0101 	eor.w	r1, r1, #1
   b6cf8:	f7fe b83a 	b.w	b4d70 <network_listen>

000b6cfc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6cfc:	6840      	ldr	r0, [r0, #4]
   b6cfe:	2200      	movs	r2, #0
   b6d00:	f7fe b846 	b.w	b4d90 <network_set_listen_timeout>

000b6d04 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6d04:	2200      	movs	r2, #0
   b6d06:	6840      	ldr	r0, [r0, #4]
   b6d08:	4611      	mov	r1, r2
   b6d0a:	f7fe b849 	b.w	b4da0 <network_get_listen_timeout>

000b6d0e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6d0e:	2200      	movs	r2, #0
   b6d10:	6840      	ldr	r0, [r0, #4]
   b6d12:	4611      	mov	r1, r2
   b6d14:	f7fe b834 	b.w	b4d80 <network_listening>

000b6d18 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
   b6d18:	6840      	ldr	r0, [r0, #4]
   b6d1a:	2100      	movs	r1, #0
   b6d1c:	f7fe b860 	b.w	b4de0 <network_is_preferred>

000b6d20 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6d24:	b095      	sub	sp, #84	; 0x54
   b6d26:	4614      	mov	r4, r2
   b6d28:	460d      	mov	r5, r1
   b6d2a:	4607      	mov	r7, r0
    IPAddress addr;
   b6d2c:	f7ff fb18 	bl	b6360 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6d30:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6d32:	221c      	movs	r2, #28
   b6d34:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6d36:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6d38:	f000 fe36 	bl	b79a8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6d3c:	2340      	movs	r3, #64	; 0x40
   b6d3e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6d40:	4620      	mov	r0, r4
   b6d42:	466b      	mov	r3, sp
   b6d44:	aa0c      	add	r2, sp, #48	; 0x30
   b6d46:	2100      	movs	r1, #0
   b6d48:	f7fd fdfc 	bl	b4944 <netdb_getaddrinfo>
    if (!r) {
   b6d4c:	4604      	mov	r4, r0
   b6d4e:	2800      	cmp	r0, #0
   b6d50:	d14b      	bne.n	b6dea <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6d52:	4602      	mov	r2, r0
   b6d54:	2101      	movs	r1, #1
   b6d56:	6868      	ldr	r0, [r5, #4]
   b6d58:	f7fd fff2 	bl	b4d40 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6d5c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6d5e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6d60:	4622      	mov	r2, r4
   b6d62:	6868      	ldr	r0, [r5, #4]
   b6d64:	f7fd ffec 	bl	b4d40 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6d68:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6d6a:	4681      	mov	r9, r0
        bool ok = false;
   b6d6c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6d6e:	2e00      	cmp	r6, #0
   b6d70:	d03b      	beq.n	b6dea <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6d72:	2900      	cmp	r1, #0
   b6d74:	d139      	bne.n	b6dea <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6d76:	6873      	ldr	r3, [r6, #4]
   b6d78:	2b02      	cmp	r3, #2
   b6d7a:	d003      	beq.n	b6d84 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6d7c:	2b0a      	cmp	r3, #10
   b6d7e:	d011      	beq.n	b6da4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6d80:	69f6      	ldr	r6, [r6, #28]
   b6d82:	e7f4      	b.n	b6d6e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6d84:	f1b8 0f00 	cmp.w	r8, #0
   b6d88:	d0fa      	beq.n	b6d80 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6d8a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6d8c:	a806      	add	r0, sp, #24
   b6d8e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6d90:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6d92:	f7ff fb35 	bl	b6400 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6d98:	1d3c      	adds	r4, r7, #4
   b6d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6d9c:	682b      	ldr	r3, [r5, #0]
   b6d9e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6da0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6da2:	e7ed      	b.n	b6d80 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6da4:	f1b9 0f00 	cmp.w	r9, #0
   b6da8:	d0ea      	beq.n	b6d80 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6daa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6dac:	2210      	movs	r2, #16
   b6dae:	a801      	add	r0, sp, #4
   b6db0:	f000 fdfa 	bl	b79a8 <memset>
                    a.v = 6;
   b6db4:	2306      	movs	r3, #6
   b6db6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6dba:	ad01      	add	r5, sp, #4
   b6dbc:	f104 0308 	add.w	r3, r4, #8
   b6dc0:	3418      	adds	r4, #24
   b6dc2:	6818      	ldr	r0, [r3, #0]
   b6dc4:	6859      	ldr	r1, [r3, #4]
   b6dc6:	462a      	mov	r2, r5
   b6dc8:	c203      	stmia	r2!, {r0, r1}
   b6dca:	3308      	adds	r3, #8
   b6dcc:	42a3      	cmp	r3, r4
   b6dce:	4615      	mov	r5, r2
   b6dd0:	d1f7      	bne.n	b6dc2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6dd2:	a901      	add	r1, sp, #4
   b6dd4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6dd6:	ad07      	add	r5, sp, #28
   b6dd8:	f7ff fad0 	bl	b637c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6dde:	1d3c      	adds	r4, r7, #4
   b6de0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6de2:	682b      	ldr	r3, [r5, #0]
   b6de4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6de6:	4649      	mov	r1, r9
   b6de8:	e7ca      	b.n	b6d80 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6dea:	9800      	ldr	r0, [sp, #0]
   b6dec:	f7fd fda2 	bl	b4934 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6df0:	4638      	mov	r0, r7
   b6df2:	b015      	add	sp, #84	; 0x54
   b6df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6df8 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
   b6df8:	3803      	subs	r0, #3
   b6dfa:	2802      	cmp	r0, #2
   b6dfc:	bf9a      	itte	ls
   b6dfe:	4b02      	ldrls	r3, [pc, #8]	; (b6e08 <_ZN5spark12NetworkClass4fromEm+0x10>)
   b6e00:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
   b6e04:	4801      	ldrhi	r0, [pc, #4]	; (b6e0c <_ZN5spark12NetworkClass4fromEm+0x14>)
}
   b6e06:	4770      	bx	lr
   b6e08:	000b80b8 	.word	0x000b80b8
   b6e0c:	2003e708 	.word	0x2003e708

000b6e10 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
   b6e10:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
   b6e12:	2200      	movs	r2, #0
   b6e14:	6840      	ldr	r0, [r0, #4]
   b6e16:	f7fd ffdb 	bl	b4dd0 <network_prefer>
}
   b6e1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
   b6e1e:	f7ff bfeb 	b.w	b6df8 <_ZN5spark12NetworkClass4fromEm>
	...

000b6e24 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6e24:	4b02      	ldr	r3, [pc, #8]	; (b6e30 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6e26:	4a03      	ldr	r2, [pc, #12]	; (b6e34 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6e28:	601a      	str	r2, [r3, #0]
   b6e2a:	2200      	movs	r2, #0
   b6e2c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b6e2e:	4770      	bx	lr
   b6e30:	2003e708 	.word	0x2003e708
   b6e34:	000b80cc 	.word	0x000b80cc

000b6e38 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b6e38:	f100 0310 	add.w	r3, r0, #16
   b6e3c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b6e3e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b6e42:	2901      	cmp	r1, #1
   b6e44:	4618      	mov	r0, r3
   b6e46:	d108      	bne.n	b6e5a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b6e48:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b6e4c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b6e50:	3a01      	subs	r2, #1
   b6e52:	f103 0310 	add.w	r3, r3, #16
   b6e56:	d1f2      	bne.n	b6e3e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b6e58:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b6e5a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b6e5c:	bf04      	itt	eq
   b6e5e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b6e62:	1852      	addeq	r2, r2, r1
   b6e64:	e7f4      	b.n	b6e50 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b6e66 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b6e66:	b40e      	push	{r1, r2, r3}
   b6e68:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6e6a:	b088      	sub	sp, #32
   b6e6c:	af00      	add	r7, sp, #0
   b6e6e:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6e72:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b6e74:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6e78:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b6e7a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6e7c:	462b      	mov	r3, r5
   b6e7e:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b6e80:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6e82:	f7fd ffd5 	bl	b4e30 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b6e86:	280f      	cmp	r0, #15
   b6e88:	687a      	ldr	r2, [r7, #4]
   b6e8a:	d91a      	bls.n	b6ec2 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b6e8c:	f100 0308 	add.w	r3, r0, #8
   b6e90:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b6e94:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b6e96:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6e9a:	1c41      	adds	r1, r0, #1
   b6e9c:	462b      	mov	r3, r5
   b6e9e:	4668      	mov	r0, sp
        va_start(args, fmt);
   b6ea0:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6ea2:	f7fd ffc5 	bl	b4e30 <vsnprintf>
        if (n > 0) {
   b6ea6:	1e02      	subs	r2, r0, #0
   b6ea8:	dd04      	ble.n	b6eb4 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b6eaa:	6823      	ldr	r3, [r4, #0]
   b6eac:	4669      	mov	r1, sp
   b6eae:	689b      	ldr	r3, [r3, #8]
   b6eb0:	4620      	mov	r0, r4
   b6eb2:	4798      	blx	r3
   b6eb4:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b6eb6:	3720      	adds	r7, #32
   b6eb8:	46bd      	mov	sp, r7
   b6eba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6ebe:	b003      	add	sp, #12
   b6ec0:	4770      	bx	lr
    } else if (n > 0) {
   b6ec2:	2800      	cmp	r0, #0
   b6ec4:	d0f7      	beq.n	b6eb6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b6ec6:	6823      	ldr	r3, [r4, #0]
   b6ec8:	4602      	mov	r2, r0
   b6eca:	689b      	ldr	r3, [r3, #8]
   b6ecc:	f107 0110 	add.w	r1, r7, #16
   b6ed0:	4620      	mov	r0, r4
   b6ed2:	4798      	blx	r3
}
   b6ed4:	e7ef      	b.n	b6eb6 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b6ed6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6ed6:	b538      	push	{r3, r4, r5, lr}
   b6ed8:	680b      	ldr	r3, [r1, #0]
   b6eda:	6003      	str	r3, [r0, #0]
   b6edc:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b6ede:	6843      	ldr	r3, [r0, #4]
   b6ee0:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6ee2:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b6ee4:	d008      	beq.n	b6ef8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b6ee6:	b115      	cbz	r5, b6eee <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b6ee8:	686b      	ldr	r3, [r5, #4]
   b6eea:	3301      	adds	r3, #1
   b6eec:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b6eee:	6860      	ldr	r0, [r4, #4]
   b6ef0:	b108      	cbz	r0, b6ef6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b6ef2:	f7fe f8cd 	bl	b5090 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b6ef6:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6ef8:	bd38      	pop	{r3, r4, r5, pc}

000b6efa <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   b6efa:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b6efc:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b6efe:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b6f02:	689b      	ldr	r3, [r3, #8]
   b6f04:	2201      	movs	r2, #1
   b6f06:	f10d 0107 	add.w	r1, sp, #7
   b6f0a:	4798      	blx	r3
}
   b6f0c:	b003      	add	sp, #12
   b6f0e:	f85d fb04 	ldr.w	pc, [sp], #4

000b6f12 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6f12:	460b      	mov	r3, r1
   b6f14:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b6f16:	2200      	movs	r2, #0
   b6f18:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b6f1a:	e9c0 2200 	strd	r2, r2, [r0]
   b6f1e:	4604      	mov	r4, r0
        t_ = t;
   b6f20:	6083      	str	r3, [r0, #8]
    if (t) {
   b6f22:	b90b      	cbnz	r3, b6f28 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b6f24:	4620      	mov	r0, r4
   b6f26:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b6f28:	f7ff ffd5 	bl	b6ed6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b6f2c:	e7fa      	b.n	b6f24 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b6f2e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b6f2e:	6883      	ldr	r3, [r0, #8]
   b6f30:	b1eb      	cbz	r3, b6f6e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b6f32:	781a      	ldrb	r2, [r3, #0]
   b6f34:	2a03      	cmp	r2, #3
   b6f36:	d81a      	bhi.n	b6f6e <_ZNK5spark9JSONValue4typeEv+0x40>
   b6f38:	e8df f002 	tbb	[pc, r2]
   b6f3c:	1b021704 	.word	0x1b021704
   b6f40:	2005      	movs	r0, #5
   b6f42:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b6f44:	6802      	ldr	r2, [r0, #0]
   b6f46:	685b      	ldr	r3, [r3, #4]
   b6f48:	6852      	ldr	r2, [r2, #4]
   b6f4a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b6f4c:	282d      	cmp	r0, #45	; 0x2d
   b6f4e:	d012      	beq.n	b6f76 <_ZNK5spark9JSONValue4typeEv+0x48>
   b6f50:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6f54:	2b09      	cmp	r3, #9
   b6f56:	d90e      	bls.n	b6f76 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b6f58:	2874      	cmp	r0, #116	; 0x74
   b6f5a:	d00e      	beq.n	b6f7a <_ZNK5spark9JSONValue4typeEv+0x4c>
   b6f5c:	2866      	cmp	r0, #102	; 0x66
   b6f5e:	d00c      	beq.n	b6f7a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b6f60:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b6f64:	4258      	negs	r0, r3
   b6f66:	4158      	adcs	r0, r3
   b6f68:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b6f6a:	2006      	movs	r0, #6
   b6f6c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b6f6e:	2000      	movs	r0, #0
   b6f70:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b6f72:	2004      	movs	r0, #4
   b6f74:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b6f76:	2003      	movs	r0, #3
   b6f78:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b6f7a:	2002      	movs	r0, #2
}
   b6f7c:	4770      	bx	lr

000b6f7e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b6f7e:	b510      	push	{r4, lr}
   b6f80:	4604      	mov	r4, r0
    switch (type()) {
   b6f82:	f7ff ffd4 	bl	b6f2e <_ZNK5spark9JSONValue4typeEv>
   b6f86:	2802      	cmp	r0, #2
   b6f88:	d00e      	beq.n	b6fa8 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b6f8a:	1ec3      	subs	r3, r0, #3
   b6f8c:	b2db      	uxtb	r3, r3
   b6f8e:	2b01      	cmp	r3, #1
   b6f90:	d814      	bhi.n	b6fbc <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b6f92:	6822      	ldr	r2, [r4, #0]
   b6f94:	68a3      	ldr	r3, [r4, #8]
   b6f96:	6850      	ldr	r0, [r2, #4]
   b6f98:	685b      	ldr	r3, [r3, #4]
}
   b6f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b6f9e:	220a      	movs	r2, #10
   b6fa0:	2100      	movs	r1, #0
   b6fa2:	4418      	add	r0, r3
   b6fa4:	f000 be00 	b.w	b7ba8 <strtol>
        const char* const s = d_->json + t_->start;
   b6fa8:	6822      	ldr	r2, [r4, #0]
   b6faa:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b6fac:	6852      	ldr	r2, [r2, #4]
   b6fae:	685b      	ldr	r3, [r3, #4]
   b6fb0:	5cd0      	ldrb	r0, [r2, r3]
   b6fb2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b6fb6:	4258      	negs	r0, r3
   b6fb8:	4158      	adcs	r0, r3
}
   b6fba:	bd10      	pop	{r4, pc}
    switch (type()) {
   b6fbc:	2000      	movs	r0, #0
   b6fbe:	e7fc      	b.n	b6fba <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b6fc0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6fc0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b6fc2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b6fc4:	e9c0 3300 	strd	r3, r3, [r0]
   b6fc8:	4604      	mov	r4, r0
        n_(0) {
   b6fca:	480e      	ldr	r0, [pc, #56]	; (b7004 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b6fcc:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b6fd0:	b1a9      	cbz	r1, b6ffe <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b6fd2:	780b      	ldrb	r3, [r1, #0]
   b6fd4:	2b03      	cmp	r3, #3
   b6fd6:	d006      	beq.n	b6fe6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b6fd8:	b98b      	cbnz	r3, b6ffe <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b6fda:	6813      	ldr	r3, [r2, #0]
   b6fdc:	6858      	ldr	r0, [r3, #4]
   b6fde:	684b      	ldr	r3, [r1, #4]
   b6fe0:	5cc3      	ldrb	r3, [r0, r3]
   b6fe2:	2b6e      	cmp	r3, #110	; 0x6e
   b6fe4:	d007      	beq.n	b6ff6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b6fe6:	6813      	ldr	r3, [r2, #0]
   b6fe8:	684d      	ldr	r5, [r1, #4]
   b6fea:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b6fec:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b6fee:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b6ff0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b6ff2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b6ff4:	60e3      	str	r3, [r4, #12]
   b6ff6:	4611      	mov	r1, r2
   b6ff8:	4620      	mov	r0, r4
   b6ffa:	f7ff ff6c 	bl	b6ed6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b6ffe:	4620      	mov	r0, r4
   b7000:	bd38      	pop	{r3, r4, r5, pc}
   b7002:	bf00      	nop
   b7004:	000b7eb2 	.word	0x000b7eb2

000b7008 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b7008:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b700a:	2500      	movs	r5, #0
   b700c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b700e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b7012:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b7016:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b701a:	4604      	mov	r4, r0
   b701c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b701e:	b14b      	cbz	r3, b7034 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b7020:	781a      	ldrb	r2, [r3, #0]
   b7022:	2a01      	cmp	r2, #1
   b7024:	d106      	bne.n	b7034 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b7026:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b702a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b702c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b702e:	6143      	str	r3, [r0, #20]
   b7030:	f7ff ff51 	bl	b6ed6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b7034:	4620      	mov	r0, r4
   b7036:	bd38      	pop	{r3, r4, r5, pc}

000b7038 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b7038:	b510      	push	{r4, lr}
    if (!n_) {
   b703a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b703c:	4604      	mov	r4, r0
    if (!n_) {
   b703e:	b163      	cbz	r3, b705a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b7040:	6880      	ldr	r0, [r0, #8]
   b7042:	60e0      	str	r0, [r4, #12]
    --n_;
   b7044:	3b01      	subs	r3, #1
    ++t_;
   b7046:	3010      	adds	r0, #16
   b7048:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b704a:	6120      	str	r0, [r4, #16]
    --n_;
   b704c:	6163      	str	r3, [r4, #20]
    if (n_) {
   b704e:	b113      	cbz	r3, b7056 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b7050:	f7ff fef2 	bl	b6e38 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b7054:	60a0      	str	r0, [r4, #8]
    return true;
   b7056:	2001      	movs	r0, #1
   b7058:	e000      	b.n	b705c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b705a:	4618      	mov	r0, r3
}
   b705c:	bd10      	pop	{r4, pc}

000b705e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b705e:	b510      	push	{r4, lr}
    write('}');
   b7060:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b7062:	4604      	mov	r4, r0
    write('}');
   b7064:	f7ff ff49 	bl	b6efa <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b7068:	2301      	movs	r3, #1
   b706a:	7123      	strb	r3, [r4, #4]
}
   b706c:	4620      	mov	r0, r4
   b706e:	bd10      	pop	{r4, pc}

000b7070 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b7070:	b508      	push	{r3, lr}
    switch (state_) {
   b7072:	7903      	ldrb	r3, [r0, #4]
   b7074:	2b01      	cmp	r3, #1
   b7076:	d002      	beq.n	b707e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b7078:	2b02      	cmp	r3, #2
   b707a:	d004      	beq.n	b7086 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b707c:	bd08      	pop	{r3, pc}
        write(',');
   b707e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b7080:	f7ff ff3b 	bl	b6efa <_ZN5spark10JSONWriter5writeEc>
}
   b7084:	e7fa      	b.n	b707c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b7086:	213a      	movs	r1, #58	; 0x3a
   b7088:	e7fa      	b.n	b7080 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b708a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b708a:	b510      	push	{r4, lr}
   b708c:	4604      	mov	r4, r0
    writeSeparator();
   b708e:	f7ff ffef 	bl	b7070 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b7092:	4620      	mov	r0, r4
   b7094:	217b      	movs	r1, #123	; 0x7b
   b7096:	f7ff ff30 	bl	b6efa <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b709a:	2300      	movs	r3, #0
   b709c:	7123      	strb	r3, [r4, #4]
}
   b709e:	4620      	mov	r0, r4
   b70a0:	bd10      	pop	{r4, pc}
	...

000b70a4 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b70a4:	b513      	push	{r0, r1, r4, lr}
   b70a6:	4604      	mov	r4, r0
   b70a8:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b70aa:	f7ff ffe1 	bl	b7070 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b70ae:	6823      	ldr	r3, [r4, #0]
   b70b0:	9a01      	ldr	r2, [sp, #4]
   b70b2:	68db      	ldr	r3, [r3, #12]
   b70b4:	4903      	ldr	r1, [pc, #12]	; (b70c4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b70b6:	4620      	mov	r0, r4
   b70b8:	4798      	blx	r3
    state_ = NEXT;
   b70ba:	2301      	movs	r3, #1
}
   b70bc:	4620      	mov	r0, r4
    state_ = NEXT;
   b70be:	7123      	strb	r3, [r4, #4]
}
   b70c0:	b002      	add	sp, #8
   b70c2:	bd10      	pop	{r4, pc}
   b70c4:	000b8004 	.word	0x000b8004

000b70c8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b70c8:	b513      	push	{r0, r1, r4, lr}
   b70ca:	4604      	mov	r4, r0
   b70cc:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b70ce:	f7ff ffcf 	bl	b7070 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b70d2:	6823      	ldr	r3, [r4, #0]
   b70d4:	9a01      	ldr	r2, [sp, #4]
   b70d6:	68db      	ldr	r3, [r3, #12]
   b70d8:	4903      	ldr	r1, [pc, #12]	; (b70e8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b70da:	4620      	mov	r0, r4
   b70dc:	4798      	blx	r3
    state_ = NEXT;
   b70de:	2301      	movs	r3, #1
}
   b70e0:	4620      	mov	r0, r4
    state_ = NEXT;
   b70e2:	7123      	strb	r3, [r4, #4]
}
   b70e4:	b002      	add	sp, #8
   b70e6:	bd10      	pop	{r4, pc}
   b70e8:	000b8108 	.word	0x000b8108

000b70ec <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b70ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b70f0:	460d      	mov	r5, r1
    write('"');
   b70f2:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b70f4:	4690      	mov	r8, r2
   b70f6:	4604      	mov	r4, r0
    write('"');
   b70f8:	f7ff feff 	bl	b6efa <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b70fc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b71a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b7100:	44a8      	add	r8, r5
    const char *s = str;
   b7102:	462f      	mov	r7, r5
    while (s != end) {
   b7104:	4547      	cmp	r7, r8
   b7106:	46ba      	mov	sl, r7
   b7108:	d03d      	beq.n	b7186 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b710a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b710e:	2e22      	cmp	r6, #34	; 0x22
   b7110:	d006      	beq.n	b7120 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b7112:	2e5c      	cmp	r6, #92	; 0x5c
   b7114:	d004      	beq.n	b7120 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b7116:	4630      	mov	r0, r6
   b7118:	f000 fc16 	bl	b7948 <isprint>
   b711c:	2800      	cmp	r0, #0
   b711e:	d1f1      	bne.n	b7104 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b7120:	6823      	ldr	r3, [r4, #0]
   b7122:	ebaa 0205 	sub.w	r2, sl, r5
   b7126:	689b      	ldr	r3, [r3, #8]
   b7128:	4629      	mov	r1, r5
   b712a:	4620      	mov	r0, r4
   b712c:	4798      	blx	r3
            write('\\');
   b712e:	215c      	movs	r1, #92	; 0x5c
   b7130:	4620      	mov	r0, r4
   b7132:	f7ff fee2 	bl	b6efa <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b7136:	2e0d      	cmp	r6, #13
   b7138:	d80a      	bhi.n	b7150 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b713a:	2e07      	cmp	r6, #7
   b713c:	d91c      	bls.n	b7178 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b713e:	f1a6 0308 	sub.w	r3, r6, #8
   b7142:	2b05      	cmp	r3, #5
   b7144:	d818      	bhi.n	b7178 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b7146:	e8df f003 	tbb	[pc, r3]
   b714a:	0f0d      	.short	0x0f0d
   b714c:	15131711 	.word	0x15131711
   b7150:	2e22      	cmp	r6, #34	; 0x22
   b7152:	d001      	beq.n	b7158 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b7154:	2e5c      	cmp	r6, #92	; 0x5c
   b7156:	d10f      	bne.n	b7178 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b7158:	4631      	mov	r1, r6
                write('b');
   b715a:	4620      	mov	r0, r4
   b715c:	f7ff fecd 	bl	b6efa <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b7160:	463d      	mov	r5, r7
    while (s != end) {
   b7162:	e7cf      	b.n	b7104 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b7164:	2162      	movs	r1, #98	; 0x62
   b7166:	e7f8      	b.n	b715a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b7168:	2174      	movs	r1, #116	; 0x74
   b716a:	e7f6      	b.n	b715a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b716c:	216e      	movs	r1, #110	; 0x6e
   b716e:	e7f4      	b.n	b715a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b7170:	2166      	movs	r1, #102	; 0x66
   b7172:	e7f2      	b.n	b715a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b7174:	2172      	movs	r1, #114	; 0x72
   b7176:	e7f0      	b.n	b715a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b7178:	6823      	ldr	r3, [r4, #0]
   b717a:	4632      	mov	r2, r6
   b717c:	68db      	ldr	r3, [r3, #12]
   b717e:	4649      	mov	r1, r9
   b7180:	4620      	mov	r0, r4
   b7182:	4798      	blx	r3
                break;
   b7184:	e7ec      	b.n	b7160 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b7186:	42bd      	cmp	r5, r7
   b7188:	d005      	beq.n	b7196 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b718a:	6823      	ldr	r3, [r4, #0]
   b718c:	1b7a      	subs	r2, r7, r5
   b718e:	689b      	ldr	r3, [r3, #8]
   b7190:	4629      	mov	r1, r5
   b7192:	4620      	mov	r0, r4
   b7194:	4798      	blx	r3
    }
    write('"');
   b7196:	2122      	movs	r1, #34	; 0x22
   b7198:	4620      	mov	r0, r4
   b719a:	f7ff feae 	bl	b6efa <_ZN5spark10JSONWriter5writeEc>
}
   b719e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b71a2:	bf00      	nop
   b71a4:	000b810b 	.word	0x000b810b

000b71a8 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b71a8:	b513      	push	{r0, r1, r4, lr}
   b71aa:	4604      	mov	r4, r0
   b71ac:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b71b0:	f7ff ff5e 	bl	b7070 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b71b4:	4620      	mov	r0, r4
   b71b6:	e9dd 2100 	ldrd	r2, r1, [sp]
   b71ba:	f7ff ff97 	bl	b70ec <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b71be:	2302      	movs	r3, #2
}
   b71c0:	4620      	mov	r0, r4
    state_ = VALUE;
   b71c2:	7123      	strb	r3, [r4, #4]
}
   b71c4:	b002      	add	sp, #8
   b71c6:	bd10      	pop	{r4, pc}

000b71c8 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b71c8:	b513      	push	{r0, r1, r4, lr}
   b71ca:	4604      	mov	r4, r0
   b71cc:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b71d0:	f7ff ff4e 	bl	b7070 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b71d4:	4620      	mov	r0, r4
   b71d6:	e9dd 2100 	ldrd	r2, r1, [sp]
   b71da:	f7ff ff87 	bl	b70ec <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b71de:	2301      	movs	r3, #1
}
   b71e0:	4620      	mov	r0, r4
    state_ = NEXT;
   b71e2:	7123      	strb	r3, [r4, #4]
}
   b71e4:	b002      	add	sp, #8
   b71e6:	bd10      	pop	{r4, pc}

000b71e8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b71e8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b71ea:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b71ec:	d902      	bls.n	b71f4 <pinAvailable+0xc>
    return false;
   b71ee:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b71f0:	b002      	add	sp, #8
   b71f2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b71f4:	f1a0 030b 	sub.w	r3, r0, #11
   b71f8:	2b02      	cmp	r3, #2
   b71fa:	d81a      	bhi.n	b7232 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b71fc:	4c17      	ldr	r4, [pc, #92]	; (b725c <pinAvailable+0x74>)
   b71fe:	7821      	ldrb	r1, [r4, #0]
   b7200:	f3bf 8f5b 	dmb	ish
   b7204:	f011 0101 	ands.w	r1, r1, #1
   b7208:	d10b      	bne.n	b7222 <pinAvailable+0x3a>
   b720a:	4620      	mov	r0, r4
   b720c:	9101      	str	r1, [sp, #4]
   b720e:	f7fc ff65 	bl	b40dc <__cxa_guard_acquire>
   b7212:	9901      	ldr	r1, [sp, #4]
   b7214:	b128      	cbz	r0, b7222 <pinAvailable+0x3a>
   b7216:	4812      	ldr	r0, [pc, #72]	; (b7260 <pinAvailable+0x78>)
   b7218:	f7fd fe8f 	bl	b4f3a <_ZN8SPIClassC1E19hal_spi_interface_t>
   b721c:	4620      	mov	r0, r4
   b721e:	f7fc ff62 	bl	b40e6 <__cxa_guard_release>
   b7222:	4b0f      	ldr	r3, [pc, #60]	; (b7260 <pinAvailable+0x78>)
   b7224:	7818      	ldrb	r0, [r3, #0]
   b7226:	f7fd fcdf 	bl	b4be8 <hal_spi_is_enabled>
   b722a:	2800      	cmp	r0, #0
   b722c:	d1df      	bne.n	b71ee <pinAvailable+0x6>
  return true; // 'pin' is available
   b722e:	2001      	movs	r0, #1
   b7230:	e7de      	b.n	b71f0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7232:	2801      	cmp	r0, #1
   b7234:	d809      	bhi.n	b724a <pinAvailable+0x62>
   b7236:	f000 f8ad 	bl	b7394 <_Z19__fetch_global_Wirev>
   b723a:	2100      	movs	r1, #0
   b723c:	7c00      	ldrb	r0, [r0, #16]
   b723e:	f7fd fc8b 	bl	b4b58 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7242:	f080 0001 	eor.w	r0, r0, #1
   b7246:	b2c0      	uxtb	r0, r0
   b7248:	e7d2      	b.n	b71f0 <pinAvailable+0x8>
   b724a:	3809      	subs	r0, #9
   b724c:	2801      	cmp	r0, #1
   b724e:	d8ee      	bhi.n	b722e <pinAvailable+0x46>
   b7250:	f000 f860 	bl	b7314 <_Z22__fetch_global_Serial1v>
   b7254:	7c00      	ldrb	r0, [r0, #16]
   b7256:	f7fd fc37 	bl	b4ac8 <hal_usart_is_enabled>
   b725a:	e7f2      	b.n	b7242 <pinAvailable+0x5a>
   b725c:	2003e710 	.word	0x2003e710
   b7260:	2003e714 	.word	0x2003e714

000b7264 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7264:	2823      	cmp	r0, #35	; 0x23
{
   b7266:	b538      	push	{r3, r4, r5, lr}
   b7268:	4604      	mov	r4, r0
   b726a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b726c:	d80a      	bhi.n	b7284 <pinMode+0x20>
   b726e:	29ff      	cmp	r1, #255	; 0xff
   b7270:	d008      	beq.n	b7284 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7272:	f7ff ffb9 	bl	b71e8 <pinAvailable>
   b7276:	b128      	cbz	r0, b7284 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b7278:	4629      	mov	r1, r5
   b727a:	4620      	mov	r0, r4
}
   b727c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b7280:	f7fd bb70 	b.w	b4964 <hal_gpio_mode>
}
   b7284:	bd38      	pop	{r3, r4, r5, pc}

000b7286 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b7286:	b538      	push	{r3, r4, r5, lr}
   b7288:	4604      	mov	r4, r0
   b728a:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b728c:	f7fd fb72 	bl	b4974 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7290:	28ff      	cmp	r0, #255	; 0xff
   b7292:	d010      	beq.n	b72b6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7294:	2806      	cmp	r0, #6
   b7296:	d804      	bhi.n	b72a2 <digitalWrite+0x1c>
   b7298:	234d      	movs	r3, #77	; 0x4d
   b729a:	fa23 f000 	lsr.w	r0, r3, r0
   b729e:	07c3      	lsls	r3, r0, #31
   b72a0:	d409      	bmi.n	b72b6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b72a2:	4620      	mov	r0, r4
   b72a4:	f7ff ffa0 	bl	b71e8 <pinAvailable>
   b72a8:	b128      	cbz	r0, b72b6 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b72aa:	4629      	mov	r1, r5
   b72ac:	4620      	mov	r0, r4
}
   b72ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b72b2:	f7fd bb67 	b.w	b4984 <hal_gpio_write>
}
   b72b6:	bd38      	pop	{r3, r4, r5, pc}

000b72b8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b72b8:	b510      	push	{r4, lr}
   b72ba:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b72bc:	f7fd fb5a 	bl	b4974 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b72c0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b72c2:	b2db      	uxtb	r3, r3
   b72c4:	2b01      	cmp	r3, #1
   b72c6:	d908      	bls.n	b72da <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b72c8:	4620      	mov	r0, r4
   b72ca:	f7ff ff8d 	bl	b71e8 <pinAvailable>
   b72ce:	b120      	cbz	r0, b72da <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b72d0:	4620      	mov	r0, r4
}
   b72d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b72d6:	f7fd bb5d 	b.w	b4994 <hal_gpio_read>
}
   b72da:	2000      	movs	r0, #0
   b72dc:	bd10      	pop	{r4, pc}

000b72de <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b72de:	4770      	bx	lr

000b72e0 <_Z20acquireSerial1Bufferv>:
{
   b72e0:	b538      	push	{r3, r4, r5, lr}
   b72e2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b72e4:	2514      	movs	r5, #20
   b72e6:	462a      	mov	r2, r5
   b72e8:	2100      	movs	r1, #0
   b72ea:	f000 fb5d 	bl	b79a8 <memset>
   b72ee:	8025      	strh	r5, [r4, #0]
   b72f0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b72f2:	4907      	ldr	r1, [pc, #28]	; (b7310 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b72f4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b72f6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b72f8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b72fa:	f000 fa07 	bl	b770c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b72fe:	4904      	ldr	r1, [pc, #16]	; (b7310 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7300:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7302:	4628      	mov	r0, r5
   b7304:	f000 fa02 	bl	b770c <_ZnajRKSt9nothrow_t>
    };
   b7308:	60e0      	str	r0, [r4, #12]
}
   b730a:	4620      	mov	r0, r4
   b730c:	bd38      	pop	{r3, r4, r5, pc}
   b730e:	bf00      	nop
   b7310:	000b8111 	.word	0x000b8111

000b7314 <_Z22__fetch_global_Serial1v>:
{
   b7314:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7316:	4d0e      	ldr	r5, [pc, #56]	; (b7350 <_Z22__fetch_global_Serial1v+0x3c>)
   b7318:	7829      	ldrb	r1, [r5, #0]
   b731a:	f3bf 8f5b 	dmb	ish
   b731e:	f011 0401 	ands.w	r4, r1, #1
{
   b7322:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7324:	d111      	bne.n	b734a <_Z22__fetch_global_Serial1v+0x36>
   b7326:	4628      	mov	r0, r5
   b7328:	f7fc fed8 	bl	b40dc <__cxa_guard_acquire>
   b732c:	b168      	cbz	r0, b734a <_Z22__fetch_global_Serial1v+0x36>
   b732e:	a801      	add	r0, sp, #4
   b7330:	f7ff ffd6 	bl	b72e0 <_Z20acquireSerial1Bufferv>
   b7334:	aa01      	add	r2, sp, #4
   b7336:	4621      	mov	r1, r4
   b7338:	4806      	ldr	r0, [pc, #24]	; (b7354 <_Z22__fetch_global_Serial1v+0x40>)
   b733a:	f7ff f943 	bl	b65c4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b733e:	4628      	mov	r0, r5
   b7340:	f7fc fed1 	bl	b40e6 <__cxa_guard_release>
   b7344:	4804      	ldr	r0, [pc, #16]	; (b7358 <_Z22__fetch_global_Serial1v+0x44>)
   b7346:	f000 faf9 	bl	b793c <atexit>
    return serial1;
}
   b734a:	4802      	ldr	r0, [pc, #8]	; (b7354 <_Z22__fetch_global_Serial1v+0x40>)
   b734c:	b007      	add	sp, #28
   b734e:	bd30      	pop	{r4, r5, pc}
   b7350:	2003e71c 	.word	0x2003e71c
   b7354:	2003e720 	.word	0x2003e720
   b7358:	000b72df 	.word	0x000b72df

000b735c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b735c:	4770      	bx	lr
	...

000b7360 <_Z17acquireWireBufferv>:
{
   b7360:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7362:	4b0a      	ldr	r3, [pc, #40]	; (b738c <_Z17acquireWireBufferv+0x2c>)
   b7364:	6003      	str	r3, [r0, #0]
   b7366:	2301      	movs	r3, #1
{
   b7368:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b736a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b736c:	4908      	ldr	r1, [pc, #32]	; (b7390 <_Z17acquireWireBufferv+0x30>)
   b736e:	2020      	movs	r0, #32
   b7370:	f000 f9cc 	bl	b770c <_ZnajRKSt9nothrow_t>
	};
   b7374:	2520      	movs	r5, #32
   b7376:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7378:	4905      	ldr	r1, [pc, #20]	; (b7390 <_Z17acquireWireBufferv+0x30>)
	};
   b737a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b737c:	4628      	mov	r0, r5
   b737e:	f000 f9c5 	bl	b770c <_ZnajRKSt9nothrow_t>
	};
   b7382:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7386:	4620      	mov	r0, r4
   b7388:	bd38      	pop	{r3, r4, r5, pc}
   b738a:	bf00      	nop
   b738c:	00010018 	.word	0x00010018
   b7390:	000b8111 	.word	0x000b8111

000b7394 <_Z19__fetch_global_Wirev>:
{
   b7394:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7396:	4d0e      	ldr	r5, [pc, #56]	; (b73d0 <_Z19__fetch_global_Wirev+0x3c>)
   b7398:	7829      	ldrb	r1, [r5, #0]
   b739a:	f3bf 8f5b 	dmb	ish
   b739e:	f011 0401 	ands.w	r4, r1, #1
{
   b73a2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b73a4:	d111      	bne.n	b73ca <_Z19__fetch_global_Wirev+0x36>
   b73a6:	4628      	mov	r0, r5
   b73a8:	f7fc fe98 	bl	b40dc <__cxa_guard_acquire>
   b73ac:	b168      	cbz	r0, b73ca <_Z19__fetch_global_Wirev+0x36>
   b73ae:	4668      	mov	r0, sp
   b73b0:	f7ff ffd6 	bl	b7360 <_Z17acquireWireBufferv>
   b73b4:	466a      	mov	r2, sp
   b73b6:	4621      	mov	r1, r4
   b73b8:	4806      	ldr	r0, [pc, #24]	; (b73d4 <_Z19__fetch_global_Wirev+0x40>)
   b73ba:	f7ff f94d 	bl	b6658 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b73be:	4628      	mov	r0, r5
   b73c0:	f7fc fe91 	bl	b40e6 <__cxa_guard_release>
   b73c4:	4804      	ldr	r0, [pc, #16]	; (b73d8 <_Z19__fetch_global_Wirev+0x44>)
   b73c6:	f000 fab9 	bl	b793c <atexit>
	return wire;
}
   b73ca:	4802      	ldr	r0, [pc, #8]	; (b73d4 <_Z19__fetch_global_Wirev+0x40>)
   b73cc:	b007      	add	sp, #28
   b73ce:	bd30      	pop	{r4, r5, pc}
   b73d0:	2003e738 	.word	0x2003e738
   b73d4:	2003e73c 	.word	0x2003e73c
   b73d8:	000b735d 	.word	0x000b735d

000b73dc <nrf_pdm_event_clear>:
    return (bool)*(volatile uint32_t *)((uint8_t *)NRF_PDM + (uint32_t)pdm_event);
}

__STATIC_INLINE void nrf_pdm_event_clear(nrf_pdm_event_t pdm_event)
{
    *((volatile uint32_t *)((uint8_t *)NRF_PDM + (uint32_t)pdm_event)) = 0x0UL;
   b73dc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   b73e0:	f500 30e8 	add.w	r0, r0, #118784	; 0x1d000
   b73e4:	2300      	movs	r3, #0
{
   b73e6:	b082      	sub	sp, #8
    *((volatile uint32_t *)((uint8_t *)NRF_PDM + (uint32_t)pdm_event)) = 0x0UL;
   b73e8:	6003      	str	r3, [r0, #0]
#if __CORTEX_M == 0x04
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_PDM + (uint32_t)pdm_event));
   b73ea:	6803      	ldr	r3, [r0, #0]
   b73ec:	9301      	str	r3, [sp, #4]
    (void)dummy;
   b73ee:	9b01      	ldr	r3, [sp, #4]
#endif
}
   b73f0:	b002      	add	sp, #8
   b73f2:	4770      	bx	lr

000b73f4 <PDM_IRQHandler>:

static nrfx_pdm_cb_t m_cb;


void nrfx_pdm_irq_handler(void)
{
   b73f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)NRF_PDM + (uint32_t)pdm_event);
   b73f6:	493c      	ldr	r1, [pc, #240]	; (b74e8 <PDM_IRQHandler+0xf4>)
   b73f8:	4c3c      	ldr	r4, [pc, #240]	; (b74ec <PDM_IRQHandler+0xf8>)
   b73fa:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    if (nrf_pdm_event_check(NRF_PDM_EVENT_STARTED))
   b73fe:	2a00      	cmp	r2, #0
   b7400:	d047      	beq.n	b7492 <PDM_IRQHandler+0x9e>
    {
        nrf_pdm_event_clear(NRF_PDM_EVENT_STARTED);
   b7402:	f44f 7080 	mov.w	r0, #256	; 0x100
   b7406:	f7ff ffe9 	bl	b73dc <nrf_pdm_event_clear>
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_PDM_EVENT_STARTED));

        uint8_t finished_buffer = m_cb.active_buffer;
   b740a:	7ca3      	ldrb	r3, [r4, #18]

        // Check if the next buffer was set before.
        uint8_t next_buffer = (~m_cb.active_buffer) & 0x01;
   b740c:	43da      	mvns	r2, r3
   b740e:	f002 0201 	and.w	r2, r2, #1
        if (m_cb.buff_address[next_buffer] ||
   b7412:	eb04 0182 	add.w	r1, r4, r2, lsl #2
   b7416:	6849      	ldr	r1, [r1, #4]
   b7418:	b911      	cbnz	r1, b7420 <PDM_IRQHandler+0x2c>
            m_cb.op_state == NRFX_PDM_STATE_STARTING)
   b741a:	7c61      	ldrb	r1, [r4, #17]
        if (m_cb.buff_address[next_buffer] ||
   b741c:	2902      	cmp	r1, #2
   b741e:	d12d      	bne.n	b747c <PDM_IRQHandler+0x88>
            nrfx_pdm_evt_t evt;
            evt.error = NRFX_PDM_NO_ERROR;
            m_cb.error = 0;

            // Release the full buffer if ready and request the next one.
            if (m_cb.op_state == NRFX_PDM_STATE_STARTING)
   b7420:	7c60      	ldrb	r0, [r4, #17]
   b7422:	2802      	cmp	r0, #2
                evt.buffer_released = 0;
                m_cb.op_state = NRFX_PDM_STATE_RUNNING;
            }
            else
            {
                evt.buffer_released = m_cb.buff_address[finished_buffer];
   b7424:	bf18      	it	ne
   b7426:	eb04 0383 	addne.w	r3, r4, r3, lsl #2
            evt.error = NRFX_PDM_NO_ERROR;
   b742a:	f04f 0100 	mov.w	r1, #0
                m_cb.op_state = NRFX_PDM_STATE_RUNNING;
   b742e:	bf0b      	itete	eq
   b7430:	2301      	moveq	r3, #1
                evt.buffer_released = m_cb.buff_address[finished_buffer];
   b7432:	6858      	ldrne	r0, [r3, #4]
                m_cb.op_state = NRFX_PDM_STATE_RUNNING;
   b7434:	7463      	strbeq	r3, [r4, #17]
                m_cb.buff_address[finished_buffer] = 0;
   b7436:	6059      	strne	r1, [r3, #4]
                m_cb.active_buffer = next_buffer;
            }
            evt.buffer_requested = true;
   b7438:	f04f 0301 	mov.w	r3, #1
            evt.error = NRFX_PDM_NO_ERROR;
   b743c:	f88d 100c 	strb.w	r1, [sp, #12]
            m_cb.error = 0;
   b7440:	74e1      	strb	r1, [r4, #19]
                evt.buffer_released = 0;
   b7442:	bf0e      	itee	eq
   b7444:	9102      	streq	r1, [sp, #8]
                evt.buffer_released = m_cb.buff_address[finished_buffer];
   b7446:	9002      	strne	r0, [sp, #8]
                m_cb.active_buffer = next_buffer;
   b7448:	74a2      	strbne	r2, [r4, #18]
            evt.buffer_requested = true;
   b744a:	f88d 3004 	strb.w	r3, [sp, #4]
                    .buffer_requested = false,
                    .buffer_released  = NULL,
                    .error = NRFX_PDM_ERROR_OVERFLOW
                };
                m_cb.error = 1;
                m_cb.event_handler(&evt);
   b744e:	6823      	ldr	r3, [r4, #0]
   b7450:	a801      	add	r0, sp, #4
   b7452:	4798      	blx	r3
            }
        }

        if (m_cb.op_state == NRFX_PDM_STATE_STARTING)
   b7454:	7c63      	ldrb	r3, [r4, #17]
   b7456:	2b02      	cmp	r3, #2
   b7458:	d101      	bne.n	b745e <PDM_IRQHandler+0x6a>
        {
            m_cb.op_state = NRFX_PDM_STATE_RUNNING;
   b745a:	2301      	movs	r3, #1
   b745c:	7463      	strb	r3, [r4, #17]
            m_cb.event_handler(&evt);
        }
        m_cb.active_buffer = 0;
    }

    if (m_cb.irq_buff_request)
   b745e:	7d23      	ldrb	r3, [r4, #20]
   b7460:	b153      	cbz	r3, b7478 <PDM_IRQHandler+0x84>
    {
        nrfx_pdm_evt_t const evt =
   b7462:	2301      	movs	r3, #1
   b7464:	f88d 3004 	strb.w	r3, [sp, #4]
   b7468:	2300      	movs	r3, #0
   b746a:	9302      	str	r3, [sp, #8]
   b746c:	f88d 300c 	strb.w	r3, [sp, #12]
        {
            .buffer_requested = true,
            .buffer_released  = NULL,
            .error = NRFX_PDM_NO_ERROR,
        };
        m_cb.irq_buff_request = 0;
   b7470:	7523      	strb	r3, [r4, #20]
        m_cb.event_handler(&evt);
   b7472:	a801      	add	r0, sp, #4
   b7474:	6823      	ldr	r3, [r4, #0]
   b7476:	4798      	blx	r3
    }
}
   b7478:	b004      	add	sp, #16
   b747a:	bd10      	pop	{r4, pc}
            if (m_cb.error == 0)
   b747c:	7ce3      	ldrb	r3, [r4, #19]
   b747e:	2b00      	cmp	r3, #0
   b7480:	d1e8      	bne.n	b7454 <PDM_IRQHandler+0x60>
                nrfx_pdm_evt_t const evt = {
   b7482:	f88d 3004 	strb.w	r3, [sp, #4]
   b7486:	9302      	str	r3, [sp, #8]
   b7488:	2301      	movs	r3, #1
   b748a:	f88d 300c 	strb.w	r3, [sp, #12]
                m_cb.error = 1;
   b748e:	74e3      	strb	r3, [r4, #19]
   b7490:	e7dd      	b.n	b744e <PDM_IRQHandler+0x5a>
   b7492:	f8d1 3104 	ldr.w	r3, [r1, #260]	; 0x104
    else if (nrf_pdm_event_check(NRF_PDM_EVENT_STOPPED))
   b7496:	2b00      	cmp	r3, #0
   b7498:	d0e1      	beq.n	b745e <PDM_IRQHandler+0x6a>
        nrf_pdm_event_clear(NRF_PDM_EVENT_STOPPED);
   b749a:	f44f 7082 	mov.w	r0, #260	; 0x104
   b749e:	f7ff ff9d 	bl	b73dc <nrf_pdm_event_clear>
    NRF_PDM->ENABLE = (PDM_ENABLE_ENABLE_Enabled << PDM_ENABLE_ENABLE_Pos);
}

__STATIC_INLINE void nrf_pdm_disable(void)
{
    NRF_PDM->ENABLE = (PDM_ENABLE_ENABLE_Disabled << PDM_ENABLE_ENABLE_Pos);
   b74a2:	f8c1 2500 	str.w	r2, [r1, #1280]	; 0x500
        if (m_cb.buff_address[m_cb.active_buffer])
   b74a6:	7ca3      	ldrb	r3, [r4, #18]
        m_cb.op_state = NRFX_PDM_STATE_IDLE;
   b74a8:	7462      	strb	r2, [r4, #17]
        if (m_cb.buff_address[m_cb.active_buffer])
   b74aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
        evt.error = NRFX_PDM_NO_ERROR;
   b74ae:	f88d 200c 	strb.w	r2, [sp, #12]
        if (m_cb.buff_address[m_cb.active_buffer])
   b74b2:	6859      	ldr	r1, [r3, #4]
        evt.buffer_requested = false;
   b74b4:	f88d 2004 	strb.w	r2, [sp, #4]
        if (m_cb.buff_address[m_cb.active_buffer])
   b74b8:	b121      	cbz	r1, b74c4 <PDM_IRQHandler+0xd0>
            m_cb.buff_address[m_cb.active_buffer] = 0;
   b74ba:	605a      	str	r2, [r3, #4]
            evt.buffer_released = m_cb.buff_address[m_cb.active_buffer];
   b74bc:	9102      	str	r1, [sp, #8]
            m_cb.event_handler(&evt);
   b74be:	6823      	ldr	r3, [r4, #0]
   b74c0:	a801      	add	r0, sp, #4
   b74c2:	4798      	blx	r3
        if (m_cb.buff_address[second_buffer])
   b74c4:	7ca3      	ldrb	r3, [r4, #18]
   b74c6:	43db      	mvns	r3, r3
   b74c8:	f003 0301 	and.w	r3, r3, #1
   b74cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b74d0:	685a      	ldr	r2, [r3, #4]
   b74d2:	b12a      	cbz	r2, b74e0 <PDM_IRQHandler+0xec>
            evt.buffer_released = m_cb.buff_address[second_buffer];
   b74d4:	9202      	str	r2, [sp, #8]
            m_cb.buff_address[second_buffer] = 0;
   b74d6:	2200      	movs	r2, #0
   b74d8:	605a      	str	r2, [r3, #4]
            m_cb.event_handler(&evt);
   b74da:	a801      	add	r0, sp, #4
   b74dc:	6823      	ldr	r3, [r4, #0]
   b74de:	4798      	blx	r3
        m_cb.active_buffer = 0;
   b74e0:	2300      	movs	r3, #0
   b74e2:	74a3      	strb	r3, [r4, #18]
   b74e4:	e7bb      	b.n	b745e <PDM_IRQHandler+0x6a>
   b74e6:	bf00      	nop
   b74e8:	4001d000 	.word	0x4001d000
   b74ec:	2003e750 	.word	0x2003e750

000b74f0 <nrfx_pdm_init>:


nrfx_err_t nrfx_pdm_init(nrfx_pdm_config_t const * p_config,
                         nrfx_pdm_event_handler_t  event_handler)
{
   b74f0:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(event_handler);
    nrfx_err_t err_code;

    if (m_cb.drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   b74f2:	4c39      	ldr	r4, [pc, #228]	; (b75d8 <nrfx_pdm_init+0xe8>)
   b74f4:	7c23      	ldrb	r3, [r4, #16]
{
   b74f6:	4602      	mov	r2, r0
    if (m_cb.drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   b74f8:	2b00      	cmp	r3, #0
   b74fa:	d168      	bne.n	b75ce <nrfx_pdm_init+0xde>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    if (p_config->gain_l > NRF_PDM_GAIN_MAXIMUM ||
   b74fc:	7a00      	ldrb	r0, [r0, #8]
   b74fe:	2850      	cmp	r0, #80	; 0x50
   b7500:	d867      	bhi.n	b75d2 <nrfx_pdm_init+0xe2>
   b7502:	7a50      	ldrb	r0, [r2, #9]
   b7504:	2850      	cmp	r0, #80	; 0x50
   b7506:	d864      	bhi.n	b75d2 <nrfx_pdm_init+0xe2>

    m_cb.buff_address[0] = 0;
    m_cb.buff_address[1] = 0;
    m_cb.active_buffer = 0;
    m_cb.error = 0;
    m_cb.event_handler = event_handler;
   b7508:	6021      	str	r1, [r4, #0]
    *p_pdm_edge = (nrf_pdm_edge_t)((mode & PDM_MODE_EDGE_Msk ) >> PDM_MODE_EDGE_Pos);
}

__STATIC_INLINE void nrf_pdm_clock_set(nrf_pdm_freq_t pdm_freq)
{
    NRF_PDM->PDMCLKCTRL = ((pdm_freq << PDM_PDMCLKCTRL_FREQ_Pos) & PDM_PDMCLKCTRL_FREQ_Msk);
   b750a:	4934      	ldr	r1, [pc, #208]	; (b75dc <nrfx_pdm_init+0xec>)
    m_cb.op_state = NRFX_PDM_STATE_IDLE;
   b750c:	7463      	strb	r3, [r4, #17]
    m_cb.buff_address[1] = 0;
   b750e:	e9c4 3301 	strd	r3, r3, [r4, #4]
    m_cb.active_buffer = 0;
   b7512:	8263      	strh	r3, [r4, #18]

    nrf_pdm_clock_set(p_config->clock_freq);
   b7514:	6853      	ldr	r3, [r2, #4]
   b7516:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
                    | ((pdm_edge << PDM_MODE_EDGE_Pos) & PDM_MODE_EDGE_Msk);
   b751a:	7853      	ldrb	r3, [r2, #1]
    NRF_PDM->MODE = ((pdm_mode << PDM_MODE_OPERATION_Pos) & PDM_MODE_OPERATION_Msk)
   b751c:	7810      	ldrb	r0, [r2, #0]
     return (nrf_pdm_freq_t) ((NRF_PDM->PDMCLKCTRL << PDM_PDMCLKCTRL_FREQ_Pos) & PDM_PDMCLKCTRL_FREQ_Msk);
}

__STATIC_INLINE void nrf_pdm_psel_connect(uint32_t psel_clk, uint32_t psel_din)
{
    NRF_PDM->PSEL.CLK = psel_clk;
   b751e:	4d2f      	ldr	r5, [pc, #188]	; (b75dc <nrfx_pdm_init+0xec>)
                    | ((pdm_edge << PDM_MODE_EDGE_Pos) & PDM_MODE_EDGE_Msk);
   b7520:	005b      	lsls	r3, r3, #1
    NRF_PDM->MODE = ((pdm_mode << PDM_MODE_OPERATION_Pos) & PDM_MODE_OPERATION_Msk)
   b7522:	f000 0001 	and.w	r0, r0, #1
                    | ((pdm_edge << PDM_MODE_EDGE_Pos) & PDM_MODE_EDGE_Msk);
   b7526:	f003 0302 	and.w	r3, r3, #2
   b752a:	4303      	orrs	r3, r0
    NRF_PDM->MODE = ((pdm_mode << PDM_MODE_OPERATION_Pos) & PDM_MODE_OPERATION_Msk)
   b752c:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
    nrf_pdm_mode_set(p_config->mode, p_config->edge);
    nrf_pdm_gain_set(p_config->gain_l, p_config->gain_r);
   b7530:	7a53      	ldrb	r3, [r2, #9]
                         & PDM_PSEL_DIN_CONNECT_Msk);
}

__STATIC_INLINE void nrf_pdm_gain_set(nrf_pdm_gain_t gain_l, nrf_pdm_gain_t gain_r)
{
    NRF_PDM->GAINL = gain_l;
   b7532:	7a10      	ldrb	r0, [r2, #8]
   b7534:	f8c1 0518 	str.w	r0, [r1, #1304]	; 0x518
    NRF_PDM->GAINR = gain_r;
   b7538:	f8c1 351c 	str.w	r3, [r1, #1308]	; 0x51c

    nrf_gpio_cfg_output(p_config->pin_clk);
   b753c:	7893      	ldrb	r3, [r2, #2]
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b753e:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b7540:	bf86      	itte	hi
   b7542:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b7546:	4926      	ldrhi	r1, [pc, #152]	; (b75e0 <nrfx_pdm_init+0xf0>)
        return NRF_P0;
   b7548:	f04f 41a0 	movls.w	r1, #1342177280	; 0x50000000
    nrf_gpio_pin_drive_t drive,
    nrf_gpio_pin_sense_t sense)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   b754c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   b7550:	2003      	movs	r0, #3
   b7552:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    nrf_gpio_pin_clear(p_config->pin_clk);
   b7556:	7893      	ldrb	r3, [r2, #2]
    if (*p_pin < P0_PIN_NUM)
   b7558:	2b1f      	cmp	r3, #31
        return NRF_P1;
   b755a:	bf8a      	itet	hi
   b755c:	4820      	ldrhi	r0, [pc, #128]	; (b75e0 <nrfx_pdm_init+0xf0>)
        return NRF_P0;
   b755e:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b7562:	f003 031f 	andhi.w	r3, r3, #31

__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b7566:	2101      	movs	r1, #1
   b7568:	fa01 f303 	lsl.w	r3, r1, r3
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b756c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    nrf_gpio_cfg_input(p_config->pin_din, NRF_GPIO_PIN_NOPULL);
   b7570:	78d3      	ldrb	r3, [r2, #3]
    if (*p_pin < P0_PIN_NUM)
   b7572:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b7574:	bf86      	itte	hi
   b7576:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   b757a:	4819      	ldrhi	r0, [pc, #100]	; (b75e0 <nrfx_pdm_init+0xf0>)
        return NRF_P0;
   b757c:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   b7580:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   b7584:	2100      	movs	r1, #0
   b7586:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    nrf_pdm_psel_connect(p_config->pin_clk, p_config->pin_din);
   b758a:	78d3      	ldrb	r3, [r2, #3]
   b758c:	7890      	ldrb	r0, [r2, #2]
    NRF_PDM->PSEL.CLK = psel_clk;
   b758e:	f8c5 0540 	str.w	r0, [r5, #1344]	; 0x540
    NRF_PDM->PSEL.DIN = psel_din;
   b7592:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544

    nrf_pdm_event_clear(NRF_PDM_EVENT_STARTED);
   b7596:	f44f 7080 	mov.w	r0, #256	; 0x100
   b759a:	f7ff ff1f 	bl	b73dc <nrf_pdm_event_clear>
    nrf_pdm_event_clear(NRF_PDM_EVENT_END);
   b759e:	f44f 7084 	mov.w	r0, #264	; 0x108
   b75a2:	f7ff ff1b 	bl	b73dc <nrf_pdm_event_clear>
    nrf_pdm_event_clear(NRF_PDM_EVENT_STOPPED);
   b75a6:	f44f 7082 	mov.w	r0, #260	; 0x104
   b75aa:	f7ff ff17 	bl	b73dc <nrf_pdm_event_clear>
    NRF_PDM->INTENSET = pdm_int_mask;
   b75ae:	2303      	movs	r3, #3
   b75b0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   b75b4:	7a93      	ldrb	r3, [r2, #10]
   b75b6:	4a0b      	ldr	r2, [pc, #44]	; (b75e4 <nrfx_pdm_init+0xf4>)
   b75b8:	015b      	lsls	r3, r3, #5
   b75ba:	b2db      	uxtb	r3, r3
   b75bc:	f882 331d 	strb.w	r3, [r2, #797]	; 0x31d
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   b75c0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   b75c4:	6013      	str	r3, [r2, #0]
    nrf_pdm_int_enable(NRF_PDM_INT_STARTED | NRF_PDM_INT_STOPPED);
    NRFX_IRQ_PRIORITY_SET(PDM_IRQn, p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(PDM_IRQn);
    m_cb.drv_state = NRFX_DRV_STATE_INITIALIZED;
   b75c6:	2301      	movs	r3, #1
   b75c8:	7423      	strb	r3, [r4, #16]
   b75ca:	4608      	mov	r0, r1
    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   b75cc:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   b75ce:	2008      	movs	r0, #8
   b75d0:	e7fc      	b.n	b75cc <nrfx_pdm_init+0xdc>
        return err_code;
   b75d2:	2007      	movs	r0, #7
   b75d4:	e7fa      	b.n	b75cc <nrfx_pdm_init+0xdc>
   b75d6:	bf00      	nop
   b75d8:	2003e750 	.word	0x2003e750
   b75dc:	4001d000 	.word	0x4001d000
   b75e0:	50000300 	.word	0x50000300
   b75e4:	e000e100 	.word	0xe000e100

000b75e8 <nrfx_pdm_uninit>:
    NRF_PDM->ENABLE = (PDM_ENABLE_ENABLE_Disabled << PDM_ENABLE_ENABLE_Pos);
   b75e8:	4b06      	ldr	r3, [pc, #24]	; (b7604 <nrfx_pdm_uninit+0x1c>)
   b75ea:	2200      	movs	r2, #0
    NRF_PDM->PSEL.CLK = ((PDM_PSEL_CLK_CONNECT_Disconnected << PDM_PSEL_CLK_CONNECT_Pos)
   b75ec:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    NRF_PDM->ENABLE = (PDM_ENABLE_ENABLE_Disabled << PDM_ENABLE_ENABLE_Pos);
   b75f0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    NRF_PDM->PSEL.CLK = ((PDM_PSEL_CLK_CONNECT_Disconnected << PDM_PSEL_CLK_CONNECT_Pos)
   b75f4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    NRF_PDM->PSEL.DIN = ((PDM_PSEL_DIN_CONNECT_Disconnected << PDM_PSEL_DIN_CONNECT_Pos)
   b75f8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544

void nrfx_pdm_uninit(void)
{
    nrf_pdm_disable();
    nrf_pdm_psel_disconnect();
    m_cb.drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   b75fc:	4b02      	ldr	r3, [pc, #8]	; (b7608 <nrfx_pdm_uninit+0x20>)
   b75fe:	741a      	strb	r2, [r3, #16]
    NRFX_LOG_INFO("Uninitialized.");
}
   b7600:	4770      	bx	lr
   b7602:	bf00      	nop
   b7604:	4001d000 	.word	0x4001d000
   b7608:	2003e750 	.word	0x2003e750

000b760c <nrfx_pdm_start>:
nrfx_err_t nrfx_pdm_start(void)
{
    NRFX_ASSERT(m_cb.drv_state != NRFX_DRV_STATE_UNINITIALIZED);
    nrfx_err_t err_code;

    if (m_cb.op_state != NRFX_PDM_STATE_IDLE)
   b760c:	4b0a      	ldr	r3, [pc, #40]	; (b7638 <nrfx_pdm_start+0x2c>)
   b760e:	7c5a      	ldrb	r2, [r3, #17]
   b7610:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   b7614:	b12a      	cbz	r2, b7622 <nrfx_pdm_start+0x16>
    {
        if (m_cb.op_state == NRFX_PDM_STATE_RUNNING)
   b7616:	7c5b      	ldrb	r3, [r3, #17]
        }
        err_code = NRFX_ERROR_BUSY;
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
   b7618:	2b01      	cmp	r3, #1
   b761a:	bf0c      	ite	eq
   b761c:	2000      	moveq	r0, #0
   b761e:	2011      	movne	r0, #17
   b7620:	4770      	bx	lr
    }

    m_cb.op_state = NRFX_PDM_STATE_STARTING;
   b7622:	2202      	movs	r2, #2
   b7624:	745a      	strb	r2, [r3, #17]
    m_cb.irq_buff_request = 1;
   b7626:	2201      	movs	r2, #1
   b7628:	751a      	strb	r2, [r3, #20]
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   b762a:	4b04      	ldr	r3, [pc, #16]	; (b763c <nrfx_pdm_start+0x30>)
   b762c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   b7630:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   b7634:	4770      	bx	lr
   b7636:	bf00      	nop
   b7638:	2003e750 	.word	0x2003e750
   b763c:	e000e100 	.word	0xe000e100

000b7640 <nrfx_pdm_buffer_set>:

nrfx_err_t nrfx_pdm_buffer_set(int16_t * buffer, uint16_t buffer_length)
{
   b7640:	b570      	push	{r4, r5, r6, lr}
    if (m_cb.drv_state == NRFX_DRV_STATE_UNINITIALIZED)
   b7642:	4c1f      	ldr	r4, [pc, #124]	; (b76c0 <nrfx_pdm_buffer_set+0x80>)
   b7644:	7c26      	ldrb	r6, [r4, #16]
   b7646:	2e00      	cmp	r6, #0
   b7648:	d034      	beq.n	b76b4 <nrfx_pdm_buffer_set+0x74>
    {
        return NRFX_ERROR_INVALID_STATE;
    }
    if (m_cb.op_state == NRFX_PDM_STATE_STOPPING)
   b764a:	7c63      	ldrb	r3, [r4, #17]
   b764c:	2b03      	cmp	r3, #3
   b764e:	d033      	beq.n	b76b8 <nrfx_pdm_buffer_set+0x78>
    {
        return NRFX_ERROR_BUSY;
    }
    if ((buffer == NULL) || (buffer_length > NRFX_PDM_MAX_BUFFER_SIZE))
   b7650:	2800      	cmp	r0, #0
   b7652:	d033      	beq.n	b76bc <nrfx_pdm_buffer_set+0x7c>
   b7654:	040b      	lsls	r3, r1, #16
   b7656:	d431      	bmi.n	b76bc <nrfx_pdm_buffer_set+0x7c>
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   b7658:	4b1a      	ldr	r3, [pc, #104]	; (b76c4 <nrfx_pdm_buffer_set+0x84>)
   b765a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   b765e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    // Enter the PDM critical section.
    NRFX_IRQ_DISABLE(PDM_IRQn);

    uint8_t next_buffer = (~m_cb.active_buffer) & 0x01;
    if (m_cb.op_state == NRFX_PDM_STATE_STARTING)
   b7662:	7c62      	ldrb	r2, [r4, #17]
    uint8_t next_buffer = (~m_cb.active_buffer) & 0x01;
   b7664:	7ca3      	ldrb	r3, [r4, #18]
    if (m_cb.op_state == NRFX_PDM_STATE_STARTING)
   b7666:	2a02      	cmp	r2, #2
   b7668:	bf1a      	itte	ne
   b766a:	43db      	mvnne	r3, r3
   b766c:	f003 0301 	andne.w	r3, r3, #1
    {
        next_buffer = 0;
   b7670:	2300      	moveq	r3, #0
    }

    if (m_cb.buff_address[next_buffer])
   b7672:	eb04 0583 	add.w	r5, r4, r3, lsl #2
   b7676:	686a      	ldr	r2, [r5, #4]
   b7678:	b9b2      	cbnz	r2, b76a8 <nrfx_pdm_buffer_set+0x68>
        // Buffer already set.
        err_code = NRFX_ERROR_BUSY;
    }
    else
    {
        m_cb.buff_address[next_buffer] = buffer;
   b767a:	6068      	str	r0, [r5, #4]
        m_cb.buff_length[next_buffer] = buffer_length;
   b767c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    *p_gain_r = NRF_PDM->GAINR;
}

__STATIC_INLINE void nrf_pdm_buffer_set(uint32_t * p_buffer, uint32_t num)
{
    NRF_PDM->SAMPLE.PTR = (uint32_t)p_buffer;
   b7680:	4d11      	ldr	r5, [pc, #68]	; (b76c8 <nrfx_pdm_buffer_set+0x88>)
   b7682:	8199      	strh	r1, [r3, #12]
        nrf_pdm_buffer_set((uint32_t *)buffer, buffer_length);

        if (m_cb.drv_state != NRFX_DRV_STATE_POWERED_ON)
   b7684:	2e02      	cmp	r6, #2
   b7686:	f8c5 0560 	str.w	r0, [r5, #1376]	; 0x560
    NRF_PDM->SAMPLE.MAXCNT = num;
   b768a:	f8c5 1564 	str.w	r1, [r5, #1380]	; 0x564
   b768e:	d009      	beq.n	b76a4 <nrfx_pdm_buffer_set+0x64>
    m_cb.drv_state = NRFX_DRV_STATE_POWERED_ON;
   b7690:	2302      	movs	r3, #2
    NRF_PDM->ENABLE = (PDM_ENABLE_ENABLE_Enabled << PDM_ENABLE_ENABLE_Pos);
   b7692:	2101      	movs	r1, #1
   b7694:	7423      	strb	r3, [r4, #16]
    nrf_pdm_event_clear(NRF_PDM_EVENT_STARTED);
   b7696:	f44f 7080 	mov.w	r0, #256	; 0x100
   b769a:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
   b769e:	f7ff fe9d 	bl	b73dc <nrf_pdm_event_clear>
    *((volatile uint32_t *)((uint8_t *)NRF_PDM + (uint32_t)pdm_task)) = 0x1UL;
   b76a2:	6029      	str	r1, [r5, #0]
    nrfx_err_t err_code = NRFX_SUCCESS;
   b76a4:	4610      	mov	r0, r2
   b76a6:	e000      	b.n	b76aa <nrfx_pdm_buffer_set+0x6a>
        err_code = NRFX_ERROR_BUSY;
   b76a8:	2011      	movs	r0, #17
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   b76aa:	4b06      	ldr	r3, [pc, #24]	; (b76c4 <nrfx_pdm_buffer_set+0x84>)
   b76ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   b76b0:	601a      	str	r2, [r3, #0]
        }
    }

    NRFX_IRQ_ENABLE(PDM_IRQn);
    return err_code;
}
   b76b2:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_STATE;
   b76b4:	2008      	movs	r0, #8
   b76b6:	e7fc      	b.n	b76b2 <nrfx_pdm_buffer_set+0x72>
        return NRFX_ERROR_BUSY;
   b76b8:	2011      	movs	r0, #17
   b76ba:	e7fa      	b.n	b76b2 <nrfx_pdm_buffer_set+0x72>
        return NRFX_ERROR_INVALID_PARAM;
   b76bc:	2007      	movs	r0, #7
   b76be:	e7f8      	b.n	b76b2 <nrfx_pdm_buffer_set+0x72>
   b76c0:	2003e750 	.word	0x2003e750
   b76c4:	e000e100 	.word	0xe000e100
   b76c8:	4001d000 	.word	0x4001d000

000b76cc <nrfx_pdm_stop>:
nrfx_err_t nrfx_pdm_stop(void)
{
    NRFX_ASSERT(m_cb.drv_state != NRFX_DRV_STATE_UNINITIALIZED);
    nrfx_err_t err_code;

    if (m_cb.op_state != NRFX_PDM_STATE_RUNNING)
   b76cc:	4b0c      	ldr	r3, [pc, #48]	; (b7700 <nrfx_pdm_stop+0x34>)
   b76ce:	7c59      	ldrb	r1, [r3, #17]
   b76d0:	2901      	cmp	r1, #1
   b76d2:	b2ca      	uxtb	r2, r1
   b76d4:	d00a      	beq.n	b76ec <nrfx_pdm_stop+0x20>
    {
        if (m_cb.op_state == NRFX_PDM_STATE_IDLE ||
   b76d6:	7c5a      	ldrb	r2, [r3, #17]
   b76d8:	b112      	cbz	r2, b76e0 <nrfx_pdm_stop+0x14>
            m_cb.op_state == NRFX_PDM_STATE_STARTING)
   b76da:	7c5a      	ldrb	r2, [r3, #17]
        if (m_cb.op_state == NRFX_PDM_STATE_IDLE ||
   b76dc:	2a02      	cmp	r2, #2
   b76de:	d10c      	bne.n	b76fa <nrfx_pdm_stop+0x2e>
    NRF_PDM->ENABLE = (PDM_ENABLE_ENABLE_Disabled << PDM_ENABLE_ENABLE_Pos);
   b76e0:	4a08      	ldr	r2, [pc, #32]	; (b7704 <nrfx_pdm_stop+0x38>)
   b76e2:	2000      	movs	r0, #0
   b76e4:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
        {
            nrf_pdm_disable();
            m_cb.op_state = NRFX_PDM_STATE_IDLE;
   b76e8:	7458      	strb	r0, [r3, #17]
            err_code = NRFX_SUCCESS;
            NRFX_LOG_INFO("Function: %s, error code: %s.",
                          __func__,
                          NRFX_LOG_ERROR_STRING_GET(err_code));
            return err_code;
   b76ea:	4770      	bx	lr
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    m_cb.drv_state = NRFX_DRV_STATE_INITIALIZED;
    m_cb.op_state = NRFX_PDM_STATE_STOPPING;
   b76ec:	2103      	movs	r1, #3
   b76ee:	7459      	strb	r1, [r3, #17]
    m_cb.drv_state = NRFX_DRV_STATE_INITIALIZED;
   b76f0:	741a      	strb	r2, [r3, #16]
    *((volatile uint32_t *)((uint8_t *)NRF_PDM + (uint32_t)pdm_task)) = 0x1UL;
   b76f2:	4b04      	ldr	r3, [pc, #16]	; (b7704 <nrfx_pdm_stop+0x38>)
   b76f4:	2000      	movs	r0, #0
   b76f6:	605a      	str	r2, [r3, #4]

    nrf_pdm_task_trigger(NRF_PDM_TASK_STOP);
    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   b76f8:	4770      	bx	lr
        return err_code;
   b76fa:	2011      	movs	r0, #17
}
   b76fc:	4770      	bx	lr
   b76fe:	bf00      	nop
   b7700:	2003e750 	.word	0x2003e750
   b7704:	4001d000 	.word	0x4001d000

000b7708 <_ZnwjRKSt9nothrow_t>:
   b7708:	f7fc bcd5 	b.w	b40b6 <_Znwj>

000b770c <_ZnajRKSt9nothrow_t>:
   b770c:	f7fc bcd5 	b.w	b40ba <_Znaj>

000b7710 <_ZSt25__throw_bad_function_callv>:
   b7710:	b508      	push	{r3, lr}
   b7712:	f7fd fb95 	bl	b4e40 <abort>
	...

000b7718 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7718:	4901      	ldr	r1, [pc, #4]	; (b7720 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b771a:	f000 b8f9 	b.w	b7910 <_ZNKSt9type_infoeqERKS_>
   b771e:	bf00      	nop
   b7720:	000b812c 	.word	0x000b812c

000b7724 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7724:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7726:	2400      	movs	r4, #0
   b7728:	2310      	movs	r3, #16
   b772a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b772e:	6803      	ldr	r3, [r0, #0]
   b7730:	4615      	mov	r5, r2
   b7732:	699e      	ldr	r6, [r3, #24]
   b7734:	6812      	ldr	r2, [r2, #0]
   b7736:	466b      	mov	r3, sp
   b7738:	e9cd 4400 	strd	r4, r4, [sp]
   b773c:	47b0      	blx	r6
   b773e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7742:	f003 0306 	and.w	r3, r3, #6
   b7746:	2b06      	cmp	r3, #6
   b7748:	bf03      	ittte	eq
   b774a:	9b00      	ldreq	r3, [sp, #0]
   b774c:	602b      	streq	r3, [r5, #0]
   b774e:	2001      	moveq	r0, #1
   b7750:	4620      	movne	r0, r4
   b7752:	b004      	add	sp, #16
   b7754:	bd70      	pop	{r4, r5, r6, pc}

000b7756 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7756:	9800      	ldr	r0, [sp, #0]
   b7758:	4290      	cmp	r0, r2
   b775a:	bf14      	ite	ne
   b775c:	2001      	movne	r0, #1
   b775e:	2006      	moveq	r0, #6
   b7760:	4770      	bx	lr
	...

000b7764 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7764:	b510      	push	{r4, lr}
   b7766:	4b03      	ldr	r3, [pc, #12]	; (b7774 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7768:	6003      	str	r3, [r0, #0]
   b776a:	4604      	mov	r4, r0
   b776c:	f000 f8cd 	bl	b790a <_ZNSt9type_infoD1Ev>
   b7770:	4620      	mov	r0, r4
   b7772:	bd10      	pop	{r4, pc}
   b7774:	000b816c 	.word	0x000b816c

000b7778 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7778:	b510      	push	{r4, lr}
   b777a:	4604      	mov	r4, r0
   b777c:	f7ff fff2 	bl	b7764 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7780:	4620      	mov	r0, r4
   b7782:	2108      	movs	r1, #8
   b7784:	f7fc fc9b 	bl	b40be <_ZdlPvj>
   b7788:	4620      	mov	r0, r4
   b778a:	bd10      	pop	{r4, pc}

000b778c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b778c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7790:	461f      	mov	r7, r3
   b7792:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7796:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b779a:	4598      	cmp	r8, r3
   b779c:	4606      	mov	r6, r0
   b779e:	4615      	mov	r5, r2
   b77a0:	d107      	bne.n	b77b2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b77a2:	9907      	ldr	r1, [sp, #28]
   b77a4:	f000 f8b4 	bl	b7910 <_ZNKSt9type_infoeqERKS_>
   b77a8:	b118      	cbz	r0, b77b2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b77aa:	7165      	strb	r5, [r4, #5]
   b77ac:	2000      	movs	r0, #0
   b77ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b77b2:	4639      	mov	r1, r7
   b77b4:	4630      	mov	r0, r6
   b77b6:	f000 f8ab 	bl	b7910 <_ZNKSt9type_infoeqERKS_>
   b77ba:	2800      	cmp	r0, #0
   b77bc:	d0f6      	beq.n	b77ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b77be:	2301      	movs	r3, #1
   b77c0:	f8c4 8000 	str.w	r8, [r4]
   b77c4:	7125      	strb	r5, [r4, #4]
   b77c6:	71a3      	strb	r3, [r4, #6]
   b77c8:	e7f0      	b.n	b77ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b77ca <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b77ca:	b538      	push	{r3, r4, r5, lr}
   b77cc:	4615      	mov	r5, r2
   b77ce:	461c      	mov	r4, r3
   b77d0:	f000 f89e 	bl	b7910 <_ZNKSt9type_infoeqERKS_>
   b77d4:	b120      	cbz	r0, b77e0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b77d6:	2308      	movs	r3, #8
   b77d8:	60e3      	str	r3, [r4, #12]
   b77da:	2306      	movs	r3, #6
   b77dc:	6025      	str	r5, [r4, #0]
   b77de:	7123      	strb	r3, [r4, #4]
   b77e0:	bd38      	pop	{r3, r4, r5, pc}

000b77e2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b77e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b77e4:	4605      	mov	r5, r0
   b77e6:	460c      	mov	r4, r1
   b77e8:	9201      	str	r2, [sp, #4]
   b77ea:	461e      	mov	r6, r3
   b77ec:	f000 f890 	bl	b7910 <_ZNKSt9type_infoeqERKS_>
   b77f0:	b950      	cbnz	r0, b7808 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b77f2:	2e03      	cmp	r6, #3
   b77f4:	d808      	bhi.n	b7808 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b77f6:	6823      	ldr	r3, [r4, #0]
   b77f8:	9a01      	ldr	r2, [sp, #4]
   b77fa:	695b      	ldr	r3, [r3, #20]
   b77fc:	4629      	mov	r1, r5
   b77fe:	4620      	mov	r0, r4
   b7800:	b002      	add	sp, #8
   b7802:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7806:	4718      	bx	r3
   b7808:	b002      	add	sp, #8
   b780a:	bd70      	pop	{r4, r5, r6, pc}

000b780c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b780c:	b510      	push	{r4, lr}
   b780e:	4b03      	ldr	r3, [pc, #12]	; (b781c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7810:	6003      	str	r3, [r0, #0]
   b7812:	4604      	mov	r4, r0
   b7814:	f7ff ffa6 	bl	b7764 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7818:	4620      	mov	r0, r4
   b781a:	bd10      	pop	{r4, pc}
   b781c:	000b81cc 	.word	0x000b81cc

000b7820 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7820:	b510      	push	{r4, lr}
   b7822:	4604      	mov	r4, r0
   b7824:	f7ff fff2 	bl	b780c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7828:	4620      	mov	r0, r4
   b782a:	210c      	movs	r1, #12
   b782c:	f7fc fc47 	bl	b40be <_ZdlPvj>
   b7830:	4620      	mov	r0, r4
   b7832:	bd10      	pop	{r4, pc}

000b7834 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7836:	9f08      	ldr	r7, [sp, #32]
   b7838:	4297      	cmp	r7, r2
   b783a:	4605      	mov	r5, r0
   b783c:	460e      	mov	r6, r1
   b783e:	4614      	mov	r4, r2
   b7840:	d00a      	beq.n	b7858 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7842:	68a8      	ldr	r0, [r5, #8]
   b7844:	6802      	ldr	r2, [r0, #0]
   b7846:	9708      	str	r7, [sp, #32]
   b7848:	6a15      	ldr	r5, [r2, #32]
   b784a:	4631      	mov	r1, r6
   b784c:	4622      	mov	r2, r4
   b784e:	46ac      	mov	ip, r5
   b7850:	b003      	add	sp, #12
   b7852:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7856:	4760      	bx	ip
   b7858:	4619      	mov	r1, r3
   b785a:	9301      	str	r3, [sp, #4]
   b785c:	f000 f858 	bl	b7910 <_ZNKSt9type_infoeqERKS_>
   b7860:	9b01      	ldr	r3, [sp, #4]
   b7862:	2800      	cmp	r0, #0
   b7864:	d0ed      	beq.n	b7842 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7866:	2006      	movs	r0, #6
   b7868:	b003      	add	sp, #12
   b786a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b786c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b786c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7870:	460d      	mov	r5, r1
   b7872:	4619      	mov	r1, r3
   b7874:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7878:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b787c:	4681      	mov	r9, r0
   b787e:	4617      	mov	r7, r2
   b7880:	4698      	mov	r8, r3
   b7882:	f000 f845 	bl	b7910 <_ZNKSt9type_infoeqERKS_>
   b7886:	b190      	cbz	r0, b78ae <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7888:	2d00      	cmp	r5, #0
   b788a:	6034      	str	r4, [r6, #0]
   b788c:	7137      	strb	r7, [r6, #4]
   b788e:	db09      	blt.n	b78a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7890:	1961      	adds	r1, r4, r5
   b7892:	458a      	cmp	sl, r1
   b7894:	bf0c      	ite	eq
   b7896:	2106      	moveq	r1, #6
   b7898:	2101      	movne	r1, #1
   b789a:	71b1      	strb	r1, [r6, #6]
   b789c:	2000      	movs	r0, #0
   b789e:	b001      	add	sp, #4
   b78a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b78a4:	3502      	adds	r5, #2
   b78a6:	d1f9      	bne.n	b789c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b78a8:	2301      	movs	r3, #1
   b78aa:	71b3      	strb	r3, [r6, #6]
   b78ac:	e7f6      	b.n	b789c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b78ae:	4554      	cmp	r4, sl
   b78b0:	d106      	bne.n	b78c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b78b2:	4659      	mov	r1, fp
   b78b4:	4648      	mov	r0, r9
   b78b6:	f000 f82b 	bl	b7910 <_ZNKSt9type_infoeqERKS_>
   b78ba:	b108      	cbz	r0, b78c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b78bc:	7177      	strb	r7, [r6, #5]
   b78be:	e7ed      	b.n	b789c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b78c0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b78c4:	6803      	ldr	r3, [r0, #0]
   b78c6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b78ca:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b78ce:	69dc      	ldr	r4, [r3, #28]
   b78d0:	463a      	mov	r2, r7
   b78d2:	4643      	mov	r3, r8
   b78d4:	4629      	mov	r1, r5
   b78d6:	46a4      	mov	ip, r4
   b78d8:	b001      	add	sp, #4
   b78da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b78de:	4760      	bx	ip

000b78e0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b78e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b78e4:	4607      	mov	r7, r0
   b78e6:	460c      	mov	r4, r1
   b78e8:	4615      	mov	r5, r2
   b78ea:	461e      	mov	r6, r3
   b78ec:	f7ff ff6d 	bl	b77ca <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b78f0:	b948      	cbnz	r0, b7906 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b78f2:	68b8      	ldr	r0, [r7, #8]
   b78f4:	6803      	ldr	r3, [r0, #0]
   b78f6:	699f      	ldr	r7, [r3, #24]
   b78f8:	462a      	mov	r2, r5
   b78fa:	4633      	mov	r3, r6
   b78fc:	4621      	mov	r1, r4
   b78fe:	46bc      	mov	ip, r7
   b7900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7904:	4760      	bx	ip
   b7906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b790a <_ZNSt9type_infoD1Ev>:
   b790a:	4770      	bx	lr

000b790c <_ZNKSt9type_info14__is_pointer_pEv>:
   b790c:	2000      	movs	r0, #0
   b790e:	4770      	bx	lr

000b7910 <_ZNKSt9type_infoeqERKS_>:
   b7910:	4281      	cmp	r1, r0
   b7912:	b508      	push	{r3, lr}
   b7914:	d00e      	beq.n	b7934 <_ZNKSt9type_infoeqERKS_+0x24>
   b7916:	6840      	ldr	r0, [r0, #4]
   b7918:	7803      	ldrb	r3, [r0, #0]
   b791a:	2b2a      	cmp	r3, #42	; 0x2a
   b791c:	d00c      	beq.n	b7938 <_ZNKSt9type_infoeqERKS_+0x28>
   b791e:	6849      	ldr	r1, [r1, #4]
   b7920:	780b      	ldrb	r3, [r1, #0]
   b7922:	2b2a      	cmp	r3, #42	; 0x2a
   b7924:	bf08      	it	eq
   b7926:	3101      	addeq	r1, #1
   b7928:	f7fc fb78 	bl	b401c <strcmp>
   b792c:	fab0 f080 	clz	r0, r0
   b7930:	0940      	lsrs	r0, r0, #5
   b7932:	bd08      	pop	{r3, pc}
   b7934:	2001      	movs	r0, #1
   b7936:	e7fc      	b.n	b7932 <_ZNKSt9type_infoeqERKS_+0x22>
   b7938:	2000      	movs	r0, #0
   b793a:	e7fa      	b.n	b7932 <_ZNKSt9type_infoeqERKS_+0x22>

000b793c <atexit>:
   b793c:	2300      	movs	r3, #0
   b793e:	4601      	mov	r1, r0
   b7940:	461a      	mov	r2, r3
   b7942:	4618      	mov	r0, r3
   b7944:	f000 b93a 	b.w	b7bbc <__register_exitproc>

000b7948 <isprint>:
   b7948:	4b02      	ldr	r3, [pc, #8]	; (b7954 <isprint+0xc>)
   b794a:	4418      	add	r0, r3
   b794c:	7840      	ldrb	r0, [r0, #1]
   b794e:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b7952:	4770      	bx	lr
   b7954:	000b8299 	.word	0x000b8299

000b7958 <memcpy>:
   b7958:	440a      	add	r2, r1
   b795a:	4291      	cmp	r1, r2
   b795c:	f100 33ff 	add.w	r3, r0, #4294967295
   b7960:	d100      	bne.n	b7964 <memcpy+0xc>
   b7962:	4770      	bx	lr
   b7964:	b510      	push	{r4, lr}
   b7966:	f811 4b01 	ldrb.w	r4, [r1], #1
   b796a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b796e:	4291      	cmp	r1, r2
   b7970:	d1f9      	bne.n	b7966 <memcpy+0xe>
   b7972:	bd10      	pop	{r4, pc}

000b7974 <memmove>:
   b7974:	4288      	cmp	r0, r1
   b7976:	b510      	push	{r4, lr}
   b7978:	eb01 0402 	add.w	r4, r1, r2
   b797c:	d902      	bls.n	b7984 <memmove+0x10>
   b797e:	4284      	cmp	r4, r0
   b7980:	4623      	mov	r3, r4
   b7982:	d807      	bhi.n	b7994 <memmove+0x20>
   b7984:	1e43      	subs	r3, r0, #1
   b7986:	42a1      	cmp	r1, r4
   b7988:	d008      	beq.n	b799c <memmove+0x28>
   b798a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b798e:	f803 2f01 	strb.w	r2, [r3, #1]!
   b7992:	e7f8      	b.n	b7986 <memmove+0x12>
   b7994:	4402      	add	r2, r0
   b7996:	4601      	mov	r1, r0
   b7998:	428a      	cmp	r2, r1
   b799a:	d100      	bne.n	b799e <memmove+0x2a>
   b799c:	bd10      	pop	{r4, pc}
   b799e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b79a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b79a6:	e7f7      	b.n	b7998 <memmove+0x24>

000b79a8 <memset>:
   b79a8:	4402      	add	r2, r0
   b79aa:	4603      	mov	r3, r0
   b79ac:	4293      	cmp	r3, r2
   b79ae:	d100      	bne.n	b79b2 <memset+0xa>
   b79b0:	4770      	bx	lr
   b79b2:	f803 1b01 	strb.w	r1, [r3], #1
   b79b6:	e7f9      	b.n	b79ac <memset+0x4>

000b79b8 <srand>:
   b79b8:	b538      	push	{r3, r4, r5, lr}
   b79ba:	4b10      	ldr	r3, [pc, #64]	; (b79fc <srand+0x44>)
   b79bc:	681d      	ldr	r5, [r3, #0]
   b79be:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b79c0:	4604      	mov	r4, r0
   b79c2:	b9b3      	cbnz	r3, b79f2 <srand+0x3a>
   b79c4:	2018      	movs	r0, #24
   b79c6:	f7fd fa1b 	bl	b4e00 <malloc>
   b79ca:	4602      	mov	r2, r0
   b79cc:	63a8      	str	r0, [r5, #56]	; 0x38
   b79ce:	b920      	cbnz	r0, b79da <srand+0x22>
   b79d0:	4b0b      	ldr	r3, [pc, #44]	; (b7a00 <srand+0x48>)
   b79d2:	480c      	ldr	r0, [pc, #48]	; (b7a04 <srand+0x4c>)
   b79d4:	2142      	movs	r1, #66	; 0x42
   b79d6:	f7fd fa43 	bl	b4e60 <__assert_func>
   b79da:	490b      	ldr	r1, [pc, #44]	; (b7a08 <srand+0x50>)
   b79dc:	4b0b      	ldr	r3, [pc, #44]	; (b7a0c <srand+0x54>)
   b79de:	e9c0 1300 	strd	r1, r3, [r0]
   b79e2:	4b0b      	ldr	r3, [pc, #44]	; (b7a10 <srand+0x58>)
   b79e4:	6083      	str	r3, [r0, #8]
   b79e6:	230b      	movs	r3, #11
   b79e8:	8183      	strh	r3, [r0, #12]
   b79ea:	2100      	movs	r1, #0
   b79ec:	2001      	movs	r0, #1
   b79ee:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b79f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b79f4:	2200      	movs	r2, #0
   b79f6:	611c      	str	r4, [r3, #16]
   b79f8:	615a      	str	r2, [r3, #20]
   b79fa:	bd38      	pop	{r3, r4, r5, pc}
   b79fc:	2003e598 	.word	0x2003e598
   b7a00:	000b8205 	.word	0x000b8205
   b7a04:	000b821c 	.word	0x000b821c
   b7a08:	abcd330e 	.word	0xabcd330e
   b7a0c:	e66d1234 	.word	0xe66d1234
   b7a10:	0005deec 	.word	0x0005deec

000b7a14 <strchr>:
   b7a14:	b2c9      	uxtb	r1, r1
   b7a16:	4603      	mov	r3, r0
   b7a18:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7a1c:	b11a      	cbz	r2, b7a26 <strchr+0x12>
   b7a1e:	428a      	cmp	r2, r1
   b7a20:	d1f9      	bne.n	b7a16 <strchr+0x2>
   b7a22:	4618      	mov	r0, r3
   b7a24:	4770      	bx	lr
   b7a26:	2900      	cmp	r1, #0
   b7a28:	bf18      	it	ne
   b7a2a:	2300      	movne	r3, #0
   b7a2c:	e7f9      	b.n	b7a22 <strchr+0xe>

000b7a2e <strchrnul>:
   b7a2e:	b510      	push	{r4, lr}
   b7a30:	4604      	mov	r4, r0
   b7a32:	f7ff ffef 	bl	b7a14 <strchr>
   b7a36:	b918      	cbnz	r0, b7a40 <strchrnul+0x12>
   b7a38:	4620      	mov	r0, r4
   b7a3a:	f7fc faf9 	bl	b4030 <strlen>
   b7a3e:	4420      	add	r0, r4
   b7a40:	bd10      	pop	{r4, pc}

000b7a42 <strcpy>:
   b7a42:	4603      	mov	r3, r0
   b7a44:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7a48:	f803 2b01 	strb.w	r2, [r3], #1
   b7a4c:	2a00      	cmp	r2, #0
   b7a4e:	d1f9      	bne.n	b7a44 <strcpy+0x2>
   b7a50:	4770      	bx	lr

000b7a52 <strncmp>:
   b7a52:	b510      	push	{r4, lr}
   b7a54:	b17a      	cbz	r2, b7a76 <strncmp+0x24>
   b7a56:	4603      	mov	r3, r0
   b7a58:	3901      	subs	r1, #1
   b7a5a:	1884      	adds	r4, r0, r2
   b7a5c:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7a60:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7a64:	4290      	cmp	r0, r2
   b7a66:	d101      	bne.n	b7a6c <strncmp+0x1a>
   b7a68:	42a3      	cmp	r3, r4
   b7a6a:	d101      	bne.n	b7a70 <strncmp+0x1e>
   b7a6c:	1a80      	subs	r0, r0, r2
   b7a6e:	bd10      	pop	{r4, pc}
   b7a70:	2800      	cmp	r0, #0
   b7a72:	d1f3      	bne.n	b7a5c <strncmp+0xa>
   b7a74:	e7fa      	b.n	b7a6c <strncmp+0x1a>
   b7a76:	4610      	mov	r0, r2
   b7a78:	e7f9      	b.n	b7a6e <strncmp+0x1c>

000b7a7a <strrchr>:
   b7a7a:	b538      	push	{r3, r4, r5, lr}
   b7a7c:	4603      	mov	r3, r0
   b7a7e:	460c      	mov	r4, r1
   b7a80:	b969      	cbnz	r1, b7a9e <strrchr+0x24>
   b7a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7a86:	f7ff bfc5 	b.w	b7a14 <strchr>
   b7a8a:	1c43      	adds	r3, r0, #1
   b7a8c:	4605      	mov	r5, r0
   b7a8e:	4621      	mov	r1, r4
   b7a90:	4618      	mov	r0, r3
   b7a92:	f7ff ffbf 	bl	b7a14 <strchr>
   b7a96:	2800      	cmp	r0, #0
   b7a98:	d1f7      	bne.n	b7a8a <strrchr+0x10>
   b7a9a:	4628      	mov	r0, r5
   b7a9c:	bd38      	pop	{r3, r4, r5, pc}
   b7a9e:	2500      	movs	r5, #0
   b7aa0:	e7f5      	b.n	b7a8e <strrchr+0x14>
	...

000b7aa4 <_strtol_l.constprop.0>:
   b7aa4:	2b01      	cmp	r3, #1
   b7aa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7aaa:	d001      	beq.n	b7ab0 <_strtol_l.constprop.0+0xc>
   b7aac:	2b24      	cmp	r3, #36	; 0x24
   b7aae:	d906      	bls.n	b7abe <_strtol_l.constprop.0+0x1a>
   b7ab0:	f7fd f9ce 	bl	b4e50 <__errno>
   b7ab4:	2316      	movs	r3, #22
   b7ab6:	6003      	str	r3, [r0, #0]
   b7ab8:	2000      	movs	r0, #0
   b7aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7abe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b7ba4 <_strtol_l.constprop.0+0x100>
   b7ac2:	460d      	mov	r5, r1
   b7ac4:	462e      	mov	r6, r5
   b7ac6:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7aca:	f814 700c 	ldrb.w	r7, [r4, ip]
   b7ace:	f017 0708 	ands.w	r7, r7, #8
   b7ad2:	d1f7      	bne.n	b7ac4 <_strtol_l.constprop.0+0x20>
   b7ad4:	2c2d      	cmp	r4, #45	; 0x2d
   b7ad6:	d132      	bne.n	b7b3e <_strtol_l.constprop.0+0x9a>
   b7ad8:	782c      	ldrb	r4, [r5, #0]
   b7ada:	2701      	movs	r7, #1
   b7adc:	1cb5      	adds	r5, r6, #2
   b7ade:	2b00      	cmp	r3, #0
   b7ae0:	d05b      	beq.n	b7b9a <_strtol_l.constprop.0+0xf6>
   b7ae2:	2b10      	cmp	r3, #16
   b7ae4:	d109      	bne.n	b7afa <_strtol_l.constprop.0+0x56>
   b7ae6:	2c30      	cmp	r4, #48	; 0x30
   b7ae8:	d107      	bne.n	b7afa <_strtol_l.constprop.0+0x56>
   b7aea:	782c      	ldrb	r4, [r5, #0]
   b7aec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b7af0:	2c58      	cmp	r4, #88	; 0x58
   b7af2:	d14d      	bne.n	b7b90 <_strtol_l.constprop.0+0xec>
   b7af4:	786c      	ldrb	r4, [r5, #1]
   b7af6:	2310      	movs	r3, #16
   b7af8:	3502      	adds	r5, #2
   b7afa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b7afe:	f108 38ff 	add.w	r8, r8, #4294967295
   b7b02:	f04f 0c00 	mov.w	ip, #0
   b7b06:	fbb8 f9f3 	udiv	r9, r8, r3
   b7b0a:	4666      	mov	r6, ip
   b7b0c:	fb03 8a19 	mls	sl, r3, r9, r8
   b7b10:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b7b14:	f1be 0f09 	cmp.w	lr, #9
   b7b18:	d816      	bhi.n	b7b48 <_strtol_l.constprop.0+0xa4>
   b7b1a:	4674      	mov	r4, lr
   b7b1c:	42a3      	cmp	r3, r4
   b7b1e:	dd24      	ble.n	b7b6a <_strtol_l.constprop.0+0xc6>
   b7b20:	f1bc 0f00 	cmp.w	ip, #0
   b7b24:	db1e      	blt.n	b7b64 <_strtol_l.constprop.0+0xc0>
   b7b26:	45b1      	cmp	r9, r6
   b7b28:	d31c      	bcc.n	b7b64 <_strtol_l.constprop.0+0xc0>
   b7b2a:	d101      	bne.n	b7b30 <_strtol_l.constprop.0+0x8c>
   b7b2c:	45a2      	cmp	sl, r4
   b7b2e:	db19      	blt.n	b7b64 <_strtol_l.constprop.0+0xc0>
   b7b30:	fb06 4603 	mla	r6, r6, r3, r4
   b7b34:	f04f 0c01 	mov.w	ip, #1
   b7b38:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7b3c:	e7e8      	b.n	b7b10 <_strtol_l.constprop.0+0x6c>
   b7b3e:	2c2b      	cmp	r4, #43	; 0x2b
   b7b40:	bf04      	itt	eq
   b7b42:	782c      	ldrbeq	r4, [r5, #0]
   b7b44:	1cb5      	addeq	r5, r6, #2
   b7b46:	e7ca      	b.n	b7ade <_strtol_l.constprop.0+0x3a>
   b7b48:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b7b4c:	f1be 0f19 	cmp.w	lr, #25
   b7b50:	d801      	bhi.n	b7b56 <_strtol_l.constprop.0+0xb2>
   b7b52:	3c37      	subs	r4, #55	; 0x37
   b7b54:	e7e2      	b.n	b7b1c <_strtol_l.constprop.0+0x78>
   b7b56:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b7b5a:	f1be 0f19 	cmp.w	lr, #25
   b7b5e:	d804      	bhi.n	b7b6a <_strtol_l.constprop.0+0xc6>
   b7b60:	3c57      	subs	r4, #87	; 0x57
   b7b62:	e7db      	b.n	b7b1c <_strtol_l.constprop.0+0x78>
   b7b64:	f04f 3cff 	mov.w	ip, #4294967295
   b7b68:	e7e6      	b.n	b7b38 <_strtol_l.constprop.0+0x94>
   b7b6a:	f1bc 0f00 	cmp.w	ip, #0
   b7b6e:	da05      	bge.n	b7b7c <_strtol_l.constprop.0+0xd8>
   b7b70:	2322      	movs	r3, #34	; 0x22
   b7b72:	6003      	str	r3, [r0, #0]
   b7b74:	4646      	mov	r6, r8
   b7b76:	b942      	cbnz	r2, b7b8a <_strtol_l.constprop.0+0xe6>
   b7b78:	4630      	mov	r0, r6
   b7b7a:	e79e      	b.n	b7aba <_strtol_l.constprop.0+0x16>
   b7b7c:	b107      	cbz	r7, b7b80 <_strtol_l.constprop.0+0xdc>
   b7b7e:	4276      	negs	r6, r6
   b7b80:	2a00      	cmp	r2, #0
   b7b82:	d0f9      	beq.n	b7b78 <_strtol_l.constprop.0+0xd4>
   b7b84:	f1bc 0f00 	cmp.w	ip, #0
   b7b88:	d000      	beq.n	b7b8c <_strtol_l.constprop.0+0xe8>
   b7b8a:	1e69      	subs	r1, r5, #1
   b7b8c:	6011      	str	r1, [r2, #0]
   b7b8e:	e7f3      	b.n	b7b78 <_strtol_l.constprop.0+0xd4>
   b7b90:	2430      	movs	r4, #48	; 0x30
   b7b92:	2b00      	cmp	r3, #0
   b7b94:	d1b1      	bne.n	b7afa <_strtol_l.constprop.0+0x56>
   b7b96:	2308      	movs	r3, #8
   b7b98:	e7af      	b.n	b7afa <_strtol_l.constprop.0+0x56>
   b7b9a:	2c30      	cmp	r4, #48	; 0x30
   b7b9c:	d0a5      	beq.n	b7aea <_strtol_l.constprop.0+0x46>
   b7b9e:	230a      	movs	r3, #10
   b7ba0:	e7ab      	b.n	b7afa <_strtol_l.constprop.0+0x56>
   b7ba2:	bf00      	nop
   b7ba4:	000b829a 	.word	0x000b829a

000b7ba8 <strtol>:
   b7ba8:	4613      	mov	r3, r2
   b7baa:	460a      	mov	r2, r1
   b7bac:	4601      	mov	r1, r0
   b7bae:	4802      	ldr	r0, [pc, #8]	; (b7bb8 <strtol+0x10>)
   b7bb0:	6800      	ldr	r0, [r0, #0]
   b7bb2:	f7ff bf77 	b.w	b7aa4 <_strtol_l.constprop.0>
   b7bb6:	bf00      	nop
   b7bb8:	2003e598 	.word	0x2003e598

000b7bbc <__register_exitproc>:
   b7bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7bc0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7c7c <__register_exitproc+0xc0>
   b7bc4:	4606      	mov	r6, r0
   b7bc6:	f8d8 0000 	ldr.w	r0, [r8]
   b7bca:	461f      	mov	r7, r3
   b7bcc:	460d      	mov	r5, r1
   b7bce:	4691      	mov	r9, r2
   b7bd0:	f000 f856 	bl	b7c80 <__retarget_lock_acquire_recursive>
   b7bd4:	4b25      	ldr	r3, [pc, #148]	; (b7c6c <__register_exitproc+0xb0>)
   b7bd6:	681c      	ldr	r4, [r3, #0]
   b7bd8:	b934      	cbnz	r4, b7be8 <__register_exitproc+0x2c>
   b7bda:	4c25      	ldr	r4, [pc, #148]	; (b7c70 <__register_exitproc+0xb4>)
   b7bdc:	601c      	str	r4, [r3, #0]
   b7bde:	4b25      	ldr	r3, [pc, #148]	; (b7c74 <__register_exitproc+0xb8>)
   b7be0:	b113      	cbz	r3, b7be8 <__register_exitproc+0x2c>
   b7be2:	681b      	ldr	r3, [r3, #0]
   b7be4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7be8:	6863      	ldr	r3, [r4, #4]
   b7bea:	2b1f      	cmp	r3, #31
   b7bec:	dd07      	ble.n	b7bfe <__register_exitproc+0x42>
   b7bee:	f8d8 0000 	ldr.w	r0, [r8]
   b7bf2:	f000 f847 	bl	b7c84 <__retarget_lock_release_recursive>
   b7bf6:	f04f 30ff 	mov.w	r0, #4294967295
   b7bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7bfe:	b34e      	cbz	r6, b7c54 <__register_exitproc+0x98>
   b7c00:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7c04:	b988      	cbnz	r0, b7c2a <__register_exitproc+0x6e>
   b7c06:	4b1c      	ldr	r3, [pc, #112]	; (b7c78 <__register_exitproc+0xbc>)
   b7c08:	b923      	cbnz	r3, b7c14 <__register_exitproc+0x58>
   b7c0a:	f8d8 0000 	ldr.w	r0, [r8]
   b7c0e:	f000 f838 	bl	b7c82 <__retarget_lock_release>
   b7c12:	e7f0      	b.n	b7bf6 <__register_exitproc+0x3a>
   b7c14:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7c18:	f7fd f8f2 	bl	b4e00 <malloc>
   b7c1c:	2800      	cmp	r0, #0
   b7c1e:	d0f4      	beq.n	b7c0a <__register_exitproc+0x4e>
   b7c20:	2300      	movs	r3, #0
   b7c22:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7c26:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7c2a:	6863      	ldr	r3, [r4, #4]
   b7c2c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7c30:	2201      	movs	r2, #1
   b7c32:	409a      	lsls	r2, r3
   b7c34:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7c38:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7c3c:	4313      	orrs	r3, r2
   b7c3e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7c42:	2e02      	cmp	r6, #2
   b7c44:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7c48:	bf02      	ittt	eq
   b7c4a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7c4e:	4313      	orreq	r3, r2
   b7c50:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7c54:	6863      	ldr	r3, [r4, #4]
   b7c56:	f8d8 0000 	ldr.w	r0, [r8]
   b7c5a:	1c5a      	adds	r2, r3, #1
   b7c5c:	3302      	adds	r3, #2
   b7c5e:	6062      	str	r2, [r4, #4]
   b7c60:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7c64:	f000 f80e 	bl	b7c84 <__retarget_lock_release_recursive>
   b7c68:	2000      	movs	r0, #0
   b7c6a:	e7c6      	b.n	b7bfa <__register_exitproc+0x3e>
   b7c6c:	2003e7f4 	.word	0x2003e7f4
   b7c70:	2003e768 	.word	0x2003e768
   b7c74:	00000000 	.word	0x00000000
   b7c78:	000b4e01 	.word	0x000b4e01
   b7c7c:	2003e5fc 	.word	0x2003e5fc

000b7c80 <__retarget_lock_acquire_recursive>:
   b7c80:	4770      	bx	lr

000b7c82 <__retarget_lock_release>:
   b7c82:	4770      	bx	lr

000b7c84 <__retarget_lock_release_recursive>:
   b7c84:	4770      	bx	lr

000b7c86 <link_code_end>:
	...

000b7c88 <dynalib_user>:
   b7c88:	4041 000b 407d 000b 40a5 000b 40a9 000b     A@..}@...@...@..
   b7c98:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b7ca8:	7620 7269 7574 6c61 5200 6365 726f 6964      virtual.Recordi
   b7cb8:	676e 7320 6174 7472 6465 5200 6365 726f     ng started.Recor
   b7cc8:	6964 676e 7320 6f74 7070 6465 5000 4d44     ding stopped.PDM
   b7cd8:	6420 6365 646f 7265 6920 696e 2074 7265      decoder init er
   b7ce8:	3d72 6425 5000 4d44 6420 6365 646f 7265     r=%d.PDM decoder
   b7cf8:	7320 6174 7472 6520 7272 253d 0064 7473      start err=%d.st
   b7d08:	7261 6974 676e 6600 6961 656c 2064 6f74     arting.failed to
   b7d18:	6320 6e6f 656e 7463 7420 206f 6573 7672      connect to serv
   b7d28:	7265 7300 6f74 7070 6e69 0067               er.stopping.

000b7d34 <_ZTVN5spark10LogHandlerE>:
	...
   b7d44:	40c5 000b 40ed 000b                         .@...@..

000b7d4c <_ZTVN5spark16SerialLogHandlerE>:
	...
   b7d54:	4131 000b 4165 000b 5e19 000b 5fbd 000b     1A..eA...^..._..

000b7d64 <_ZTV18Microphone_PDM_MCU>:
	...
   b7d6c:	45e1 000b 45f5 000b 4775 000b 4795 000b     .E...E..uG...G..
   b7d7c:	4821 000b 4839 000b 4847 000b 476b 000b     !H..9H..GH..kG..
   b7d8c:	484f 000b 4869 000b                         OH..iH..

000b7d94 <_ZTV14Microphone_PDM>:
	...
   b7d9c:	460d 000b 4621 000b 4775 000b 45c9 000b     .F..!F..uG...E..
   b7dac:	45cd 000b 45d1 000b 45d5 000b 45d9 000b     .E...E...E...E..
   b7dbc:	45dd 000b 4649 000b                         .E..IF..

000b7dc4 <_ZTV20Microphone_PDM_nRF52>:
	...
   b7dcc:	4769 000b 4783 000b 4775 000b 4795 000b     iG...G..uG...G..
   b7ddc:	4821 000b 4839 000b 4847 000b 476b 000b     !H..9H..GH..kG..
   b7dec:	484f 000b 4869 000b                         OH..iH..

000b7df4 <_ZTVN5spark13EthernetClassE>:
	...
   b7dfc:	4edf 000b 4ed5 000b 4ecb 000b 4ec1 000b     .N...N...N...N..
   b7e0c:	4eb5 000b 4ea9 000b 6ce1 000b 6ce9 000b     .N...N...l...l..
   b7e1c:	4e9d 000b 4e95 000b 4e8b 000b 4e81 000b     .N...N...N...N..
   b7e2c:	6e11 000b 6d19 000b 6d21 000b               .n...m..!m..

000b7e38 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b7e40 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b7e48:	512d 000b 512f 000b 50ed 000b 6e67 000b     -Q../Q...P..gn..
   b7e58:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   b7e68:	6c61 0031 534a 4e4f 7453 6572 6d61 6f4c     al1.JSONStreamLo
   b7e78:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
   b7e88:	7530 0020 205d 2c00 0020 2928 203a 2000     0u .] ., .(): . 
   b7e98:	005b 6f63 6564 3d20 0020 6925 6400 7465     [.code = .%i.det
   b7ea8:	6961 736c 3d20 0020 0a0d 6d00 6600 6c00     ails = ....m.f.l
   b7eb8:	006e 6e66 7400 6300 646f 0065 6564 6174     n.fn.t.code.deta
   b7ec8:	6c69 0000                                   il..

000b7ecc <_ZTVN5spark16StreamLogHandlerE>:
	...
   b7ed4:	569d 000b 56b5 000b 5e19 000b 5fbd 000b     .V...V...^..._..

000b7ee4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b7eec:	56c9 000b 56dd 000b 5ff5 000b 5223 000b     .V...V..._..#R..

000b7efc <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b7f04:	5235 000b 525b 000b 5d7d 000b 5225 000b     5R..[R..}]..%R..

000b7f14 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b7f1c:	5233 000b 5269 000b 5605 000b 528b 000b     3R..iR...V...R..
   b7f2c:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   b7f3c:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000b7f48 <_ZTV9IPAddress>:
	...
   b7f50:	62fd 000b 62ed 000b 62ef 000b               .b...b...b..

000b7f5c <_ZTV9USBSerial>:
	...
   b7f64:	6427 000b 648f 000b 6465 000b 5101 000b     'd...d..ed...Q..
   b7f74:	6457 000b 6429 000b 6439 000b 6489 000b     Wd..)d..9d...d..
   b7f84:	51f9 000b 6449 000b 6421 000b               .Q..Id..!d..

000b7f90 <_ZTV11USARTSerial>:
	...
   b7f98:	654b 000b 65b7 000b 658f 000b 5101 000b     Ke...e...e...Q..
   b7fa8:	655f 000b 657b 000b 656d 000b 6589 000b     _e..{e..me...e..
   b7fb8:	51f9 000b 654d 000b 6551 000b               .Q..Me..Qe..

000b7fc4 <_ZTV7TwoWire>:
	...
   b7fcc:	6601 000b 664b 000b 6623 000b 6603 000b     .f..Kf..#f...f..
   b7fdc:	662b 000b 6633 000b 663b 000b 6643 000b     +f..3f..;f..Cf..
   b7fec:	51f9 000b 6977 6972 676e 7200 6365 2076     .Q..wiring.recv 
   b7ffc:	7265 6f72 2072 203d 6425 0000               error = %d..

000b8008 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8010:	6719 000b 673d 000b 6c1f 000b 674b 000b     .g..=g...l..Kg..
   b8020:	671d 000b                                   .g..

000b8024 <_ZTV9TCPClient>:
	...
   b802c:	617d 000b 6195 000b 6695 000b 66af 000b     }a...a...f...f..
   b803c:	6ab5 000b 66d9 000b 6933 000b 670d 000b     .j...f..3i...g..
   b804c:	51f9 000b 69c5 000b 6805 000b 6961 000b     .Q...i...h..ai..
   b805c:	6b69 000b 6901 000b 670f 000b 66c1 000b     ik...i...g...f..
   b806c:	6751 000b 67e5 000b                         Qg...g..

000b8074 <_ZTVN5spark9WiFiClassE>:
	...
   b807c:	6c83 000b 6c79 000b 6c6f 000b 6c25 000b     .l..yl..ol..%l..
   b808c:	6c63 000b 6c57 000b 6ce1 000b 6ce9 000b     cl..Wl...l...l..
   b809c:	6c4b 000b 6c43 000b 6c39 000b 6c2f 000b     Kl..Cl..9l../l..
   b80ac:	6e11 000b 6d19 000b 6d21 000b               .n...m..!m..

000b80b8 <CSWTCH.109>:
   b80b8:	e678 2003 e700 2003 e708 2003               x.. ... ... 

000b80c4 <_ZTVN5spark12NetworkClassE>:
	...
   b80cc:	6ca1 000b 6cab 000b 6cb5 000b 6cbf 000b     .l...l...l...l..
   b80dc:	6cc9 000b 6cd5 000b 6ce1 000b 6ce9 000b     .l...l...l...l..
   b80ec:	6cf1 000b 6cfd 000b 6d05 000b 6d0f 000b     .l...l...m...m..
   b80fc:	6e11 000b 6d19 000b 6d21 000b 7525 7500     .n...m..!m..%u.u
   b810c:	3025 7834                                    %04x.

000b8111 <_ZSt7nothrow>:
	...

000b8112 <_ZTSSt19_Sp_make_shared_tag>:
   b8112:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b8122:	6572 5f64 6174 0067 0000                    red_tag...

000b812c <_ZTISt19_Sp_make_shared_tag>:
   b812c:	816c 000b 8112 000b                         l.......

000b8134 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b8134:	81cc 000b 8140 000b 81f0 000b               ....@.......

000b8140 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b8140:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b8150:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b8160:	0045 0000                                   E...

000b8164 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b8164:	0000 0000 8134 000b 7765 000b 7779 000b     ....4...ew..yw..
   b8174:	790d 000b 790d 000b 77e3 000b 7725 000b     .y...y...w..%w..
   b8184:	77cb 000b 778d 000b 7757 000b               .w...w..Ww..

000b8190 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b8190:	81cc 000b 819c 000b 8134 000b               ........4...

000b819c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b819c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b81ac:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b81bc:	666e 456f 0000 0000                         nfoE....

000b81c4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b81c4:	0000 0000 8190 000b 780d 000b 7821 000b     .........x..!x..
   b81d4:	790d 000b 790d 000b 77e3 000b 7725 000b     .y...y...w..%w..
   b81e4:	78e1 000b 786d 000b 7835 000b               .x..mx..5x..

000b81f0 <_ZTISt9type_info>:
   b81f0:	816c 000b 81f8 000b                         l.......

000b81f8 <_ZTSSt9type_info>:
   b81f8:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b8208:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b8218:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b8228:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b8238:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b8248:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b8258:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b8268:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b8278:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b8288:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b8299 <_ctype_>:
   b8299:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b82a9:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b82b9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b82c9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b82d9:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b82e9:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b82f9:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b8309:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b8319:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b839a <link_const_data_end>:
	...

000b839c <link_constructors_location>:
   b839c:	000b44fd 	.word	0x000b44fd
   b83a0:	000b4ee9 	.word	0x000b4ee9
   b83a4:	000b4f51 	.word	0x000b4f51
   b83a8:	000b50dd 	.word	0x000b50dd
   b83ac:	000b5e09 	.word	0x000b5e09
   b83b0:	000b6169 	.word	0x000b6169
   b83b4:	000b61a9 	.word	0x000b61a9
   b83b8:	000b6c8d 	.word	0x000b6c8d
   b83bc:	000b6e25 	.word	0x000b6e25
